
LFF4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800384c  0800384c  0001384c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080039d0  080039d0  000139d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000218  20000000  080039d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020218  2**0
                  CONTENTS
  7 .bss          0000028c  20000218  20000218  00020218  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200004a4  200004a4  00020218  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c5ad  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003766  00000000  00000000  0003c7f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008a9a  00000000  00000000  0003ff5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000b98  00000000  00000000  000489f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e90  00000000  00000000  00049590  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007b40  00000000  00000000  0004a420  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000044ca  00000000  00000000  00051f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005642a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000026d8  00000000  00000000  000564a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003834 	.word	0x08003834

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	08003834 	.word	0x08003834

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000270:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000272:	4b08      	ldr	r3, [pc, #32]	; (8000294 <HAL_InitTick+0x24>)
{
 8000274:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000276:	6818      	ldr	r0, [r3, #0]
 8000278:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800027c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000280:	f000 fc92 	bl	8000ba8 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000284:	2200      	movs	r2, #0
 8000286:	4621      	mov	r1, r4
 8000288:	f04f 30ff 	mov.w	r0, #4294967295
 800028c:	f000 fc4c 	bl	8000b28 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000290:	2000      	movs	r0, #0
 8000292:	bd10      	pop	{r4, pc}
 8000294:	20000044 	.word	0x20000044

08000298 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000298:	4a07      	ldr	r2, [pc, #28]	; (80002b8 <HAL_Init+0x20>)
{
 800029a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800029c:	6813      	ldr	r3, [r2, #0]
 800029e:	f043 0310 	orr.w	r3, r3, #16
 80002a2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002a4:	2003      	movs	r0, #3
 80002a6:	f000 fc2d 	bl	8000b04 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80002aa:	2000      	movs	r0, #0
 80002ac:	f7ff ffe0 	bl	8000270 <HAL_InitTick>
  HAL_MspInit();
 80002b0:	f002 fc1e 	bl	8002af0 <HAL_MspInit>
}
 80002b4:	2000      	movs	r0, #0
 80002b6:	bd08      	pop	{r3, pc}
 80002b8:	40022000 	.word	0x40022000

080002bc <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80002bc:	4a02      	ldr	r2, [pc, #8]	; (80002c8 <HAL_IncTick+0xc>)
 80002be:	6813      	ldr	r3, [r2, #0]
 80002c0:	3301      	adds	r3, #1
 80002c2:	6013      	str	r3, [r2, #0]
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	20000278 	.word	0x20000278

080002cc <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80002cc:	4b01      	ldr	r3, [pc, #4]	; (80002d4 <HAL_GetTick+0x8>)
 80002ce:	6818      	ldr	r0, [r3, #0]
}
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	20000278 	.word	0x20000278

080002d8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002d8:	b513      	push	{r0, r1, r4, lr}
 80002da:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80002dc:	f7ff fff6 	bl	80002cc <HAL_GetTick>
 80002e0:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80002e2:	f7ff fff3 	bl	80002cc <HAL_GetTick>
 80002e6:	9b01      	ldr	r3, [sp, #4]
 80002e8:	1b00      	subs	r0, r0, r4
 80002ea:	4298      	cmp	r0, r3
 80002ec:	d3f9      	bcc.n	80002e2 <HAL_Delay+0xa>
  {
  }
}
 80002ee:	b002      	add	sp, #8
 80002f0:	bd10      	pop	{r4, pc}

080002f2 <HAL_ADC_ConvCpltCallback>:
 80002f2:	4770      	bx	lr

080002f4 <HAL_ADC_ConvHalfCpltCallback>:
 80002f4:	4770      	bx	lr

080002f6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80002f6:	4770      	bx	lr

080002f8 <ADC_Disable>:
  *         stopped.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80002f8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80002fa:	6803      	ldr	r3, [r0, #0]
{
 80002fc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 80002fe:	6898      	ldr	r0, [r3, #8]
 8000300:	f000 0003 	and.w	r0, r0, #3
 8000304:	2801      	cmp	r0, #1
 8000306:	d001      	beq.n	800030c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000308:	2000      	movs	r0, #0
 800030a:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800030c:	681a      	ldr	r2, [r3, #0]
 800030e:	07d2      	lsls	r2, r2, #31
 8000310:	d5fa      	bpl.n	8000308 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000312:	689a      	ldr	r2, [r3, #8]
 8000314:	f002 020d 	and.w	r2, r2, #13
 8000318:	2a01      	cmp	r2, #1
 800031a:	d11b      	bne.n	8000354 <ADC_Disable+0x5c>
      __HAL_ADC_DISABLE(hadc);
 800031c:	689a      	ldr	r2, [r3, #8]
 800031e:	f042 0202 	orr.w	r2, r2, #2
 8000322:	609a      	str	r2, [r3, #8]
 8000324:	2203      	movs	r2, #3
 8000326:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000328:	f7ff ffd0 	bl	80002cc <HAL_GetTick>
 800032c:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800032e:	6823      	ldr	r3, [r4, #0]
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	07db      	lsls	r3, r3, #31
 8000334:	d5e8      	bpl.n	8000308 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000336:	f7ff ffc9 	bl	80002cc <HAL_GetTick>
 800033a:	1b40      	subs	r0, r0, r5
 800033c:	2802      	cmp	r0, #2
 800033e:	d9f6      	bls.n	800032e <ADC_Disable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000340:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000342:	f043 0310 	orr.w	r3, r3, #16
 8000346:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000348:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800034a:	f043 0301 	orr.w	r3, r3, #1
 800034e:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000350:	2001      	movs	r0, #1
 8000352:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000354:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000356:	f043 0310 	orr.w	r3, r3, #16
 800035a:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800035c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800035e:	f043 0301 	orr.w	r3, r3, #1
 8000362:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8000364:	bd38      	pop	{r3, r4, r5, pc}
	...

08000368 <ADC_Enable>:
{
 8000368:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800036a:	6803      	ldr	r3, [r0, #0]
 800036c:	689a      	ldr	r2, [r3, #8]
 800036e:	f002 0203 	and.w	r2, r2, #3
 8000372:	2a01      	cmp	r2, #1
{
 8000374:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000376:	d104      	bne.n	8000382 <ADC_Enable+0x1a>
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	07d2      	lsls	r2, r2, #31
 800037c:	d501      	bpl.n	8000382 <ADC_Enable+0x1a>
  return HAL_OK;
 800037e:	2000      	movs	r0, #0
 8000380:	bd38      	pop	{r3, r4, r5, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000382:	6899      	ldr	r1, [r3, #8]
 8000384:	4a0e      	ldr	r2, [pc, #56]	; (80003c0 <ADC_Enable+0x58>)
 8000386:	4211      	tst	r1, r2
 8000388:	d10f      	bne.n	80003aa <ADC_Enable+0x42>
    __HAL_ADC_ENABLE(hadc);
 800038a:	689a      	ldr	r2, [r3, #8]
 800038c:	f042 0201 	orr.w	r2, r2, #1
 8000390:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8000392:	f7ff ff9b 	bl	80002cc <HAL_GetTick>
 8000396:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000398:	6823      	ldr	r3, [r4, #0]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	07db      	lsls	r3, r3, #31
 800039e:	d4ee      	bmi.n	800037e <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80003a0:	f7ff ff94 	bl	80002cc <HAL_GetTick>
 80003a4:	1b40      	subs	r0, r0, r5
 80003a6:	2802      	cmp	r0, #2
 80003a8:	d9f6      	bls.n	8000398 <ADC_Enable+0x30>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80003ac:	f043 0310 	orr.w	r3, r3, #16
 80003b0:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80003ba:	2001      	movs	r0, #1
 80003bc:	bd38      	pop	{r3, r4, r5, pc}
 80003be:	bf00      	nop
 80003c0:	8000003f 	.word	0x8000003f

080003c4 <ADC_DMAError>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80003c4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80003c6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80003c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003cc:	6443      	str	r3, [r0, #68]	; 0x44
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80003ce:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80003d0:	f043 0304 	orr.w	r3, r3, #4
 80003d4:	6483      	str	r3, [r0, #72]	; 0x48
  HAL_ADC_ErrorCallback(hadc); 
 80003d6:	f7ff bf8e 	b.w	80002f6 <HAL_ADC_ErrorCallback>

080003da <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80003da:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80003dc:	f7ff bf8a 	b.w	80002f4 <HAL_ADC_ConvHalfCpltCallback>

080003e0 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80003e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80003e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80003e4:	f012 0f50 	tst.w	r2, #80	; 0x50
 80003e8:	d118      	bne.n	800041c <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80003ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80003ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80003f0:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80003f2:	681a      	ldr	r2, [r3, #0]
 80003f4:	68d2      	ldr	r2, [r2, #12]
 80003f6:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80003fa:	d10c      	bne.n	8000416 <ADC_DMAConvCplt+0x36>
 80003fc:	69da      	ldr	r2, [r3, #28]
 80003fe:	b952      	cbnz	r2, 8000416 <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000400:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000402:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000406:	645a      	str	r2, [r3, #68]	; 0x44
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800040a:	04d2      	lsls	r2, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800040c:	bf5e      	ittt	pl
 800040e:	6c5a      	ldrpl	r2, [r3, #68]	; 0x44
 8000410:	f042 0201 	orrpl.w	r2, r2, #1
 8000414:	645a      	strpl	r2, [r3, #68]	; 0x44
    HAL_ADC_ConvCpltCallback(hadc); 
 8000416:	4618      	mov	r0, r3
 8000418:	f7ff bf6b 	b.w	80002f2 <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800041c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800041e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000420:	4718      	bx	r3
	...

08000424 <HAL_ADC_Init>:
{
 8000424:	b570      	push	{r4, r5, r6, lr}
 8000426:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0U;
 8000428:	2300      	movs	r3, #0
 800042a:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 800042c:	4604      	mov	r4, r0
 800042e:	2800      	cmp	r0, #0
 8000430:	f000 80e3 	beq.w	80005fa <HAL_ADC_Init+0x1d6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000434:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000436:	06d5      	lsls	r5, r2, #27
 8000438:	f100 80cc 	bmi.w	80005d4 <HAL_ADC_Init+0x1b0>
    if (hadc->State == HAL_ADC_STATE_RESET)
 800043c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800043e:	2b00      	cmp	r3, #0
 8000440:	f000 8092 	beq.w	8000568 <HAL_ADC_Init+0x144>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000444:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000446:	6823      	ldr	r3, [r4, #0]
 8000448:	689a      	ldr	r2, [r3, #8]
 800044a:	00d2      	lsls	r2, r2, #3
 800044c:	d502      	bpl.n	8000454 <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800044e:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	d50a      	bpl.n	800046a <HAL_ADC_Init+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8000454:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000456:	f023 0312 	bic.w	r3, r3, #18
 800045a:	f043 0310 	orr.w	r3, r3, #16
 800045e:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000460:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000462:	f043 0301 	orr.w	r3, r3, #1
 8000466:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8000468:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800046a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800046c:	06de      	lsls	r6, r3, #27
 800046e:	f100 80be 	bmi.w	80005ee <HAL_ADC_Init+0x1ca>
 8000472:	2800      	cmp	r0, #0
 8000474:	f040 80bb 	bne.w	80005ee <HAL_ADC_Init+0x1ca>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000478:	6823      	ldr	r3, [r4, #0]
 800047a:	6899      	ldr	r1, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800047c:	f011 0104 	ands.w	r1, r1, #4
 8000480:	f040 80b5 	bne.w	80005ee <HAL_ADC_Init+0x1ca>
    ADC_STATE_CLR_SET(hadc->State,
 8000484:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000486:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 800048a:	f042 0202 	orr.w	r2, r2, #2
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800048e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8000492:	6462      	str	r2, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000494:	bf0c      	ite	eq
 8000496:	4a5a      	ldreq	r2, [pc, #360]	; (8000600 <HAL_ADC_Init+0x1dc>)
 8000498:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 800049c:	9201      	str	r2, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800049e:	689a      	ldr	r2, [r3, #8]
 80004a0:	f002 0203 	and.w	r2, r2, #3
 80004a4:	2a01      	cmp	r2, #1
 80004a6:	d102      	bne.n	80004ae <HAL_ADC_Init+0x8a>
 80004a8:	681a      	ldr	r2, [r3, #0]
 80004aa:	07d5      	lsls	r5, r2, #31
 80004ac:	d410      	bmi.n	80004d0 <HAL_ADC_Init+0xac>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80004ae:	9a01      	ldr	r2, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80004b0:	b13a      	cbz	r2, 80004c2 <HAL_ADC_Init+0x9e>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80004b2:	6895      	ldr	r5, [r2, #8]
 80004b4:	f005 0503 	and.w	r5, r5, #3
 80004b8:	2d01      	cmp	r5, #1
 80004ba:	d102      	bne.n	80004c2 <HAL_ADC_Init+0x9e>
 80004bc:	6812      	ldr	r2, [r2, #0]
 80004be:	07d2      	lsls	r2, r2, #31
 80004c0:	d406      	bmi.n	80004d0 <HAL_ADC_Init+0xac>
      MODIFY_REG(tmpADC_Common->CCR       ,
 80004c2:	4d50      	ldr	r5, [pc, #320]	; (8000604 <HAL_ADC_Init+0x1e0>)
 80004c4:	6866      	ldr	r6, [r4, #4]
 80004c6:	68aa      	ldr	r2, [r5, #8]
 80004c8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80004cc:	4332      	orrs	r2, r6
 80004ce:	60aa      	str	r2, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 80004d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80004d2:	68a6      	ldr	r6, [r4, #8]
 80004d4:	69e5      	ldr	r5, [r4, #28]
 80004d6:	2a01      	cmp	r2, #1
 80004d8:	68e2      	ldr	r2, [r4, #12]
 80004da:	ea42 0206 	orr.w	r2, r2, r6
 80004de:	bf18      	it	ne
 80004e0:	f44f 5180 	movne.w	r1, #4096	; 0x1000
 80004e4:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 80004e8:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80004ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80004ec:	2901      	cmp	r1, #1
 80004ee:	d107      	bne.n	8000500 <HAL_ADC_Init+0xdc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80004f0:	2d00      	cmp	r5, #0
 80004f2:	d171      	bne.n	80005d8 <HAL_ADC_Init+0x1b4>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80004f4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80004f6:	3901      	subs	r1, #1
 80004f8:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80004fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000500:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000502:	2901      	cmp	r1, #1
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000504:	bf1e      	ittt	ne
 8000506:	6b25      	ldrne	r5, [r4, #48]	; 0x30
 8000508:	4329      	orrne	r1, r5
 800050a:	430a      	orrne	r2, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800050c:	6899      	ldr	r1, [r3, #8]
 800050e:	f011 0f0c 	tst.w	r1, #12
 8000512:	d10b      	bne.n	800052c <HAL_ADC_Init+0x108>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000514:	68d9      	ldr	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000516:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000518:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800051c:	f021 0102 	bic.w	r1, r1, #2
 8000520:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000522:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000524:	0049      	lsls	r1, r1, #1
 8000526:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 800052a:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 800052c:	68dd      	ldr	r5, [r3, #12]
 800052e:	4936      	ldr	r1, [pc, #216]	; (8000608 <HAL_ADC_Init+0x1e4>)
 8000530:	4029      	ands	r1, r5
 8000532:	430a      	orrs	r2, r1
 8000534:	60da      	str	r2, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000536:	6922      	ldr	r2, [r4, #16]
 8000538:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800053a:	bf05      	ittet	eq
 800053c:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 800053e:	6a22      	ldreq	r2, [r4, #32]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000540:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000542:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8000546:	bf06      	itte	eq
 8000548:	f021 010f 	biceq.w	r1, r1, #15
 800054c:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800054e:	f022 020f 	bicne.w	r2, r2, #15
 8000552:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8000554:	2300      	movs	r3, #0
 8000556:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 8000558:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800055a:	f023 0303 	bic.w	r3, r3, #3
 800055e:	f043 0301 	orr.w	r3, r3, #1
 8000562:	6463      	str	r3, [r4, #68]	; 0x44
}
 8000564:	b016      	add	sp, #88	; 0x58
 8000566:	bd70      	pop	{r4, r5, r6, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 8000568:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 800056a:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 800056c:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 800056e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8000572:	f001 ff9b 	bl	80024ac <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000576:	6823      	ldr	r3, [r4, #0]
 8000578:	689b      	ldr	r3, [r3, #8]
 800057a:	00d8      	lsls	r0, r3, #3
 800057c:	f53f af62 	bmi.w	8000444 <HAL_ADC_Init+0x20>
        tmp_hal_status = ADC_Disable(hadc);
 8000580:	4620      	mov	r0, r4
 8000582:	f7ff feb9 	bl	80002f8 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000586:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000588:	06d1      	lsls	r1, r2, #27
 800058a:	f53f af5c 	bmi.w	8000446 <HAL_ADC_Init+0x22>
 800058e:	2800      	cmp	r0, #0
 8000590:	f47f af59 	bne.w	8000446 <HAL_ADC_Init+0x22>
          ADC_STATE_CLR_SET(hadc->State,
 8000594:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000596:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800059a:	f023 0302 	bic.w	r3, r3, #2
 800059e:	f043 0302 	orr.w	r3, r3, #2
 80005a2:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80005a4:	6823      	ldr	r3, [r4, #0]
 80005a6:	689a      	ldr	r2, [r3, #8]
 80005a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80005ac:	609a      	str	r2, [r3, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80005ae:	689a      	ldr	r2, [r3, #8]
 80005b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005b4:	609a      	str	r2, [r3, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <HAL_ADC_Init+0x1e8>)
 80005b8:	4a15      	ldr	r2, [pc, #84]	; (8000610 <HAL_ADC_Init+0x1ec>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80005c0:	230a      	movs	r3, #10
 80005c2:	4353      	muls	r3, r2
            wait_loop_index--;
 80005c4:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 80005c6:	9b00      	ldr	r3, [sp, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	f43f af3b 	beq.w	8000444 <HAL_ADC_Init+0x20>
            wait_loop_index--;
 80005ce:	9b00      	ldr	r3, [sp, #0]
 80005d0:	3b01      	subs	r3, #1
 80005d2:	e7f7      	b.n	80005c4 <HAL_ADC_Init+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005d4:	4618      	mov	r0, r3
 80005d6:	e748      	b.n	800046a <HAL_ADC_Init+0x46>
        ADC_STATE_CLR_SET(hadc->State,
 80005d8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80005da:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 80005de:	f041 0120 	orr.w	r1, r1, #32
 80005e2:	6461      	str	r1, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80005e6:	f041 0101 	orr.w	r1, r1, #1
 80005ea:	64a1      	str	r1, [r4, #72]	; 0x48
 80005ec:	e788      	b.n	8000500 <HAL_ADC_Init+0xdc>
    ADC_STATE_CLR_SET(hadc->State,
 80005ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80005f0:	f023 0312 	bic.w	r3, r3, #18
 80005f4:	f043 0310 	orr.w	r3, r3, #16
 80005f8:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 80005fa:	2001      	movs	r0, #1
 80005fc:	e7b2      	b.n	8000564 <HAL_ADC_Init+0x140>
 80005fe:	bf00      	nop
 8000600:	50000100 	.word	0x50000100
 8000604:	50000300 	.word	0x50000300
 8000608:	fff0c007 	.word	0xfff0c007
 800060c:	20000044 	.word	0x20000044
 8000610:	000f4240 	.word	0x000f4240

08000614 <HAL_ADC_Start_DMA>:
{
 8000614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000618:	6803      	ldr	r3, [r0, #0]
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	f013 0304 	ands.w	r3, r3, #4
{
 8000620:	4604      	mov	r4, r0
 8000622:	460f      	mov	r7, r1
 8000624:	4690      	mov	r8, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000626:	d171      	bne.n	800070c <HAL_ADC_Start_DMA+0xf8>
    __HAL_LOCK(hadc);
 8000628:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800062c:	2a01      	cmp	r2, #1
 800062e:	d06d      	beq.n	800070c <HAL_ADC_Start_DMA+0xf8>
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000630:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8000720 <HAL_ADC_Start_DMA+0x10c>
 8000634:	f8d9 5008 	ldr.w	r5, [r9, #8]
    __HAL_LOCK(hadc);
 8000638:	2601      	movs	r6, #1
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800063a:	f015 051f 	ands.w	r5, r5, #31
    __HAL_LOCK(hadc);
 800063e:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000642:	d160      	bne.n	8000706 <HAL_ADC_Start_DMA+0xf2>
      tmp_hal_status = ADC_Enable(hadc);
 8000644:	f7ff fe90 	bl	8000368 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8000648:	4606      	mov	r6, r0
 800064a:	2800      	cmp	r0, #0
 800064c:	d158      	bne.n	8000700 <HAL_ADC_Start_DMA+0xec>
        ADC_STATE_CLR_SET(hadc->State,
 800064e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8000650:	6821      	ldr	r1, [r4, #0]
 8000652:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
 8000656:	f020 0001 	bic.w	r0, r0, #1
 800065a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800065e:	6460      	str	r0, [r4, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000660:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8000664:	f013 0f1f 	tst.w	r3, #31
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000668:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800066a:	d002      	beq.n	8000672 <HAL_ADC_Start_DMA+0x5e>
 800066c:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8000670:	d134      	bne.n	80006dc <HAL_ADC_Start_DMA+0xc8>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000672:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000676:	6463      	str	r3, [r4, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000678:	68cb      	ldr	r3, [r1, #12]
 800067a:	019a      	lsls	r2, r3, #6
 800067c:	d505      	bpl.n	800068a <HAL_ADC_Start_DMA+0x76>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800067e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000680:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000684:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000688:	6463      	str	r3, [r4, #68]	; 0x44
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800068a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800068c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800068e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000692:	bf1c      	itt	ne
 8000694:	6ca3      	ldrne	r3, [r4, #72]	; 0x48
 8000696:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 800069a:	64a3      	str	r3, [r4, #72]	; 0x48
        __HAL_UNLOCK(hadc);
 800069c:	2300      	movs	r3, #0
 800069e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80006a2:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <HAL_ADC_Start_DMA+0xfc>)
 80006a4:	6283      	str	r3, [r0, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80006a6:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <HAL_ADC_Start_DMA+0x100>)
 80006a8:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80006aa:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <HAL_ADC_Start_DMA+0x104>)
 80006ac:	6303      	str	r3, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80006ae:	231c      	movs	r3, #28
 80006b0:	600b      	str	r3, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80006b2:	684b      	ldr	r3, [r1, #4]
 80006b4:	f043 0310 	orr.w	r3, r3, #16
 80006b8:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80006ba:	68cb      	ldr	r3, [r1, #12]
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	60cb      	str	r3, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80006c2:	463a      	mov	r2, r7
 80006c4:	4643      	mov	r3, r8
 80006c6:	3140      	adds	r1, #64	; 0x40
 80006c8:	f000 faca 	bl	8000c60 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80006cc:	6822      	ldr	r2, [r4, #0]
 80006ce:	6893      	ldr	r3, [r2, #8]
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	6093      	str	r3, [r2, #8]
}
 80006d6:	4630      	mov	r0, r6
 80006d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80006dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006e0:	6463      	str	r3, [r4, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <HAL_ADC_Start_DMA+0x108>)
 80006e4:	4299      	cmp	r1, r3
 80006e6:	d1d0      	bne.n	800068a <HAL_ADC_Start_DMA+0x76>
 80006e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80006ec:	68db      	ldr	r3, [r3, #12]
 80006ee:	019b      	lsls	r3, r3, #6
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80006f0:	bf41      	itttt	mi
 80006f2:	6c60      	ldrmi	r0, [r4, #68]	; 0x44
 80006f4:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80006f8:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80006fc:	6460      	strmi	r0, [r4, #68]	; 0x44
 80006fe:	e7c4      	b.n	800068a <HAL_ADC_Start_DMA+0x76>
        __HAL_UNLOCK(hadc);
 8000700:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
 8000704:	e7e7      	b.n	80006d6 <HAL_ADC_Start_DMA+0xc2>
      __HAL_UNLOCK(hadc);
 8000706:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800070a:	e7e4      	b.n	80006d6 <HAL_ADC_Start_DMA+0xc2>
    tmp_hal_status = HAL_BUSY;
 800070c:	2602      	movs	r6, #2
 800070e:	e7e2      	b.n	80006d6 <HAL_ADC_Start_DMA+0xc2>
 8000710:	080003e1 	.word	0x080003e1
 8000714:	080003db 	.word	0x080003db
 8000718:	080003c5 	.word	0x080003c5
 800071c:	50000100 	.word	0x50000100
 8000720:	50000300 	.word	0x50000300

08000724 <HAL_ADC_ConfigChannel>:
{
 8000724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000726:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000728:	2300      	movs	r3, #0
 800072a:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hadc);
 800072c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000730:	2b01      	cmp	r3, #1
{
 8000732:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8000734:	f000 8151 	beq.w	80009da <HAL_ADC_ConfigChannel+0x2b6>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000738:	682b      	ldr	r3, [r5, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800073a:	68ce      	ldr	r6, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800073c:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 800073e:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000740:	0754      	lsls	r4, r2, #29
  __HAL_LOCK(hadc);
 8000742:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000746:	f100 8143 	bmi.w	80009d0 <HAL_ADC_ConfigChannel+0x2ac>
    if (sConfig->Rank < 5U)
 800074a:	6848      	ldr	r0, [r1, #4]
 800074c:	680c      	ldr	r4, [r1, #0]
 800074e:	2804      	cmp	r0, #4
 8000750:	f04f 0206 	mov.w	r2, #6
 8000754:	d831      	bhi.n	80007ba <HAL_ADC_ConfigChannel+0x96>
      MODIFY_REG(hadc->Instance->SQR1,
 8000756:	4342      	muls	r2, r0
 8000758:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 800075a:	201f      	movs	r0, #31
 800075c:	4090      	lsls	r0, r2
 800075e:	ea27 0000 	bic.w	r0, r7, r0
 8000762:	fa04 f202 	lsl.w	r2, r4, r2
 8000766:	4302      	orrs	r2, r0
 8000768:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800076a:	689a      	ldr	r2, [r3, #8]
 800076c:	f012 0f0c 	tst.w	r2, #12
 8000770:	d162      	bne.n	8000838 <HAL_ADC_ConfigChannel+0x114>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000772:	2c09      	cmp	r4, #9
 8000774:	ea4f 0244 	mov.w	r2, r4, lsl #1
 8000778:	688f      	ldr	r7, [r1, #8]
 800077a:	d946      	bls.n	800080a <HAL_ADC_ConfigChannel+0xe6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800077c:	4422      	add	r2, r4
 800077e:	6998      	ldr	r0, [r3, #24]
 8000780:	3a1e      	subs	r2, #30
 8000782:	f04f 0e07 	mov.w	lr, #7
 8000786:	fa0e fe02 	lsl.w	lr, lr, r2
 800078a:	ea20 000e 	bic.w	r0, r0, lr
 800078e:	fa07 f202 	lsl.w	r2, r7, r2
 8000792:	4302      	orrs	r2, r0
 8000794:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000796:	68da      	ldr	r2, [r3, #12]
 8000798:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 800079c:	694a      	ldr	r2, [r1, #20]
 800079e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 80007a2:	fa02 fe0e 	lsl.w	lr, r2, lr
    switch (sConfig->OffsetNumber)
 80007a6:	690a      	ldr	r2, [r1, #16]
 80007a8:	3a01      	subs	r2, #1
 80007aa:	ea4f 6c84 	mov.w	ip, r4, lsl #26
 80007ae:	2a03      	cmp	r2, #3
 80007b0:	d873      	bhi.n	800089a <HAL_ADC_ConfigChannel+0x176>
 80007b2:	e8df f002 	tbb	[pc, r2]
 80007b6:	5137      	.short	0x5137
 80007b8:	675c      	.short	0x675c
    else if (sConfig->Rank < 10U)
 80007ba:	2809      	cmp	r0, #9
 80007bc:	d80b      	bhi.n	80007d6 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 80007be:	4342      	muls	r2, r0
 80007c0:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 80007c2:	3a1e      	subs	r2, #30
 80007c4:	201f      	movs	r0, #31
 80007c6:	4090      	lsls	r0, r2
 80007c8:	ea27 0000 	bic.w	r0, r7, r0
 80007cc:	fa04 f202 	lsl.w	r2, r4, r2
 80007d0:	4302      	orrs	r2, r0
 80007d2:	635a      	str	r2, [r3, #52]	; 0x34
 80007d4:	e7c9      	b.n	800076a <HAL_ADC_ConfigChannel+0x46>
    else if (sConfig->Rank < 15U)
 80007d6:	280e      	cmp	r0, #14
 80007d8:	d80b      	bhi.n	80007f2 <HAL_ADC_ConfigChannel+0xce>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80007da:	4342      	muls	r2, r0
 80007dc:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80007de:	3a3c      	subs	r2, #60	; 0x3c
 80007e0:	201f      	movs	r0, #31
 80007e2:	4090      	lsls	r0, r2
 80007e4:	ea27 0000 	bic.w	r0, r7, r0
 80007e8:	fa04 f202 	lsl.w	r2, r4, r2
 80007ec:	4302      	orrs	r2, r0
 80007ee:	639a      	str	r2, [r3, #56]	; 0x38
 80007f0:	e7bb      	b.n	800076a <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80007f2:	4342      	muls	r2, r0
 80007f4:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 80007f6:	3a5a      	subs	r2, #90	; 0x5a
 80007f8:	201f      	movs	r0, #31
 80007fa:	4090      	lsls	r0, r2
 80007fc:	ea27 0000 	bic.w	r0, r7, r0
 8000800:	fa04 f202 	lsl.w	r2, r4, r2
 8000804:	4302      	orrs	r2, r0
 8000806:	63da      	str	r2, [r3, #60]	; 0x3c
 8000808:	e7af      	b.n	800076a <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800080a:	6958      	ldr	r0, [r3, #20]
 800080c:	4422      	add	r2, r4
 800080e:	f04f 0e07 	mov.w	lr, #7
 8000812:	fa0e fe02 	lsl.w	lr, lr, r2
 8000816:	ea20 000e 	bic.w	r0, r0, lr
 800081a:	fa07 f202 	lsl.w	r2, r7, r2
 800081e:	4302      	orrs	r2, r0
 8000820:	615a      	str	r2, [r3, #20]
 8000822:	e7b8      	b.n	8000796 <HAL_ADC_ConfigChannel+0x72>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000824:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000826:	4f7a      	ldr	r7, [pc, #488]	; (8000a10 <HAL_ADC_ConfigChannel+0x2ec>)
 8000828:	4017      	ands	r7, r2
 800082a:	ea47 020c 	orr.w	r2, r7, ip
 800082e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000832:	ea42 020e 	orr.w	r2, r2, lr
 8000836:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000838:	689a      	ldr	r2, [r3, #8]
 800083a:	f002 0203 	and.w	r2, r2, #3
 800083e:	2a01      	cmp	r2, #1
 8000840:	f040 80cd 	bne.w	80009de <HAL_ADC_ConfigChannel+0x2ba>
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	07d0      	lsls	r0, r2, #31
 8000848:	f140 80c9 	bpl.w	80009de <HAL_ADC_ConfigChannel+0x2ba>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800084c:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800084e:	2300      	movs	r3, #0
 8000850:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
 8000854:	b017      	add	sp, #92	; 0x5c
 8000856:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000858:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800085a:	4f6d      	ldr	r7, [pc, #436]	; (8000a10 <HAL_ADC_ConfigChannel+0x2ec>)
 800085c:	4017      	ands	r7, r2
 800085e:	ea47 020c 	orr.w	r2, r7, ip
 8000862:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000866:	ea42 020e 	orr.w	r2, r2, lr
 800086a:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800086c:	e7e4      	b.n	8000838 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR3               ,
 800086e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000870:	4867      	ldr	r0, [pc, #412]	; (8000a10 <HAL_ADC_ConfigChannel+0x2ec>)
 8000872:	4010      	ands	r0, r2
 8000874:	ea40 020c 	orr.w	r2, r0, ip
 8000878:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800087c:	ea42 020e 	orr.w	r2, r2, lr
 8000880:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8000882:	e7d9      	b.n	8000838 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000884:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8000886:	4a62      	ldr	r2, [pc, #392]	; (8000a10 <HAL_ADC_ConfigChannel+0x2ec>)
 8000888:	4002      	ands	r2, r0
 800088a:	ea42 020c 	orr.w	r2, r2, ip
 800088e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000892:	ea42 020e 	orr.w	r2, r2, lr
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000896:	66da      	str	r2, [r3, #108]	; 0x6c
 8000898:	e7ce      	b.n	8000838 <HAL_ADC_ConfigChannel+0x114>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800089a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800089c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80008a0:	4562      	cmp	r2, ip
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80008a2:	bf02      	ittt	eq
 80008a4:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 80008a6:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80008aa:	661a      	streq	r2, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80008ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80008ae:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80008b2:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80008b4:	bf02      	ittt	eq
 80008b6:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 80008b8:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80008bc:	665a      	streq	r2, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80008be:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80008c0:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80008c4:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80008c6:	bf02      	ittt	eq
 80008c8:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 80008ca:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80008ce:	669a      	streq	r2, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80008d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80008d2:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80008d6:	4594      	cmp	ip, r2
 80008d8:	d1ae      	bne.n	8000838 <HAL_ADC_ConfigChannel+0x114>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80008da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80008dc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80008e0:	e7d9      	b.n	8000896 <HAL_ADC_ConfigChannel+0x172>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80008e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80008e6:	2101      	movs	r1, #1
 80008e8:	40a1      	lsls	r1, r4
 80008ea:	ea22 0201 	bic.w	r2, r2, r1
 80008ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80008f2:	2c10      	cmp	r4, #16
 80008f4:	d143      	bne.n	800097e <HAL_ADC_ConfigChannel+0x25a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80008f6:	4a47      	ldr	r2, [pc, #284]	; (8000a14 <HAL_ADC_ConfigChannel+0x2f0>)
 80008f8:	6892      	ldr	r2, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80008fa:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80008fe:	d1a5      	bne.n	800084c <HAL_ADC_ConfigChannel+0x128>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000900:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000904:	bf0c      	ite	eq
 8000906:	4a44      	ldreq	r2, [pc, #272]	; (8000a18 <HAL_ADC_ConfigChannel+0x2f4>)
 8000908:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 800090c:	9201      	str	r2, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800090e:	689a      	ldr	r2, [r3, #8]
 8000910:	f002 0203 	and.w	r2, r2, #3
 8000914:	2a01      	cmp	r2, #1
 8000916:	d102      	bne.n	800091e <HAL_ADC_ConfigChannel+0x1fa>
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	07d1      	lsls	r1, r2, #31
 800091c:	d452      	bmi.n	80009c4 <HAL_ADC_ConfigChannel+0x2a0>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800091e:	9a01      	ldr	r2, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000920:	b13a      	cbz	r2, 8000932 <HAL_ADC_ConfigChannel+0x20e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000922:	6891      	ldr	r1, [r2, #8]
 8000924:	f001 0103 	and.w	r1, r1, #3
 8000928:	2901      	cmp	r1, #1
 800092a:	d102      	bne.n	8000932 <HAL_ADC_ConfigChannel+0x20e>
 800092c:	6812      	ldr	r2, [r2, #0]
 800092e:	07d2      	lsls	r2, r2, #31
 8000930:	d448      	bmi.n	80009c4 <HAL_ADC_ConfigChannel+0x2a0>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000932:	2c10      	cmp	r4, #16
 8000934:	d132      	bne.n	800099c <HAL_ADC_ConfigChannel+0x278>
 8000936:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800093a:	d187      	bne.n	800084c <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800093c:	4a35      	ldr	r2, [pc, #212]	; (8000a14 <HAL_ADC_ConfigChannel+0x2f0>)
 800093e:	6893      	ldr	r3, [r2, #8]
 8000940:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000944:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000946:	4b35      	ldr	r3, [pc, #212]	; (8000a1c <HAL_ADC_ConfigChannel+0x2f8>)
 8000948:	4a35      	ldr	r2, [pc, #212]	; (8000a20 <HAL_ADC_ConfigChannel+0x2fc>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	fbb3 f2f2 	udiv	r2, r3, r2
 8000950:	230a      	movs	r3, #10
 8000952:	4353      	muls	r3, r2
            wait_loop_index--;
 8000954:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 8000956:	9b00      	ldr	r3, [sp, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	f43f af77 	beq.w	800084c <HAL_ADC_ConfigChannel+0x128>
            wait_loop_index--;
 800095e:	9b00      	ldr	r3, [sp, #0]
 8000960:	3b01      	subs	r3, #1
 8000962:	e7f7      	b.n	8000954 <HAL_ADC_ConfigChannel+0x230>
        MODIFY_REG(hadc->Instance->SMPR1,
 8000964:	1c60      	adds	r0, r4, #1
 8000966:	6959      	ldr	r1, [r3, #20]
 8000968:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800096c:	2207      	movs	r2, #7
 800096e:	4082      	lsls	r2, r0
 8000970:	ea21 0102 	bic.w	r1, r1, r2
 8000974:	fa06 f200 	lsl.w	r2, r6, r0
 8000978:	430a      	orrs	r2, r1
 800097a:	615a      	str	r2, [r3, #20]
 800097c:	e7b9      	b.n	80008f2 <HAL_ADC_ConfigChannel+0x1ce>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800097e:	2c11      	cmp	r4, #17
 8000980:	d104      	bne.n	800098c <HAL_ADC_ConfigChannel+0x268>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000982:	4a24      	ldr	r2, [pc, #144]	; (8000a14 <HAL_ADC_ConfigChannel+0x2f0>)
 8000984:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000986:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 800098a:	e7b8      	b.n	80008fe <HAL_ADC_ConfigChannel+0x1da>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800098c:	2c12      	cmp	r4, #18
 800098e:	f47f af5d 	bne.w	800084c <HAL_ADC_ConfigChannel+0x128>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000992:	4a20      	ldr	r2, [pc, #128]	; (8000a14 <HAL_ADC_ConfigChannel+0x2f0>)
 8000994:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000996:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 800099a:	e7b0      	b.n	80008fe <HAL_ADC_ConfigChannel+0x1da>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800099c:	2c11      	cmp	r4, #17
 800099e:	d109      	bne.n	80009b4 <HAL_ADC_ConfigChannel+0x290>
 80009a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009a4:	f47f af52 	bne.w	800084c <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80009a8:	4a1a      	ldr	r2, [pc, #104]	; (8000a14 <HAL_ADC_ConfigChannel+0x2f0>)
 80009aa:	6893      	ldr	r3, [r2, #8]
 80009ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80009b0:	6093      	str	r3, [r2, #8]
 80009b2:	e74b      	b.n	800084c <HAL_ADC_ConfigChannel+0x128>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80009b4:	2c12      	cmp	r4, #18
 80009b6:	f47f af49 	bne.w	800084c <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80009ba:	4a16      	ldr	r2, [pc, #88]	; (8000a14 <HAL_ADC_ConfigChannel+0x2f0>)
 80009bc:	6893      	ldr	r3, [r2, #8]
 80009be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009c2:	e7f5      	b.n	80009b0 <HAL_ADC_ConfigChannel+0x28c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009c4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80009c6:	f043 0320 	orr.w	r3, r3, #32
 80009ca:	646b      	str	r3, [r5, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 80009cc:	2001      	movs	r0, #1
 80009ce:	e73e      	b.n	800084e <HAL_ADC_ConfigChannel+0x12a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009d0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80009d2:	f043 0320 	orr.w	r3, r3, #32
 80009d6:	646b      	str	r3, [r5, #68]	; 0x44
 80009d8:	e739      	b.n	800084e <HAL_ADC_ConfigChannel+0x12a>
  __HAL_LOCK(hadc);
 80009da:	2002      	movs	r0, #2
 80009dc:	e73a      	b.n	8000854 <HAL_ADC_ConfigChannel+0x130>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80009de:	2e01      	cmp	r6, #1
 80009e0:	f47f af7f 	bne.w	80008e2 <HAL_ADC_ConfigChannel+0x1be>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80009e4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80009e8:	40a6      	lsls	r6, r4
 80009ea:	4316      	orrs	r6, r2
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80009ec:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80009ee:	f8c3 60b0 	str.w	r6, [r3, #176]	; 0xb0
 80009f2:	688e      	ldr	r6, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80009f4:	d9b6      	bls.n	8000964 <HAL_ADC_ConfigChannel+0x240>
        MODIFY_REG(hadc->Instance->SMPR2,
 80009f6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80009fa:	6999      	ldr	r1, [r3, #24]
 80009fc:	3a1b      	subs	r2, #27
 80009fe:	2007      	movs	r0, #7
 8000a00:	4090      	lsls	r0, r2
 8000a02:	ea21 0100 	bic.w	r1, r1, r0
 8000a06:	fa06 f202 	lsl.w	r2, r6, r2
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	619a      	str	r2, [r3, #24]
 8000a0e:	e770      	b.n	80008f2 <HAL_ADC_ConfigChannel+0x1ce>
 8000a10:	83fff000 	.word	0x83fff000
 8000a14:	50000300 	.word	0x50000300
 8000a18:	50000100 	.word	0x50000100
 8000a1c:	20000044 	.word	0x20000044
 8000a20:	000f4240 	.word	0x000f4240

08000a24 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8000a24:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8000a26:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8000a2a:	2a01      	cmp	r2, #1
{
 8000a2c:	b097      	sub	sp, #92	; 0x5c
 8000a2e:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8000a30:	d04f      	beq.n	8000ad2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8000a32:	2001      	movs	r0, #1
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000a34:	680a      	ldr	r2, [r1, #0]
  __HAL_LOCK(hadc);
 8000a36:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000a3a:	6818      	ldr	r0, [r3, #0]
 8000a3c:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8000a40:	bf0c      	ite	eq
 8000a42:	4c2e      	ldreq	r4, [pc, #184]	; (8000afc <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 8000a44:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
 8000a48:	9401      	str	r4, [sp, #4]
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000a4a:	6884      	ldr	r4, [r0, #8]
 8000a4c:	0767      	lsls	r7, r4, #29
 8000a4e:	d436      	bmi.n	8000abe <HAL_ADCEx_MultiModeConfigChannel+0x9a>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000a50:	9c01      	ldr	r4, [sp, #4]
 8000a52:	68a5      	ldr	r5, [r4, #8]
 8000a54:	076e      	lsls	r6, r5, #29
 8000a56:	d432      	bmi.n	8000abe <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8000a58:	4e29      	ldr	r6, [pc, #164]	; (8000b00 <HAL_ADCEx_MultiModeConfigChannel+0xdc>)
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000a5a:	b1a2      	cbz	r2, 8000a86 <HAL_ADCEx_MultiModeConfigChannel+0x62>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000a5c:	684d      	ldr	r5, [r1, #4]
 8000a5e:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8000a62:	462f      	mov	r7, r5
 8000a64:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8000a66:	ea47 3545 	orr.w	r5, r7, r5, lsl #13
 8000a6a:	f42e 4760 	bic.w	r7, lr, #57344	; 0xe000
 8000a6e:	433d      	orrs	r5, r7
 8000a70:	60b5      	str	r5, [r6, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000a72:	6885      	ldr	r5, [r0, #8]
 8000a74:	f005 0503 	and.w	r5, r5, #3
 8000a78:	2d01      	cmp	r5, #1
 8000a7a:	d12c      	bne.n	8000ad6 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
 8000a7c:	6800      	ldr	r0, [r0, #0]
 8000a7e:	07c5      	lsls	r5, r0, #31
 8000a80:	d529      	bpl.n	8000ad6 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a82:	2000      	movs	r0, #0
 8000a84:	e020      	b.n	8000ac8 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8000a86:	68b2      	ldr	r2, [r6, #8]
 8000a88:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000a8c:	60b2      	str	r2, [r6, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000a8e:	6882      	ldr	r2, [r0, #8]
 8000a90:	f002 0203 	and.w	r2, r2, #3
 8000a94:	2a01      	cmp	r2, #1
 8000a96:	d102      	bne.n	8000a9e <HAL_ADCEx_MultiModeConfigChannel+0x7a>
 8000a98:	6802      	ldr	r2, [r0, #0]
 8000a9a:	07d1      	lsls	r1, r2, #31
 8000a9c:	d4f1      	bmi.n	8000a82 <HAL_ADCEx_MultiModeConfigChannel+0x5e>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000a9e:	68a2      	ldr	r2, [r4, #8]
 8000aa0:	f002 0203 	and.w	r2, r2, #3
 8000aa4:	2a01      	cmp	r2, #1
 8000aa6:	d102      	bne.n	8000aae <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8000aa8:	6822      	ldr	r2, [r4, #0]
 8000aaa:	07d2      	lsls	r2, r2, #31
 8000aac:	d4e9      	bmi.n	8000a82 <HAL_ADCEx_MultiModeConfigChannel+0x5e>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8000aae:	4914      	ldr	r1, [pc, #80]	; (8000b00 <HAL_ADCEx_MultiModeConfigChannel+0xdc>)
 8000ab0:	688a      	ldr	r2, [r1, #8]
 8000ab2:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000ab6:	f022 020f 	bic.w	r2, r2, #15
 8000aba:	608a      	str	r2, [r1, #8]
 8000abc:	e7e1      	b.n	8000a82 <HAL_ADCEx_MultiModeConfigChannel+0x5e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000abe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ac0:	f042 0220 	orr.w	r2, r2, #32
 8000ac4:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000ac6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
} 
 8000ace:	b017      	add	sp, #92	; 0x5c
 8000ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 8000ad2:	2002      	movs	r0, #2
 8000ad4:	e7fb      	b.n	8000ace <HAL_ADCEx_MultiModeConfigChannel+0xaa>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000ad6:	68a0      	ldr	r0, [r4, #8]
 8000ad8:	f000 0003 	and.w	r0, r0, #3
 8000adc:	2801      	cmp	r0, #1
 8000ade:	d102      	bne.n	8000ae6 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8000ae0:	6820      	ldr	r0, [r4, #0]
 8000ae2:	07c0      	lsls	r0, r0, #31
 8000ae4:	d4cd      	bmi.n	8000a82 <HAL_ADCEx_MultiModeConfigChannel+0x5e>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000ae6:	4c06      	ldr	r4, [pc, #24]	; (8000b00 <HAL_ADCEx_MultiModeConfigChannel+0xdc>)
 8000ae8:	6889      	ldr	r1, [r1, #8]
 8000aea:	68a0      	ldr	r0, [r4, #8]
 8000aec:	430a      	orrs	r2, r1
 8000aee:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 8000af2:	f021 010f 	bic.w	r1, r1, #15
 8000af6:	430a      	orrs	r2, r1
 8000af8:	60a2      	str	r2, [r4, #8]
 8000afa:	e7c2      	b.n	8000a82 <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 8000afc:	50000100 	.word	0x50000100
 8000b00:	50000300 	.word	0x50000300

08000b04 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b04:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b06:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b08:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b0c:	041b      	lsls	r3, r3, #16
 8000b0e:	0c1b      	lsrs	r3, r3, #16
 8000b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b14:	0200      	lsls	r0, r0, #8
 8000b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000b1e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b20:	60d3      	str	r3, [r2, #12]
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b28:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2a:	b530      	push	{r4, r5, lr}
 8000b2c:	68dc      	ldr	r4, [r3, #12]
 8000b2e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b32:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b36:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b38:	2b04      	cmp	r3, #4
 8000b3a:	bf28      	it	cs
 8000b3c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	f04f 0501 	mov.w	r5, #1
 8000b44:	fa05 f303 	lsl.w	r3, r5, r3
 8000b48:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4c:	bf8c      	ite	hi
 8000b4e:	3c03      	subhi	r4, #3
 8000b50:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b52:	4019      	ands	r1, r3
 8000b54:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b56:	fa05 f404 	lsl.w	r4, r5, r4
 8000b5a:	3c01      	subs	r4, #1
 8000b5c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000b5e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b60:	ea42 0201 	orr.w	r2, r2, r1
 8000b64:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b68:	bfaf      	iteee	ge
 8000b6a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6e:	f000 000f 	andlt.w	r0, r0, #15
 8000b72:	4b06      	ldrlt	r3, [pc, #24]	; (8000b8c <HAL_NVIC_SetPriority+0x64>)
 8000b74:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b76:	bfa5      	ittet	ge
 8000b78:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000b7c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b80:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000b84:	bd30      	pop	{r4, r5, pc}
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00
 8000b8c:	e000ed14 	.word	0xe000ed14

08000b90 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b90:	0942      	lsrs	r2, r0, #5
 8000b92:	2301      	movs	r3, #1
 8000b94:	f000 001f 	and.w	r0, r0, #31
 8000b98:	fa03 f000 	lsl.w	r0, r3, r0
 8000b9c:	4b01      	ldr	r3, [pc, #4]	; (8000ba4 <HAL_NVIC_EnableIRQ+0x14>)
 8000b9e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000ba2:	4770      	bx	lr
 8000ba4:	e000e100 	.word	0xe000e100

08000ba8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba8:	3801      	subs	r0, #1
 8000baa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bae:	d20a      	bcs.n	8000bc6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb2:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	21f0      	movs	r1, #240	; 0xf0
 8000bb8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bbc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bbe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000bc6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000e010 	.word	0xe000e010
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000bd6:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000bd8:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000bda:	bf0c      	ite	eq
 8000bdc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000be0:	f022 0204 	bicne.w	r2, r2, #4
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	4770      	bx	lr
 8000be8:	e000e010 	.word	0xe000e010

08000bec <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000bec:	4770      	bx	lr

08000bee <HAL_SYSTICK_IRQHandler>:
{
 8000bee:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000bf0:	f7ff fffc 	bl	8000bec <HAL_SYSTICK_Callback>
 8000bf4:	bd08      	pop	{r3, pc}
	...

08000bf8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000bf8:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000bfa:	b350      	cbz	r0, 8000c52 <HAL_DMA_Init+0x5a>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bfc:	6884      	ldr	r4, [r0, #8]
 8000bfe:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 8000c00:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 8000c02:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c04:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 8000c06:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c08:	4323      	orrs	r3, r4
 8000c0a:	6904      	ldr	r4, [r0, #16]
 8000c0c:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c0e:	6944      	ldr	r4, [r0, #20]
 8000c10:	4323      	orrs	r3, r4
 8000c12:	6984      	ldr	r4, [r0, #24]
 8000c14:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c16:	69c4      	ldr	r4, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c18:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8000c1c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c20:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000c22:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000c24:	600b      	str	r3, [r1, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <HAL_DMA_Init+0x60>)
 8000c28:	2214      	movs	r2, #20
 8000c2a:	440b      	add	r3, r1
 8000c2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_DMA_Init+0x64>)
 8000c36:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8000c38:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	6283      	str	r3, [r0, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000c3e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000c40:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000c42:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c44:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000c46:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8000c4a:	f880 3020 	strb.w	r3, [r0, #32]
  return HAL_OK;
 8000c4e:	4618      	mov	r0, r3
 8000c50:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c52:	2001      	movs	r0, #1
}  
 8000c54:	bd10      	pop	{r4, pc}
 8000c56:	bf00      	nop
 8000c58:	bffdfff8 	.word	0xbffdfff8
 8000c5c:	40020000 	.word	0x40020000

08000c60 <HAL_DMA_Start_IT>:
{
 8000c60:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8000c62:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000c66:	2c01      	cmp	r4, #1
 8000c68:	d035      	beq.n	8000cd6 <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c6a:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000c6e:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c70:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8000c72:	f880 4020 	strb.w	r4, [r0, #32]
 8000c76:	f04f 0600 	mov.w	r6, #0
 8000c7a:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c7e:	d128      	bne.n	8000cd2 <HAL_DMA_Start_IT+0x72>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000c80:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c84:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c86:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c88:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c8a:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c8c:	f026 0601 	bic.w	r6, r6, #1
 8000c90:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c92:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000c94:	40bd      	lsls	r5, r7
 8000c96:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8000c98:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000c9a:	6843      	ldr	r3, [r0, #4]
 8000c9c:	6805      	ldr	r5, [r0, #0]
 8000c9e:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8000ca0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8000ca2:	bf0b      	itete	eq
 8000ca4:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8000ca6:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000ca8:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8000caa:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000cac:	b14b      	cbz	r3, 8000cc2 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cae:	6823      	ldr	r3, [r4, #0]
 8000cb0:	f043 030e 	orr.w	r3, r3, #14
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000cb4:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000cb6:	682b      	ldr	r3, [r5, #0]
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	602b      	str	r3, [r5, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000cc2:	6823      	ldr	r3, [r4, #0]
 8000cc4:	f043 030a 	orr.w	r3, r3, #10
 8000cc8:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000cca:	6823      	ldr	r3, [r4, #0]
 8000ccc:	f023 0304 	bic.w	r3, r3, #4
 8000cd0:	e7f0      	b.n	8000cb4 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8000cd2:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8000cd6:	2002      	movs	r0, #2
} 
 8000cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000cda <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cda:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8000cde:	2a02      	cmp	r2, #2
{  
 8000ce0:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ce2:	d003      	beq.n	8000cec <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ce4:	2204      	movs	r2, #4
 8000ce6:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000ce8:	2001      	movs	r0, #1
 8000cea:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cec:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000cee:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cf0:	6811      	ldr	r1, [r2, #0]
    if(hdma->XferAbortCallback != NULL)
 8000cf2:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cf4:	f021 010e 	bic.w	r1, r1, #14
 8000cf8:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cfa:	6811      	ldr	r1, [r2, #0]
 8000cfc:	f021 0101 	bic.w	r1, r1, #1
 8000d00:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d02:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000d04:	2101      	movs	r1, #1
 8000d06:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0a:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8000d0c:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000d0e:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000d12:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000d16:	b113      	cbz	r3, 8000d1e <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 8000d18:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	bd10      	pop	{r4, pc}
 8000d1e:	4618      	mov	r0, r3
}
 8000d20:	bd10      	pop	{r4, pc}

08000d22 <HAL_DMA_IRQHandler>:
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d22:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000d24:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8000d26:	6803      	ldr	r3, [r0, #0]
{
 8000d28:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d2a:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000d2c:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000d2e:	2404      	movs	r4, #4
 8000d30:	4094      	lsls	r4, r2
 8000d32:	4226      	tst	r6, r4
 8000d34:	d00e      	beq.n	8000d54 <HAL_DMA_IRQHandler+0x32>
 8000d36:	f015 0f04 	tst.w	r5, #4
 8000d3a:	d00b      	beq.n	8000d54 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	0692      	lsls	r2, r2, #26
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d40:	bf5e      	ittt	pl
 8000d42:	681a      	ldrpl	r2, [r3, #0]
 8000d44:	f022 0204 	bicpl.w	r2, r2, #4
 8000d48:	601a      	strpl	r2, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000d4a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000d4c:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 8000d4e:	b373      	cbz	r3, 8000dae <HAL_DMA_IRQHandler+0x8c>
}  
 8000d50:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 8000d52:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000d54:	2402      	movs	r4, #2
 8000d56:	4094      	lsls	r4, r2
 8000d58:	4226      	tst	r6, r4
 8000d5a:	d012      	beq.n	8000d82 <HAL_DMA_IRQHandler+0x60>
 8000d5c:	f015 0f02 	tst.w	r5, #2
 8000d60:	d00f      	beq.n	8000d82 <HAL_DMA_IRQHandler+0x60>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	0695      	lsls	r5, r2, #26
 8000d66:	d406      	bmi.n	8000d76 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	f022 020a 	bic.w	r2, r2, #10
 8000d6e:	601a      	str	r2, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000d70:	2301      	movs	r3, #1
 8000d72:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	__HAL_UNLOCK(hdma);
 8000d76:	2300      	movs	r3, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000d78:	604c      	str	r4, [r1, #4]
  	__HAL_UNLOCK(hdma);
 8000d7a:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8000d7e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000d80:	e7e5      	b.n	8000d4e <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d82:	2408      	movs	r4, #8
 8000d84:	4094      	lsls	r4, r2
 8000d86:	4234      	tst	r4, r6
 8000d88:	d011      	beq.n	8000dae <HAL_DMA_IRQHandler+0x8c>
 8000d8a:	072c      	lsls	r4, r5, #28
 8000d8c:	d50f      	bpl.n	8000dae <HAL_DMA_IRQHandler+0x8c>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d8e:	681c      	ldr	r4, [r3, #0]
 8000d90:	f024 040e 	bic.w	r4, r4, #14
 8000d94:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d96:	2301      	movs	r3, #1
 8000d98:	fa03 f202 	lsl.w	r2, r3, r2
 8000d9c:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d9e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000da0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8000da4:	2300      	movs	r3, #0
 8000da6:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8000daa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000dac:	e7cf      	b.n	8000d4e <HAL_DMA_IRQHandler+0x2c>
}  
 8000dae:	bc70      	pop	{r4, r5, r6}
 8000db0:	4770      	bx	lr
	...

08000db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000db8:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000dba:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbc:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8000f24 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dc0:	4a56      	ldr	r2, [pc, #344]	; (8000f1c <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000dc2:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000dc4:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8000dc8:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000dca:	9c01      	ldr	r4, [sp, #4]
 8000dcc:	40dc      	lsrs	r4, r3
 8000dce:	d102      	bne.n	8000dd6 <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8000dd0:	b005      	add	sp, #20
 8000dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000dd6:	2401      	movs	r4, #1
 8000dd8:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000ddc:	9c01      	ldr	r4, [sp, #4]
 8000dde:	ea14 050a 	ands.w	r5, r4, sl
 8000de2:	f000 8093 	beq.w	8000f0c <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000de6:	684c      	ldr	r4, [r1, #4]
 8000de8:	f024 0b10 	bic.w	fp, r4, #16
 8000dec:	f1bb 0f02 	cmp.w	fp, #2
 8000df0:	d111      	bne.n	8000e16 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000df2:	08df      	lsrs	r7, r3, #3
 8000df4:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000df8:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000dfc:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dfe:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000e02:	fa09 fc0e 	lsl.w	ip, r9, lr
 8000e06:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e0a:	690e      	ldr	r6, [r1, #16]
 8000e0c:	fa06 f60e 	lsl.w	r6, r6, lr
 8000e10:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8000e14:	623e      	str	r6, [r7, #32]
 8000e16:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e1a:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000e1c:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e1e:	fa07 f70c 	lsl.w	r7, r7, ip
 8000e22:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e24:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e28:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e2a:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e2e:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e32:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e36:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000e3a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e3c:	d811      	bhi.n	8000e62 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8000e3e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e40:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e44:	68ce      	ldr	r6, [r1, #12]
 8000e46:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000e4a:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000e4e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e50:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e52:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e56:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000e5a:	409e      	lsls	r6, r3
 8000e5c:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000e60:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000e62:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e64:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e66:	688e      	ldr	r6, [r1, #8]
 8000e68:	fa06 f60c 	lsl.w	r6, r6, ip
 8000e6c:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e6e:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000e70:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e72:	d54b      	bpl.n	8000f0c <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e74:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000e78:	f046 0601 	orr.w	r6, r6, #1
 8000e7c:	f8c8 6018 	str.w	r6, [r8, #24]
 8000e80:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000e84:	f023 0703 	bic.w	r7, r3, #3
 8000e88:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000e8c:	f006 0601 	and.w	r6, r6, #1
 8000e90:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000e94:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000e96:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000e9c:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000e9e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000ea2:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ea6:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000eaa:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000eae:	d02f      	beq.n	8000f10 <HAL_GPIO_Init+0x15c>
 8000eb0:	4e1b      	ldr	r6, [pc, #108]	; (8000f20 <HAL_GPIO_Init+0x16c>)
 8000eb2:	42b0      	cmp	r0, r6
 8000eb4:	d02e      	beq.n	8000f14 <HAL_GPIO_Init+0x160>
 8000eb6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000eba:	42b0      	cmp	r0, r6
 8000ebc:	d02c      	beq.n	8000f18 <HAL_GPIO_Init+0x164>
 8000ebe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000ec2:	42b0      	cmp	r0, r6
 8000ec4:	bf14      	ite	ne
 8000ec6:	2605      	movne	r6, #5
 8000ec8:	2603      	moveq	r6, #3
 8000eca:	fa06 f60e 	lsl.w	r6, r6, lr
 8000ece:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ed2:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000ed4:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ed6:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ed8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000edc:	bf0c      	ite	eq
 8000ede:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000ee0:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000ee2:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000ee4:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ee6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000eea:	bf0c      	ite	eq
 8000eec:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000eee:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000ef0:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000ef2:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ef4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000ef8:	bf0c      	ite	eq
 8000efa:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000efc:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000efe:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000f00:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f02:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000f04:	bf54      	ite	pl
 8000f06:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000f08:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8000f0a:	60d6      	str	r6, [r2, #12]
    position++;
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	e75c      	b.n	8000dca <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f10:	2600      	movs	r6, #0
 8000f12:	e7da      	b.n	8000eca <HAL_GPIO_Init+0x116>
 8000f14:	2601      	movs	r6, #1
 8000f16:	e7d8      	b.n	8000eca <HAL_GPIO_Init+0x116>
 8000f18:	2602      	movs	r6, #2
 8000f1a:	e7d6      	b.n	8000eca <HAL_GPIO_Init+0x116>
 8000f1c:	40010400 	.word	0x40010400
 8000f20:	48000400 	.word	0x48000400
 8000f24:	40021000 	.word	0x40021000

08000f28 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f28:	b10a      	cbz	r2, 8000f2e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f2a:	6181      	str	r1, [r0, #24]
 8000f2c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f2e:	6281      	str	r1, [r0, #40]	; 0x28
 8000f30:	4770      	bx	lr

08000f32 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000f32:	6943      	ldr	r3, [r0, #20]
 8000f34:	4059      	eors	r1, r3
 8000f36:	6141      	str	r1, [r0, #20]
 8000f38:	4770      	bx	lr
	...

08000f3c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f3c:	6803      	ldr	r3, [r0, #0]
 8000f3e:	07da      	lsls	r2, r3, #31
{
 8000f40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f44:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f46:	d411      	bmi.n	8000f6c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f48:	682b      	ldr	r3, [r5, #0]
 8000f4a:	079b      	lsls	r3, r3, #30
 8000f4c:	f100 8088 	bmi.w	8001060 <HAL_RCC_OscConfig+0x124>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f50:	682b      	ldr	r3, [r5, #0]
 8000f52:	071c      	lsls	r4, r3, #28
 8000f54:	f100 80f8 	bmi.w	8001148 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f58:	682b      	ldr	r3, [r5, #0]
 8000f5a:	0758      	lsls	r0, r3, #29
 8000f5c:	f100 8141 	bmi.w	80011e2 <HAL_RCC_OscConfig+0x2a6>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f60:	69ea      	ldr	r2, [r5, #28]
 8000f62:	2a00      	cmp	r2, #0
 8000f64:	f040 81d7 	bne.w	8001316 <HAL_RCC_OscConfig+0x3da>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000f68:	2000      	movs	r0, #0
 8000f6a:	e021      	b.n	8000fb0 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f6c:	4cba      	ldr	r4, [pc, #744]	; (8001258 <HAL_RCC_OscConfig+0x31c>)
 8000f6e:	6863      	ldr	r3, [r4, #4]
 8000f70:	f003 030c 	and.w	r3, r3, #12
 8000f74:	2b04      	cmp	r3, #4
 8000f76:	d007      	beq.n	8000f88 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f78:	6863      	ldr	r3, [r4, #4]
 8000f7a:	f003 030c 	and.w	r3, r3, #12
 8000f7e:	2b08      	cmp	r3, #8
 8000f80:	d119      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x7a>
 8000f82:	6863      	ldr	r3, [r4, #4]
 8000f84:	03df      	lsls	r7, r3, #15
 8000f86:	d516      	bpl.n	8000fb6 <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f8c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f90:	6821      	ldr	r1, [r4, #0]
 8000f92:	fa93 f3a3 	rbit	r3, r3
 8000f96:	fab3 f383 	clz	r3, r3
 8000f9a:	f003 031f 	and.w	r3, r3, #31
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	420b      	tst	r3, r1
 8000fa6:	d0cf      	beq.n	8000f48 <HAL_RCC_OscConfig+0xc>
 8000fa8:	686b      	ldr	r3, [r5, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1cc      	bne.n	8000f48 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000fae:	2001      	movs	r0, #1
}
 8000fb0:	b002      	add	sp, #8
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb6:	686a      	ldr	r2, [r5, #4]
 8000fb8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000fbc:	d125      	bne.n	800100a <HAL_RCC_OscConfig+0xce>
 8000fbe:	6823      	ldr	r3, [r4, #0]
 8000fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc4:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000fc8:	68a9      	ldr	r1, [r5, #8]
 8000fca:	f023 030f 	bic.w	r3, r3, #15
 8000fce:	430b      	orrs	r3, r1
 8000fd0:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fd2:	b352      	cbz	r2, 800102a <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 8000fd4:	f7ff f97a 	bl	80002cc <HAL_GetTick>
 8000fd8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000fdc:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fde:	2701      	movs	r7, #1
 8000fe0:	fa96 f3a6 	rbit	r3, r6
 8000fe4:	6822      	ldr	r2, [r4, #0]
 8000fe6:	fa96 f3a6 	rbit	r3, r6
 8000fea:	fab3 f383 	clz	r3, r3
 8000fee:	f003 031f 	and.w	r3, r3, #31
 8000ff2:	fa07 f303 	lsl.w	r3, r7, r3
 8000ff6:	4213      	tst	r3, r2
 8000ff8:	d1a6      	bne.n	8000f48 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ffa:	f7ff f967 	bl	80002cc <HAL_GetTick>
 8000ffe:	eba0 0008 	sub.w	r0, r0, r8
 8001002:	2864      	cmp	r0, #100	; 0x64
 8001004:	d9ec      	bls.n	8000fe0 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8001006:	2003      	movs	r0, #3
 8001008:	e7d2      	b.n	8000fb0 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800100a:	6823      	ldr	r3, [r4, #0]
 800100c:	b932      	cbnz	r2, 800101c <HAL_RCC_OscConfig+0xe0>
 800100e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001012:	6023      	str	r3, [r4, #0]
 8001014:	6823      	ldr	r3, [r4, #0]
 8001016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800101a:	e7d3      	b.n	8000fc4 <HAL_RCC_OscConfig+0x88>
 800101c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001020:	d1f5      	bne.n	800100e <HAL_RCC_OscConfig+0xd2>
 8001022:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001026:	6023      	str	r3, [r4, #0]
 8001028:	e7c9      	b.n	8000fbe <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800102a:	f7ff f94f 	bl	80002cc <HAL_GetTick>
 800102e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001032:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001034:	2701      	movs	r7, #1
 8001036:	fa96 f3a6 	rbit	r3, r6
 800103a:	6822      	ldr	r2, [r4, #0]
 800103c:	fa96 f3a6 	rbit	r3, r6
 8001040:	fab3 f383 	clz	r3, r3
 8001044:	f003 031f 	and.w	r3, r3, #31
 8001048:	fa07 f303 	lsl.w	r3, r7, r3
 800104c:	4213      	tst	r3, r2
 800104e:	f43f af7b 	beq.w	8000f48 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001052:	f7ff f93b 	bl	80002cc <HAL_GetTick>
 8001056:	eba0 0008 	sub.w	r0, r0, r8
 800105a:	2864      	cmp	r0, #100	; 0x64
 800105c:	d9eb      	bls.n	8001036 <HAL_RCC_OscConfig+0xfa>
 800105e:	e7d2      	b.n	8001006 <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001060:	4c7d      	ldr	r4, [pc, #500]	; (8001258 <HAL_RCC_OscConfig+0x31c>)
 8001062:	6863      	ldr	r3, [r4, #4]
 8001064:	f013 0f0c 	tst.w	r3, #12
 8001068:	d007      	beq.n	800107a <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800106a:	6863      	ldr	r3, [r4, #4]
 800106c:	f003 030c 	and.w	r3, r3, #12
 8001070:	2b08      	cmp	r3, #8
 8001072:	d121      	bne.n	80010b8 <HAL_RCC_OscConfig+0x17c>
 8001074:	6863      	ldr	r3, [r4, #4]
 8001076:	03de      	lsls	r6, r3, #15
 8001078:	d41e      	bmi.n	80010b8 <HAL_RCC_OscConfig+0x17c>
 800107a:	2302      	movs	r3, #2
 800107c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001080:	6821      	ldr	r1, [r4, #0]
 8001082:	fa93 f3a3 	rbit	r3, r3
 8001086:	fab3 f383 	clz	r3, r3
 800108a:	f003 031f 	and.w	r3, r3, #31
 800108e:	2201      	movs	r2, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	420b      	tst	r3, r1
 8001096:	d002      	beq.n	800109e <HAL_RCC_OscConfig+0x162>
 8001098:	692b      	ldr	r3, [r5, #16]
 800109a:	4293      	cmp	r3, r2
 800109c:	d187      	bne.n	8000fae <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800109e:	6821      	ldr	r1, [r4, #0]
 80010a0:	23f8      	movs	r3, #248	; 0xf8
 80010a2:	fa93 f3a3 	rbit	r3, r3
 80010a6:	fab3 f283 	clz	r2, r3
 80010aa:	696b      	ldr	r3, [r5, #20]
 80010ac:	4093      	lsls	r3, r2
 80010ae:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80010b2:	4313      	orrs	r3, r2
 80010b4:	6023      	str	r3, [r4, #0]
 80010b6:	e74b      	b.n	8000f50 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010b8:	692a      	ldr	r2, [r5, #16]
 80010ba:	2601      	movs	r6, #1
 80010bc:	b30a      	cbz	r2, 8001102 <HAL_RCC_OscConfig+0x1c6>
 80010be:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80010c2:	fab3 f383 	clz	r3, r3
 80010c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	2702      	movs	r7, #2
 80010d2:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80010d4:	f7ff f8fa 	bl	80002cc <HAL_GetTick>
 80010d8:	4680      	mov	r8, r0
 80010da:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010de:	6822      	ldr	r2, [r4, #0]
 80010e0:	fa97 f3a7 	rbit	r3, r7
 80010e4:	fab3 f383 	clz	r3, r3
 80010e8:	f003 031f 	and.w	r3, r3, #31
 80010ec:	fa06 f303 	lsl.w	r3, r6, r3
 80010f0:	4213      	tst	r3, r2
 80010f2:	d1d4      	bne.n	800109e <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010f4:	f7ff f8ea 	bl	80002cc <HAL_GetTick>
 80010f8:	eba0 0008 	sub.w	r0, r0, r8
 80010fc:	2802      	cmp	r0, #2
 80010fe:	d9ec      	bls.n	80010da <HAL_RCC_OscConfig+0x19e>
 8001100:	e781      	b.n	8001006 <HAL_RCC_OscConfig+0xca>
 8001102:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8001106:	fab3 f383 	clz	r3, r3
 800110a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800110e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	2702      	movs	r7, #2
 8001116:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001118:	f7ff f8d8 	bl	80002cc <HAL_GetTick>
 800111c:	4680      	mov	r8, r0
 800111e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001122:	6822      	ldr	r2, [r4, #0]
 8001124:	fa97 f3a7 	rbit	r3, r7
 8001128:	fab3 f383 	clz	r3, r3
 800112c:	f003 031f 	and.w	r3, r3, #31
 8001130:	fa06 f303 	lsl.w	r3, r6, r3
 8001134:	4213      	tst	r3, r2
 8001136:	f43f af0b 	beq.w	8000f50 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800113a:	f7ff f8c7 	bl	80002cc <HAL_GetTick>
 800113e:	eba0 0008 	sub.w	r0, r0, r8
 8001142:	2802      	cmp	r0, #2
 8001144:	d9eb      	bls.n	800111e <HAL_RCC_OscConfig+0x1e2>
 8001146:	e75e      	b.n	8001006 <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001148:	69aa      	ldr	r2, [r5, #24]
 800114a:	4e43      	ldr	r6, [pc, #268]	; (8001258 <HAL_RCC_OscConfig+0x31c>)
 800114c:	4943      	ldr	r1, [pc, #268]	; (800125c <HAL_RCC_OscConfig+0x320>)
 800114e:	2401      	movs	r4, #1
 8001150:	b31a      	cbz	r2, 800119a <HAL_RCC_OscConfig+0x25e>
 8001152:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8001156:	fab3 f383 	clz	r3, r3
 800115a:	440b      	add	r3, r1
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	2702      	movs	r7, #2
 8001160:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8001162:	f7ff f8b3 	bl	80002cc <HAL_GetTick>
 8001166:	4680      	mov	r8, r0
 8001168:	fa97 f3a7 	rbit	r3, r7
 800116c:	fa97 f3a7 	rbit	r3, r7
 8001170:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001174:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001176:	fa97 f3a7 	rbit	r3, r7
 800117a:	fab3 f383 	clz	r3, r3
 800117e:	f003 031f 	and.w	r3, r3, #31
 8001182:	fa04 f303 	lsl.w	r3, r4, r3
 8001186:	4213      	tst	r3, r2
 8001188:	f47f aee6 	bne.w	8000f58 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800118c:	f7ff f89e 	bl	80002cc <HAL_GetTick>
 8001190:	eba0 0008 	sub.w	r0, r0, r8
 8001194:	2802      	cmp	r0, #2
 8001196:	d9e7      	bls.n	8001168 <HAL_RCC_OscConfig+0x22c>
 8001198:	e735      	b.n	8001006 <HAL_RCC_OscConfig+0xca>
 800119a:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 800119e:	fab3 f383 	clz	r3, r3
 80011a2:	440b      	add	r3, r1
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	2702      	movs	r7, #2
 80011a8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011aa:	f7ff f88f 	bl	80002cc <HAL_GetTick>
 80011ae:	4680      	mov	r8, r0
 80011b0:	fa97 f3a7 	rbit	r3, r7
 80011b4:	fa97 f3a7 	rbit	r3, r7
 80011b8:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011bc:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80011be:	fa97 f3a7 	rbit	r3, r7
 80011c2:	fab3 f383 	clz	r3, r3
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	fa04 f303 	lsl.w	r3, r4, r3
 80011ce:	4213      	tst	r3, r2
 80011d0:	f43f aec2 	beq.w	8000f58 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d4:	f7ff f87a 	bl	80002cc <HAL_GetTick>
 80011d8:	eba0 0008 	sub.w	r0, r0, r8
 80011dc:	2802      	cmp	r0, #2
 80011de:	d9e7      	bls.n	80011b0 <HAL_RCC_OscConfig+0x274>
 80011e0:	e711      	b.n	8001006 <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011e2:	4c1d      	ldr	r4, [pc, #116]	; (8001258 <HAL_RCC_OscConfig+0x31c>)
 80011e4:	69e3      	ldr	r3, [r4, #28]
 80011e6:	00d9      	lsls	r1, r3, #3
 80011e8:	d434      	bmi.n	8001254 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	69e3      	ldr	r3, [r4, #28]
 80011ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f0:	61e3      	str	r3, [r4, #28]
 80011f2:	69e3      	ldr	r3, [r4, #28]
 80011f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f8:	9301      	str	r3, [sp, #4]
 80011fa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80011fc:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011fe:	4f18      	ldr	r7, [pc, #96]	; (8001260 <HAL_RCC_OscConfig+0x324>)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	05da      	lsls	r2, r3, #23
 8001204:	d52e      	bpl.n	8001264 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001206:	68eb      	ldr	r3, [r5, #12]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d13c      	bne.n	8001286 <HAL_RCC_OscConfig+0x34a>
 800120c:	6a23      	ldr	r3, [r4, #32]
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001214:	f7ff f85a 	bl	80002cc <HAL_GetTick>
 8001218:	2702      	movs	r7, #2
 800121a:	4682      	mov	sl, r0
 800121c:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800121e:	f04f 0801 	mov.w	r8, #1
 8001222:	fa97 f3a7 	rbit	r3, r7
 8001226:	fa97 f3a7 	rbit	r3, r7
 800122a:	2b00      	cmp	r3, #0
 800122c:	d06b      	beq.n	8001306 <HAL_RCC_OscConfig+0x3ca>
 800122e:	6a22      	ldr	r2, [r4, #32]
 8001230:	fa99 f3a9 	rbit	r3, r9
 8001234:	fab3 f383 	clz	r3, r3
 8001238:	f003 031f 	and.w	r3, r3, #31
 800123c:	fa08 f303 	lsl.w	r3, r8, r3
 8001240:	4213      	tst	r3, r2
 8001242:	d057      	beq.n	80012f4 <HAL_RCC_OscConfig+0x3b8>
    if(pwrclkchanged == SET)
 8001244:	2e00      	cmp	r6, #0
 8001246:	f43f ae8b 	beq.w	8000f60 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800124a:	69e3      	ldr	r3, [r4, #28]
 800124c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001250:	61e3      	str	r3, [r4, #28]
 8001252:	e685      	b.n	8000f60 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001254:	2600      	movs	r6, #0
 8001256:	e7d2      	b.n	80011fe <HAL_RCC_OscConfig+0x2c2>
 8001258:	40021000 	.word	0x40021000
 800125c:	10908120 	.word	0x10908120
 8001260:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800126c:	f7ff f82e 	bl	80002cc <HAL_GetTick>
 8001270:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	05db      	lsls	r3, r3, #23
 8001276:	d4c6      	bmi.n	8001206 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001278:	f7ff f828 	bl	80002cc <HAL_GetTick>
 800127c:	eba0 0008 	sub.w	r0, r0, r8
 8001280:	2864      	cmp	r0, #100	; 0x64
 8001282:	d9f6      	bls.n	8001272 <HAL_RCC_OscConfig+0x336>
 8001284:	e6bf      	b.n	8001006 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001286:	bb3b      	cbnz	r3, 80012d8 <HAL_RCC_OscConfig+0x39c>
 8001288:	6a23      	ldr	r3, [r4, #32]
 800128a:	f023 0301 	bic.w	r3, r3, #1
 800128e:	6223      	str	r3, [r4, #32]
 8001290:	6a23      	ldr	r3, [r4, #32]
 8001292:	f023 0304 	bic.w	r3, r3, #4
 8001296:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001298:	f7ff f818 	bl	80002cc <HAL_GetTick>
 800129c:	2702      	movs	r7, #2
 800129e:	4682      	mov	sl, r0
 80012a0:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a2:	f04f 0801 	mov.w	r8, #1
 80012a6:	fa97 f3a7 	rbit	r3, r7
 80012aa:	fa97 f3a7 	rbit	r3, r7
 80012ae:	b373      	cbz	r3, 800130e <HAL_RCC_OscConfig+0x3d2>
 80012b0:	6a22      	ldr	r2, [r4, #32]
 80012b2:	fa99 f3a9 	rbit	r3, r9
 80012b6:	fab3 f383 	clz	r3, r3
 80012ba:	f003 031f 	and.w	r3, r3, #31
 80012be:	fa08 f303 	lsl.w	r3, r8, r3
 80012c2:	4213      	tst	r3, r2
 80012c4:	d0be      	beq.n	8001244 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012c6:	f7ff f801 	bl	80002cc <HAL_GetTick>
 80012ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80012ce:	eba0 000a 	sub.w	r0, r0, sl
 80012d2:	4298      	cmp	r0, r3
 80012d4:	d9e7      	bls.n	80012a6 <HAL_RCC_OscConfig+0x36a>
 80012d6:	e696      	b.n	8001006 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d8:	2b05      	cmp	r3, #5
 80012da:	6a23      	ldr	r3, [r4, #32]
 80012dc:	d103      	bne.n	80012e6 <HAL_RCC_OscConfig+0x3aa>
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	6223      	str	r3, [r4, #32]
 80012e4:	e792      	b.n	800120c <HAL_RCC_OscConfig+0x2d0>
 80012e6:	f023 0301 	bic.w	r3, r3, #1
 80012ea:	6223      	str	r3, [r4, #32]
 80012ec:	6a23      	ldr	r3, [r4, #32]
 80012ee:	f023 0304 	bic.w	r3, r3, #4
 80012f2:	e78e      	b.n	8001212 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f4:	f7fe ffea 	bl	80002cc <HAL_GetTick>
 80012f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80012fc:	eba0 000a 	sub.w	r0, r0, sl
 8001300:	4298      	cmp	r0, r3
 8001302:	d98e      	bls.n	8001222 <HAL_RCC_OscConfig+0x2e6>
 8001304:	e67f      	b.n	8001006 <HAL_RCC_OscConfig+0xca>
 8001306:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800130a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800130c:	e790      	b.n	8001230 <HAL_RCC_OscConfig+0x2f4>
 800130e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001312:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001314:	e7cd      	b.n	80012b2 <HAL_RCC_OscConfig+0x376>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001316:	4c41      	ldr	r4, [pc, #260]	; (800141c <HAL_RCC_OscConfig+0x4e0>)
 8001318:	6863      	ldr	r3, [r4, #4]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	2b08      	cmp	r3, #8
 8001320:	f43f ae45 	beq.w	8000fae <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001324:	2a02      	cmp	r2, #2
 8001326:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800132a:	d152      	bne.n	80013d2 <HAL_RCC_OscConfig+0x496>
 800132c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001330:	fab3 f383 	clz	r3, r3
 8001334:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001338:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001342:	f7fe ffc3 	bl	80002cc <HAL_GetTick>
 8001346:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 800134a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800134c:	2601      	movs	r6, #1
 800134e:	fa97 f3a7 	rbit	r3, r7
 8001352:	6822      	ldr	r2, [r4, #0]
 8001354:	fa97 f3a7 	rbit	r3, r7
 8001358:	fab3 f383 	clz	r3, r3
 800135c:	f003 031f 	and.w	r3, r3, #31
 8001360:	fa06 f303 	lsl.w	r3, r6, r3
 8001364:	4213      	tst	r3, r2
 8001366:	d12d      	bne.n	80013c4 <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001368:	6862      	ldr	r2, [r4, #4]
 800136a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800136c:	6a29      	ldr	r1, [r5, #32]
 800136e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001372:	430b      	orrs	r3, r1
 8001374:	4313      	orrs	r3, r2
 8001376:	6063      	str	r3, [r4, #4]
 8001378:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800137c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001380:	fab3 f383 	clz	r3, r3
 8001384:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001388:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001392:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001394:	f7fe ff9a 	bl	80002cc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001398:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 800139a:	4607      	mov	r7, r0
 800139c:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013a0:	6822      	ldr	r2, [r4, #0]
 80013a2:	fa95 f3a5 	rbit	r3, r5
 80013a6:	fab3 f383 	clz	r3, r3
 80013aa:	f003 031f 	and.w	r3, r3, #31
 80013ae:	fa06 f303 	lsl.w	r3, r6, r3
 80013b2:	4213      	tst	r3, r2
 80013b4:	f47f add8 	bne.w	8000f68 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013b8:	f7fe ff88 	bl	80002cc <HAL_GetTick>
 80013bc:	1bc0      	subs	r0, r0, r7
 80013be:	2802      	cmp	r0, #2
 80013c0:	d9ec      	bls.n	800139c <HAL_RCC_OscConfig+0x460>
 80013c2:	e620      	b.n	8001006 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c4:	f7fe ff82 	bl	80002cc <HAL_GetTick>
 80013c8:	eba0 0008 	sub.w	r0, r0, r8
 80013cc:	2802      	cmp	r0, #2
 80013ce:	d9be      	bls.n	800134e <HAL_RCC_OscConfig+0x412>
 80013d0:	e619      	b.n	8001006 <HAL_RCC_OscConfig+0xca>
 80013d2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80013d6:	fab3 f383 	clz	r3, r3
 80013da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013e8:	f7fe ff70 	bl	80002cc <HAL_GetTick>
 80013ec:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80013f0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f2:	2601      	movs	r6, #1
 80013f4:	fa95 f3a5 	rbit	r3, r5
 80013f8:	6822      	ldr	r2, [r4, #0]
 80013fa:	fa95 f3a5 	rbit	r3, r5
 80013fe:	fab3 f383 	clz	r3, r3
 8001402:	f003 031f 	and.w	r3, r3, #31
 8001406:	fa06 f303 	lsl.w	r3, r6, r3
 800140a:	4213      	tst	r3, r2
 800140c:	f43f adac 	beq.w	8000f68 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001410:	f7fe ff5c 	bl	80002cc <HAL_GetTick>
 8001414:	1bc0      	subs	r0, r0, r7
 8001416:	2802      	cmp	r0, #2
 8001418:	d9ec      	bls.n	80013f4 <HAL_RCC_OscConfig+0x4b8>
 800141a:	e5f4      	b.n	8001006 <HAL_RCC_OscConfig+0xca>
 800141c:	40021000 	.word	0x40021000

08001420 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001420:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001422:	4c13      	ldr	r4, [pc, #76]	; (8001470 <HAL_RCC_GetSysClockFreq+0x50>)
 8001424:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001426:	f001 030c 	and.w	r3, r1, #12
 800142a:	2b08      	cmp	r3, #8
 800142c:	d11e      	bne.n	800146c <HAL_RCC_GetSysClockFreq+0x4c>
 800142e:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001432:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001436:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 800143a:	fab3 f383 	clz	r3, r3
 800143e:	fa22 f303 	lsr.w	r3, r2, r3
 8001442:	4a0c      	ldr	r2, [pc, #48]	; (8001474 <HAL_RCC_GetSysClockFreq+0x54>)
 8001444:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001446:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001448:	220f      	movs	r2, #15
 800144a:	fa92 f2a2 	rbit	r2, r2
 800144e:	fab2 f282 	clz	r2, r2
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	40d3      	lsrs	r3, r2
 8001458:	4a07      	ldr	r2, [pc, #28]	; (8001478 <HAL_RCC_GetSysClockFreq+0x58>)
 800145a:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800145c:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800145e:	bf4a      	itet	mi
 8001460:	4b06      	ldrmi	r3, [pc, #24]	; (800147c <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001462:	4b07      	ldrpl	r3, [pc, #28]	; (8001480 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001464:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001468:	4358      	muls	r0, r3
 800146a:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 800146c:	4803      	ldr	r0, [pc, #12]	; (800147c <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800146e:	bd10      	pop	{r4, pc}
 8001470:	40021000 	.word	0x40021000
 8001474:	0800384c 	.word	0x0800384c
 8001478:	0800385c 	.word	0x0800385c
 800147c:	007a1200 	.word	0x007a1200
 8001480:	003d0900 	.word	0x003d0900

08001484 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001484:	4a5c      	ldr	r2, [pc, #368]	; (80015f8 <HAL_RCC_ClockConfig+0x174>)
 8001486:	6813      	ldr	r3, [r2, #0]
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	428b      	cmp	r3, r1
{
 800148e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001492:	4606      	mov	r6, r0
 8001494:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001496:	d330      	bcc.n	80014fa <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001498:	6832      	ldr	r2, [r6, #0]
 800149a:	0791      	lsls	r1, r2, #30
 800149c:	d43a      	bmi.n	8001514 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800149e:	07d2      	lsls	r2, r2, #31
 80014a0:	d440      	bmi.n	8001524 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80014a2:	4a55      	ldr	r2, [pc, #340]	; (80015f8 <HAL_RCC_ClockConfig+0x174>)
 80014a4:	6813      	ldr	r3, [r2, #0]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	429d      	cmp	r5, r3
 80014ac:	f0c0 8092 	bcc.w	80015d4 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b0:	6832      	ldr	r2, [r6, #0]
 80014b2:	4c52      	ldr	r4, [pc, #328]	; (80015fc <HAL_RCC_ClockConfig+0x178>)
 80014b4:	f012 0f04 	tst.w	r2, #4
 80014b8:	f040 8097 	bne.w	80015ea <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014bc:	0713      	lsls	r3, r2, #28
 80014be:	d506      	bpl.n	80014ce <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014c0:	6863      	ldr	r3, [r4, #4]
 80014c2:	6932      	ldr	r2, [r6, #16]
 80014c4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80014c8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80014cc:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80014ce:	f7ff ffa7 	bl	8001420 <HAL_RCC_GetSysClockFreq>
 80014d2:	6863      	ldr	r3, [r4, #4]
 80014d4:	22f0      	movs	r2, #240	; 0xf0
 80014d6:	fa92 f2a2 	rbit	r2, r2
 80014da:	fab2 f282 	clz	r2, r2
 80014de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014e2:	40d3      	lsrs	r3, r2
 80014e4:	4a46      	ldr	r2, [pc, #280]	; (8001600 <HAL_RCC_ClockConfig+0x17c>)
 80014e6:	5cd3      	ldrb	r3, [r2, r3]
 80014e8:	40d8      	lsrs	r0, r3
 80014ea:	4b46      	ldr	r3, [pc, #280]	; (8001604 <HAL_RCC_ClockConfig+0x180>)
 80014ec:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80014ee:	2000      	movs	r0, #0
 80014f0:	f7fe febe 	bl	8000270 <HAL_InitTick>
  return HAL_OK;
 80014f4:	2000      	movs	r0, #0
}
 80014f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fa:	6813      	ldr	r3, [r2, #0]
 80014fc:	f023 0307 	bic.w	r3, r3, #7
 8001500:	430b      	orrs	r3, r1
 8001502:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001504:	6813      	ldr	r3, [r2, #0]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	4299      	cmp	r1, r3
 800150c:	d0c4      	beq.n	8001498 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800150e:	2001      	movs	r0, #1
 8001510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001514:	4939      	ldr	r1, [pc, #228]	; (80015fc <HAL_RCC_ClockConfig+0x178>)
 8001516:	68b0      	ldr	r0, [r6, #8]
 8001518:	684b      	ldr	r3, [r1, #4]
 800151a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800151e:	4303      	orrs	r3, r0
 8001520:	604b      	str	r3, [r1, #4]
 8001522:	e7bc      	b.n	800149e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001524:	6872      	ldr	r2, [r6, #4]
 8001526:	4c35      	ldr	r4, [pc, #212]	; (80015fc <HAL_RCC_ClockConfig+0x178>)
 8001528:	2a01      	cmp	r2, #1
 800152a:	d128      	bne.n	800157e <HAL_RCC_ClockConfig+0xfa>
 800152c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001530:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001534:	6821      	ldr	r1, [r4, #0]
 8001536:	fa93 f3a3 	rbit	r3, r3
 800153a:	fab3 f383 	clz	r3, r3
 800153e:	f003 031f 	and.w	r3, r3, #31
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001548:	d0e1      	beq.n	800150e <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800154a:	6863      	ldr	r3, [r4, #4]
 800154c:	f023 0303 	bic.w	r3, r3, #3
 8001550:	431a      	orrs	r2, r3
 8001552:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8001554:	f7fe feba 	bl	80002cc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001558:	6873      	ldr	r3, [r6, #4]
 800155a:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 800155c:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800155e:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001562:	d11f      	bne.n	80015a4 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001564:	6863      	ldr	r3, [r4, #4]
 8001566:	f003 030c 	and.w	r3, r3, #12
 800156a:	2b04      	cmp	r3, #4
 800156c:	d099      	beq.n	80014a2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800156e:	f7fe fead 	bl	80002cc <HAL_GetTick>
 8001572:	1bc0      	subs	r0, r0, r7
 8001574:	4540      	cmp	r0, r8
 8001576:	d9f5      	bls.n	8001564 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8001578:	2003      	movs	r0, #3
 800157a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800157e:	2a02      	cmp	r2, #2
 8001580:	bf0c      	ite	eq
 8001582:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001586:	2302      	movne	r3, #2
 8001588:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158c:	6820      	ldr	r0, [r4, #0]
 800158e:	fa93 f3a3 	rbit	r3, r3
 8001592:	fab3 f383 	clz	r3, r3
 8001596:	f003 031f 	and.w	r3, r3, #31
 800159a:	2101      	movs	r1, #1
 800159c:	fa01 f303 	lsl.w	r3, r1, r3
 80015a0:	4203      	tst	r3, r0
 80015a2:	e7d1      	b.n	8001548 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d110      	bne.n	80015ca <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015a8:	6863      	ldr	r3, [r4, #4]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	f43f af77 	beq.w	80014a2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b4:	f7fe fe8a 	bl	80002cc <HAL_GetTick>
 80015b8:	1bc0      	subs	r0, r0, r7
 80015ba:	4540      	cmp	r0, r8
 80015bc:	d9f4      	bls.n	80015a8 <HAL_RCC_ClockConfig+0x124>
 80015be:	e7db      	b.n	8001578 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c0:	f7fe fe84 	bl	80002cc <HAL_GetTick>
 80015c4:	1bc0      	subs	r0, r0, r7
 80015c6:	4540      	cmp	r0, r8
 80015c8:	d8d6      	bhi.n	8001578 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ca:	6863      	ldr	r3, [r4, #4]
 80015cc:	f013 0f0c 	tst.w	r3, #12
 80015d0:	d1f6      	bne.n	80015c0 <HAL_RCC_ClockConfig+0x13c>
 80015d2:	e766      	b.n	80014a2 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d4:	6813      	ldr	r3, [r2, #0]
 80015d6:	f023 0307 	bic.w	r3, r3, #7
 80015da:	432b      	orrs	r3, r5
 80015dc:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015de:	6813      	ldr	r3, [r2, #0]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	429d      	cmp	r5, r3
 80015e6:	d192      	bne.n	800150e <HAL_RCC_ClockConfig+0x8a>
 80015e8:	e762      	b.n	80014b0 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015ea:	6863      	ldr	r3, [r4, #4]
 80015ec:	68f1      	ldr	r1, [r6, #12]
 80015ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015f2:	430b      	orrs	r3, r1
 80015f4:	6063      	str	r3, [r4, #4]
 80015f6:	e761      	b.n	80014bc <HAL_RCC_ClockConfig+0x38>
 80015f8:	40022000 	.word	0x40022000
 80015fc:	40021000 	.word	0x40021000
 8001600:	08003877 	.word	0x08003877
 8001604:	20000044 	.word	0x20000044

08001608 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001608:	4b01      	ldr	r3, [pc, #4]	; (8001610 <HAL_RCC_GetHCLKFreq+0x8>)
 800160a:	6818      	ldr	r0, [r3, #0]
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000044 	.word	0x20000044

08001614 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001616:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	fa92 f2a2 	rbit	r2, r2
 8001620:	fab2 f282 	clz	r2, r2
 8001624:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001628:	40d3      	lsrs	r3, r2
 800162a:	4a04      	ldr	r2, [pc, #16]	; (800163c <HAL_RCC_GetPCLK1Freq+0x28>)
 800162c:	5cd3      	ldrb	r3, [r2, r3]
 800162e:	4a04      	ldr	r2, [pc, #16]	; (8001640 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001630:	6810      	ldr	r0, [r2, #0]
}    
 8001632:	40d8      	lsrs	r0, r3
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000
 800163c:	08003887 	.word	0x08003887
 8001640:	20000044 	.word	0x20000044

08001644 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001646:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	fa92 f2a2 	rbit	r2, r2
 8001650:	fab2 f282 	clz	r2, r2
 8001654:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001658:	40d3      	lsrs	r3, r2
 800165a:	4a04      	ldr	r2, [pc, #16]	; (800166c <HAL_RCC_GetPCLK2Freq+0x28>)
 800165c:	5cd3      	ldrb	r3, [r2, r3]
 800165e:	4a04      	ldr	r2, [pc, #16]	; (8001670 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001660:	6810      	ldr	r0, [r2, #0]
} 
 8001662:	40d8      	lsrs	r0, r3
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000
 800166c:	08003887 	.word	0x08003887
 8001670:	20000044 	.word	0x20000044

08001674 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001674:	6803      	ldr	r3, [r0, #0]
{
 8001676:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800167a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800167c:	03d8      	lsls	r0, r3, #15
 800167e:	d520      	bpl.n	80016c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001680:	4c50      	ldr	r4, [pc, #320]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001682:	69e3      	ldr	r3, [r4, #28]
 8001684:	00d9      	lsls	r1, r3, #3
 8001686:	d444      	bmi.n	8001712 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001688:	69e3      	ldr	r3, [r4, #28]
 800168a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168e:	61e3      	str	r3, [r4, #28]
 8001690:	69e3      	ldr	r3, [r4, #28]
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800169a:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169c:	4f4a      	ldr	r7, [pc, #296]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	05da      	lsls	r2, r3, #23
 80016a2:	d538      	bpl.n	8001716 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80016a4:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016a6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80016aa:	d148      	bne.n	800173e <HAL_RCCEx_PeriphCLKConfig+0xca>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80016ac:	6a23      	ldr	r3, [r4, #32]
 80016ae:	686a      	ldr	r2, [r5, #4]
 80016b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016b4:	4313      	orrs	r3, r2
 80016b6:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016b8:	b11e      	cbz	r6, 80016c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ba:	69e3      	ldr	r3, [r4, #28]
 80016bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80016c2:	6828      	ldr	r0, [r5, #0]
 80016c4:	07c1      	lsls	r1, r0, #31
 80016c6:	d506      	bpl.n	80016d6 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80016c8:	4a3e      	ldr	r2, [pc, #248]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80016ca:	68a9      	ldr	r1, [r5, #8]
 80016cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80016ce:	f023 0303 	bic.w	r3, r3, #3
 80016d2:	430b      	orrs	r3, r1
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80016d6:	0682      	lsls	r2, r0, #26
 80016d8:	d506      	bpl.n	80016e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80016da:	4a3a      	ldr	r2, [pc, #232]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80016dc:	68e9      	ldr	r1, [r5, #12]
 80016de:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80016e0:	f023 0310 	bic.w	r3, r3, #16
 80016e4:	430b      	orrs	r3, r1
 80016e6:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80016e8:	0603      	lsls	r3, r0, #24
 80016ea:	d506      	bpl.n	80016fa <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80016ec:	4a35      	ldr	r2, [pc, #212]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80016ee:	6929      	ldr	r1, [r5, #16]
 80016f0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80016f2:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80016f6:	430b      	orrs	r3, r1
 80016f8:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80016fa:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 80016fe:	d01b      	beq.n	8001738 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001700:	4a30      	ldr	r2, [pc, #192]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001702:	6969      	ldr	r1, [r5, #20]
 8001704:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001706:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800170a:	430b      	orrs	r3, r1
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800170e:	2000      	movs	r0, #0
 8001710:	e012      	b.n	8001738 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    FlagStatus       pwrclkchanged = RESET;
 8001712:	2600      	movs	r6, #0
 8001714:	e7c2      	b.n	800169c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800171e:	f7fe fdd5 	bl	80002cc <HAL_GetTick>
 8001722:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	05db      	lsls	r3, r3, #23
 8001728:	d4bc      	bmi.n	80016a4 <HAL_RCCEx_PeriphCLKConfig+0x30>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172a:	f7fe fdcf 	bl	80002cc <HAL_GetTick>
 800172e:	eba0 0008 	sub.w	r0, r0, r8
 8001732:	2864      	cmp	r0, #100	; 0x64
 8001734:	d9f6      	bls.n	8001724 <HAL_RCCEx_PeriphCLKConfig+0xb0>
          return HAL_TIMEOUT;
 8001736:	2003      	movs	r0, #3
}
 8001738:	b002      	add	sp, #8
 800173a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800173e:	686a      	ldr	r2, [r5, #4]
 8001740:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001744:	4293      	cmp	r3, r2
 8001746:	d0b1      	beq.n	80016ac <HAL_RCCEx_PeriphCLKConfig+0x38>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001748:	6a21      	ldr	r1, [r4, #32]
 800174a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800174e:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8001752:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8001756:	f8df e074 	ldr.w	lr, [pc, #116]	; 80017cc <HAL_RCCEx_PeriphCLKConfig+0x158>
 800175a:	fab2 f282 	clz	r2, r2
 800175e:	4472      	add	r2, lr
 8001760:	0092      	lsls	r2, r2, #2
 8001762:	2701      	movs	r7, #1
 8001764:	6017      	str	r7, [r2, #0]
 8001766:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800176a:	fab3 f383 	clz	r3, r3
 800176e:	4473      	add	r3, lr
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 8001776:	6220      	str	r0, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001778:	07c8      	lsls	r0, r1, #31
 800177a:	d597      	bpl.n	80016ac <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800177c:	f7fe fda6 	bl	80002cc <HAL_GetTick>
 8001780:	f04f 0802 	mov.w	r8, #2
 8001784:	4682      	mov	sl, r0
 8001786:	46c1      	mov	r9, r8
 8001788:	fa98 f3a8 	rbit	r3, r8
 800178c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001790:	b19b      	cbz	r3, 80017ba <HAL_RCCEx_PeriphCLKConfig+0x146>
 8001792:	6a22      	ldr	r2, [r4, #32]
 8001794:	fa99 f3a9 	rbit	r3, r9
 8001798:	fab3 f383 	clz	r3, r3
 800179c:	f003 031f 	and.w	r3, r3, #31
 80017a0:	fa07 f303 	lsl.w	r3, r7, r3
 80017a4:	4213      	tst	r3, r2
 80017a6:	d181      	bne.n	80016ac <HAL_RCCEx_PeriphCLKConfig+0x38>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a8:	f7fe fd90 	bl	80002cc <HAL_GetTick>
 80017ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80017b0:	eba0 000a 	sub.w	r0, r0, sl
 80017b4:	4298      	cmp	r0, r3
 80017b6:	d9e7      	bls.n	8001788 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80017b8:	e7bd      	b.n	8001736 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 80017ba:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80017c0:	e7e8      	b.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0x120>
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40007000 	.word	0x40007000
 80017cc:	10908100 	.word	0x10908100

080017d0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017d0:	4a21      	ldr	r2, [pc, #132]	; (8001858 <TIM_Base_SetConfig+0x88>)
  tmpcr1 = TIMx->CR1;
 80017d2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017d4:	4290      	cmp	r0, r2
{
 80017d6:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017d8:	d005      	beq.n	80017e6 <TIM_Base_SetConfig+0x16>
 80017da:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80017de:	d002      	beq.n	80017e6 <TIM_Base_SetConfig+0x16>
 80017e0:	4c1e      	ldr	r4, [pc, #120]	; (800185c <TIM_Base_SetConfig+0x8c>)
 80017e2:	42a0      	cmp	r0, r4
 80017e4:	d10c      	bne.n	8001800 <TIM_Base_SetConfig+0x30>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80017e6:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017ec:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 80017ee:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017f2:	d010      	beq.n	8001816 <TIM_Base_SetConfig+0x46>
 80017f4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80017f8:	d00d      	beq.n	8001816 <TIM_Base_SetConfig+0x46>
 80017fa:	4a18      	ldr	r2, [pc, #96]	; (800185c <TIM_Base_SetConfig+0x8c>)
 80017fc:	4290      	cmp	r0, r2
 80017fe:	d00a      	beq.n	8001816 <TIM_Base_SetConfig+0x46>
 8001800:	4a17      	ldr	r2, [pc, #92]	; (8001860 <TIM_Base_SetConfig+0x90>)
 8001802:	4290      	cmp	r0, r2
 8001804:	d007      	beq.n	8001816 <TIM_Base_SetConfig+0x46>
 8001806:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800180a:	4290      	cmp	r0, r2
 800180c:	d003      	beq.n	8001816 <TIM_Base_SetConfig+0x46>
 800180e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001812:	4290      	cmp	r0, r2
 8001814:	d103      	bne.n	800181e <TIM_Base_SetConfig+0x4e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001816:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800181c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800181e:	694a      	ldr	r2, [r1, #20]
 8001820:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001824:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001826:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001828:	688b      	ldr	r3, [r1, #8]
 800182a:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800182c:	680b      	ldr	r3, [r1, #0]
 800182e:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <TIM_Base_SetConfig+0x88>)
 8001832:	4298      	cmp	r0, r3
 8001834:	d00b      	beq.n	800184e <TIM_Base_SetConfig+0x7e>
 8001836:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800183a:	4298      	cmp	r0, r3
 800183c:	d007      	beq.n	800184e <TIM_Base_SetConfig+0x7e>
 800183e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001842:	4298      	cmp	r0, r3
 8001844:	d003      	beq.n	800184e <TIM_Base_SetConfig+0x7e>
 8001846:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800184a:	4298      	cmp	r0, r3
 800184c:	d101      	bne.n	8001852 <TIM_Base_SetConfig+0x82>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800184e:	690b      	ldr	r3, [r1, #16]
 8001850:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001852:	2301      	movs	r3, #1
 8001854:	6143      	str	r3, [r0, #20]
 8001856:	bd10      	pop	{r4, pc}
 8001858:	40012c00 	.word	0x40012c00
 800185c:	40000400 	.word	0x40000400
 8001860:	40014000 	.word	0x40014000

08001864 <HAL_TIM_PWM_Init>:
{
 8001864:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001866:	4604      	mov	r4, r0
 8001868:	b1a0      	cbz	r0, 8001894 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800186a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800186e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001872:	b91b      	cbnz	r3, 800187c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001874:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001878:	f001 f9c8 	bl	8002c0c <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800187c:	2302      	movs	r3, #2
 800187e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001882:	6820      	ldr	r0, [r4, #0]
 8001884:	1d21      	adds	r1, r4, #4
 8001886:	f7ff ffa3 	bl	80017d0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800188a:	2301      	movs	r3, #1
 800188c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001890:	2000      	movs	r0, #0
 8001892:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001894:	2001      	movs	r0, #1
}
 8001896:	bd10      	pop	{r4, pc}

08001898 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001898:	6a03      	ldr	r3, [r0, #32]
 800189a:	f023 0301 	bic.w	r3, r3, #1
 800189e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80018a0:	6a03      	ldr	r3, [r0, #32]
{
 80018a2:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80018a4:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80018a6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80018a8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80018aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018ae:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80018b2:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80018b4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80018b6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80018ba:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80018bc:	4d17      	ldr	r5, [pc, #92]	; (800191c <TIM_OC1_SetConfig+0x84>)
 80018be:	42a8      	cmp	r0, r5
 80018c0:	d00b      	beq.n	80018da <TIM_OC1_SetConfig+0x42>
 80018c2:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80018c6:	42a8      	cmp	r0, r5
 80018c8:	d007      	beq.n	80018da <TIM_OC1_SetConfig+0x42>
 80018ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018ce:	42a8      	cmp	r0, r5
 80018d0:	d003      	beq.n	80018da <TIM_OC1_SetConfig+0x42>
 80018d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018d6:	42a8      	cmp	r0, r5
 80018d8:	d11a      	bne.n	8001910 <TIM_OC1_SetConfig+0x78>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80018da:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80018dc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80018e0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80018e2:	4d0e      	ldr	r5, [pc, #56]	; (800191c <TIM_OC1_SetConfig+0x84>)
 80018e4:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80018e6:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80018ea:	d00b      	beq.n	8001904 <TIM_OC1_SetConfig+0x6c>
 80018ec:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80018f0:	42a8      	cmp	r0, r5
 80018f2:	d007      	beq.n	8001904 <TIM_OC1_SetConfig+0x6c>
 80018f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018f8:	42a8      	cmp	r0, r5
 80018fa:	d003      	beq.n	8001904 <TIM_OC1_SetConfig+0x6c>
 80018fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001900:	42a8      	cmp	r0, r5
 8001902:	d105      	bne.n	8001910 <TIM_OC1_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001904:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001908:	698e      	ldr	r6, [r1, #24]
 800190a:	694c      	ldr	r4, [r1, #20]
 800190c:	4334      	orrs	r4, r6
 800190e:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001910:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001912:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001914:	684a      	ldr	r2, [r1, #4]
 8001916:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001918:	6203      	str	r3, [r0, #32]
 800191a:	bd70      	pop	{r4, r5, r6, pc}
 800191c:	40012c00 	.word	0x40012c00

08001920 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001920:	6a03      	ldr	r3, [r0, #32]
 8001922:	f023 0310 	bic.w	r3, r3, #16
 8001926:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001928:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800192a:	6842      	ldr	r2, [r0, #4]
{
 800192c:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800192e:	6984      	ldr	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001930:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001932:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8001936:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800193a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800193e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001940:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001944:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001948:	4d10      	ldr	r5, [pc, #64]	; (800198c <TIM_OC2_SetConfig+0x6c>)
 800194a:	42a8      	cmp	r0, r5
 800194c:	d10e      	bne.n	800196c <TIM_OC2_SetConfig+0x4c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800194e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001950:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001954:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800195c:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800195e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001960:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001964:	4335      	orrs	r5, r6
 8001966:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800196a:	e009      	b.n	8001980 <TIM_OC2_SetConfig+0x60>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800196c:	4d08      	ldr	r5, [pc, #32]	; (8001990 <TIM_OC2_SetConfig+0x70>)
 800196e:	42a8      	cmp	r0, r5
 8001970:	d0f4      	beq.n	800195c <TIM_OC2_SetConfig+0x3c>
 8001972:	4d08      	ldr	r5, [pc, #32]	; (8001994 <TIM_OC2_SetConfig+0x74>)
 8001974:	42a8      	cmp	r0, r5
 8001976:	d0f1      	beq.n	800195c <TIM_OC2_SetConfig+0x3c>
 8001978:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800197c:	42a8      	cmp	r0, r5
 800197e:	d0ed      	beq.n	800195c <TIM_OC2_SetConfig+0x3c>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001980:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001982:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001984:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001986:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001988:	6203      	str	r3, [r0, #32]
}
 800198a:	bd70      	pop	{r4, r5, r6, pc}
 800198c:	40012c00 	.word	0x40012c00
 8001990:	40014000 	.word	0x40014000
 8001994:	40014400 	.word	0x40014400

08001998 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001998:	6a03      	ldr	r3, [r0, #32]
 800199a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800199e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019a0:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80019a2:	6842      	ldr	r2, [r0, #4]
{
 80019a4:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80019a6:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80019a8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80019aa:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80019ae:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80019b2:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80019b4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80019b6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80019ba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80019be:	4d11      	ldr	r5, [pc, #68]	; (8001a04 <TIM_OC3_SetConfig+0x6c>)
 80019c0:	42a8      	cmp	r0, r5
 80019c2:	d10e      	bne.n	80019e2 <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80019c4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80019c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80019ca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80019ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80019d2:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80019d4:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80019d6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80019da:	4335      	orrs	r5, r6
 80019dc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80019e0:	e009      	b.n	80019f6 <TIM_OC3_SetConfig+0x5e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80019e2:	4d09      	ldr	r5, [pc, #36]	; (8001a08 <TIM_OC3_SetConfig+0x70>)
 80019e4:	42a8      	cmp	r0, r5
 80019e6:	d0f4      	beq.n	80019d2 <TIM_OC3_SetConfig+0x3a>
 80019e8:	4d08      	ldr	r5, [pc, #32]	; (8001a0c <TIM_OC3_SetConfig+0x74>)
 80019ea:	42a8      	cmp	r0, r5
 80019ec:	d0f1      	beq.n	80019d2 <TIM_OC3_SetConfig+0x3a>
 80019ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019f2:	42a8      	cmp	r0, r5
 80019f4:	d0ed      	beq.n	80019d2 <TIM_OC3_SetConfig+0x3a>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80019f6:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80019f8:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80019fa:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80019fc:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80019fe:	6203      	str	r3, [r0, #32]
}
 8001a00:	bd70      	pop	{r4, r5, r6, pc}
 8001a02:	bf00      	nop
 8001a04:	40012c00 	.word	0x40012c00
 8001a08:	40014000 	.word	0x40014000
 8001a0c:	40014400 	.word	0x40014400

08001a10 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001a10:	6a03      	ldr	r3, [r0, #32]
 8001a12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a16:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a18:	6a02      	ldr	r2, [r0, #32]
{
 8001a1a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001a1c:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001a1e:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a20:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001a22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a26:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a2a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001a2e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001a30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001a34:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001a38:	4d0c      	ldr	r5, [pc, #48]	; (8001a6c <TIM_OC4_SetConfig+0x5c>)
 8001a3a:	42a8      	cmp	r0, r5
 8001a3c:	d00b      	beq.n	8001a56 <TIM_OC4_SetConfig+0x46>
 8001a3e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001a42:	42a8      	cmp	r0, r5
 8001a44:	d007      	beq.n	8001a56 <TIM_OC4_SetConfig+0x46>
 8001a46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a4a:	42a8      	cmp	r0, r5
 8001a4c:	d003      	beq.n	8001a56 <TIM_OC4_SetConfig+0x46>
 8001a4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a52:	42a8      	cmp	r0, r5
 8001a54:	d104      	bne.n	8001a60 <TIM_OC4_SetConfig+0x50>
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001a56:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001a58:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001a5c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a60:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001a62:	61c3      	str	r3, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001a64:	684b      	ldr	r3, [r1, #4]
 8001a66:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001a68:	6202      	str	r2, [r0, #32]
 8001a6a:	bd30      	pop	{r4, r5, pc}
 8001a6c:	40012c00 	.word	0x40012c00

08001a70 <TIM_CCxNChannelCmd>:
  uint32_t tmp = 0U;

  tmp = TIM_CCER_CC1NE << Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8001a70:	6a03      	ldr	r3, [r0, #32]
{
 8001a72:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1NE << Channel;
 8001a74:	2404      	movs	r4, #4
 8001a76:	408c      	lsls	r4, r1
  TIMx->CCER &=  ~tmp;
 8001a78:	ea23 0304 	bic.w	r3, r3, r4
 8001a7c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 8001a7e:	6a03      	ldr	r3, [r0, #32]
 8001a80:	408a      	lsls	r2, r1
 8001a82:	431a      	orrs	r2, r3
 8001a84:	6202      	str	r2, [r0, #32]
 8001a86:	bd10      	pop	{r4, pc}

08001a88 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001a88:	6a03      	ldr	r3, [r0, #32]
 8001a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a90:	6a02      	ldr	r2, [r0, #32]
{
 8001a92:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001a94:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001a96:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a98:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8001aa2:	432b      	orrs	r3, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001aa4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8001aa6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001aaa:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001aae:	4d0d      	ldr	r5, [pc, #52]	; (8001ae4 <TIM_OC5_SetConfig+0x5c>)
 8001ab0:	42a8      	cmp	r0, r5
 8001ab2:	d00b      	beq.n	8001acc <TIM_OC5_SetConfig+0x44>
 8001ab4:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001ab8:	42a8      	cmp	r0, r5
 8001aba:	d007      	beq.n	8001acc <TIM_OC5_SetConfig+0x44>
 8001abc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ac0:	42a8      	cmp	r0, r5
 8001ac2:	d003      	beq.n	8001acc <TIM_OC5_SetConfig+0x44>
 8001ac4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ac8:	42a8      	cmp	r0, r5
 8001aca:	d104      	bne.n	8001ad6 <TIM_OC5_SetConfig+0x4e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001acc:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001ace:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001ad2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ad6:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001ad8:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001ada:	684b      	ldr	r3, [r1, #4]
 8001adc:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001ade:	6202      	str	r2, [r0, #32]
 8001ae0:	bd30      	pop	{r4, r5, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40012c00 	.word	0x40012c00

08001ae8 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001ae8:	6a03      	ldr	r3, [r0, #32]
 8001aea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001aee:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001af0:	6a02      	ldr	r2, [r0, #32]
{
 8001af2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001af4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001af6:	6d43      	ldr	r3, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001af8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001afa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b02:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001b06:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001b08:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001b0c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001b10:	4d0c      	ldr	r5, [pc, #48]	; (8001b44 <TIM_OC6_SetConfig+0x5c>)
 8001b12:	42a8      	cmp	r0, r5
 8001b14:	d00b      	beq.n	8001b2e <TIM_OC6_SetConfig+0x46>
 8001b16:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001b1a:	42a8      	cmp	r0, r5
 8001b1c:	d007      	beq.n	8001b2e <TIM_OC6_SetConfig+0x46>
 8001b1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b22:	42a8      	cmp	r0, r5
 8001b24:	d003      	beq.n	8001b2e <TIM_OC6_SetConfig+0x46>
 8001b26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b2a:	42a8      	cmp	r0, r5
 8001b2c:	d104      	bne.n	8001b38 <TIM_OC6_SetConfig+0x50>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001b2e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001b30:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001b34:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b38:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001b3a:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001b3c:	684b      	ldr	r3, [r1, #4]
 8001b3e:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001b40:	6202      	str	r2, [r0, #32]
 8001b42:	bd30      	pop	{r4, r5, pc}
 8001b44:	40012c00 	.word	0x40012c00

08001b48 <HAL_TIMEx_PWMN_Start>:
{
 8001b48:	b510      	push	{r4, lr}
 8001b4a:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8001b4c:	2204      	movs	r2, #4
 8001b4e:	6800      	ldr	r0, [r0, #0]
 8001b50:	f7ff ff8e 	bl	8001a70 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b5c:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	f042 0201 	orr.w	r2, r2, #1
 8001b64:	601a      	str	r2, [r3, #0]
} 
 8001b66:	2000      	movs	r0, #0
 8001b68:	bd10      	pop	{r4, pc}

08001b6a <HAL_TIM_PWM_ConfigChannel>:
{
 8001b6a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001b6c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001b70:	2b01      	cmp	r3, #1
{
 8001b72:	4604      	mov	r4, r0
 8001b74:	460d      	mov	r5, r1
 8001b76:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001b7a:	d010      	beq.n	8001b9e <HAL_TIM_PWM_ConfigChannel+0x34>
 8001b7c:	2301      	movs	r3, #1
  switch (Channel)
 8001b7e:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8001b80:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001b84:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8001b88:	d043      	beq.n	8001c12 <HAL_TIM_PWM_ConfigChannel+0xa8>
 8001b8a:	d809      	bhi.n	8001ba0 <HAL_TIM_PWM_ConfigChannel+0x36>
 8001b8c:	b1fa      	cbz	r2, 8001bce <HAL_TIM_PWM_ConfigChannel+0x64>
 8001b8e:	2a04      	cmp	r2, #4
 8001b90:	d02e      	beq.n	8001bf0 <HAL_TIM_PWM_ConfigChannel+0x86>
  htim->State = HAL_TIM_STATE_READY;
 8001b92:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001b94:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001b96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001b9a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001b9e:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8001ba0:	2a10      	cmp	r2, #16
 8001ba2:	d047      	beq.n	8001c34 <HAL_TIM_PWM_ConfigChannel+0xca>
 8001ba4:	2a14      	cmp	r2, #20
 8001ba6:	d056      	beq.n	8001c56 <HAL_TIM_PWM_ConfigChannel+0xec>
 8001ba8:	2a0c      	cmp	r2, #12
 8001baa:	d1f2      	bne.n	8001b92 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001bac:	6820      	ldr	r0, [r4, #0]
 8001bae:	f7ff ff2f 	bl	8001a10 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001bb2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001bb4:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001bb6:	69da      	ldr	r2, [r3, #28]
 8001bb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001bbe:	69da      	ldr	r2, [r3, #28]
 8001bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001bc6:	69da      	ldr	r2, [r3, #28]
 8001bc8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001bcc:	e030      	b.n	8001c30 <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001bce:	6820      	ldr	r0, [r4, #0]
 8001bd0:	f7ff fe62 	bl	8001898 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bd4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001bd6:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bd8:	699a      	ldr	r2, [r3, #24]
 8001bda:	f042 0208 	orr.w	r2, r2, #8
 8001bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001be0:	699a      	ldr	r2, [r3, #24]
 8001be2:	f022 0204 	bic.w	r2, r2, #4
 8001be6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001be8:	699a      	ldr	r2, [r3, #24]
 8001bea:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001bec:	619a      	str	r2, [r3, #24]
    break;
 8001bee:	e7d0      	b.n	8001b92 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001bf0:	6820      	ldr	r0, [r4, #0]
 8001bf2:	f7ff fe95 	bl	8001920 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001bf6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001bf8:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001bfa:	699a      	ldr	r2, [r3, #24]
 8001bfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c00:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c02:	699a      	ldr	r2, [r3, #24]
 8001c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c08:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c0a:	699a      	ldr	r2, [r3, #24]
 8001c0c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001c10:	e7ec      	b.n	8001bec <HAL_TIM_PWM_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c12:	6820      	ldr	r0, [r4, #0]
 8001c14:	f7ff fec0 	bl	8001998 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c18:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001c1a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c1c:	69da      	ldr	r2, [r3, #28]
 8001c1e:	f042 0208 	orr.w	r2, r2, #8
 8001c22:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c24:	69da      	ldr	r2, [r3, #28]
 8001c26:	f022 0204 	bic.w	r2, r2, #4
 8001c2a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001c2c:	69da      	ldr	r2, [r3, #28]
 8001c2e:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001c30:	61da      	str	r2, [r3, #28]
    break;
 8001c32:	e7ae      	b.n	8001b92 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001c34:	6820      	ldr	r0, [r4, #0]
 8001c36:	f7ff ff27 	bl	8001a88 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001c3a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8001c3c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001c3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c40:	f042 0208 	orr.w	r2, r2, #8
 8001c44:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001c46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c48:	f022 0204 	bic.w	r2, r2, #4
 8001c4c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8001c4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c50:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8001c52:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8001c54:	e79d      	b.n	8001b92 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001c56:	6820      	ldr	r0, [r4, #0]
 8001c58:	f7ff ff46 	bl	8001ae8 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001c5c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8001c5e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001c60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001c68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8001c70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c72:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001c76:	e7ec      	b.n	8001c52 <HAL_TIM_PWM_ConfigChannel+0xe8>

08001c78 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8001c78:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001c7c:	2b01      	cmp	r3, #1
{
 8001c7e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001c80:	d018      	beq.n	8001cb4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  tmpcr2 = htim->Instance->CR2;
 8001c82:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001c84:	4d0c      	ldr	r5, [pc, #48]	; (8001cb8 <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  tmpcr2 = htim->Instance->CR2;
 8001c86:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001c88:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001c8a:	42aa      	cmp	r2, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001c8c:	bf02      	ittt	eq
 8001c8e:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001c90:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001c94:	432b      	orreq	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c96:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c98:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c9e:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001ca0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  htim->Instance->CR2 = tmpcr2;
 8001ca4:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ca6:	4321      	orrs	r1, r4
  __HAL_UNLOCK(htim);
 8001ca8:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8001caa:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8001cac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8001cb4:	2002      	movs	r0, #2
} 
 8001cb6:	bd30      	pop	{r4, r5, pc}
 8001cb8:	40012c00 	.word	0x40012c00

08001cbc <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8001cbc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001cc0:	2b01      	cmp	r3, #1
{
 8001cc2:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001cc4:	d034      	beq.n	8001d30 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001cc6:	68cb      	ldr	r3, [r1, #12]
 8001cc8:	688a      	ldr	r2, [r1, #8]
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8001cca:	4c1a      	ldr	r4, [pc, #104]	; (8001d34 <HAL_TIMEx_ConfigBreakDeadTime+0x78>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cd0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001cd2:	684a      	ldr	r2, [r1, #4]
 8001cd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001cd8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001cda:	680a      	ldr	r2, [r1, #0]
 8001cdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ce0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001ce2:	690a      	ldr	r2, [r1, #16]
 8001ce4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ce8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001cea:	694a      	ldr	r2, [r1, #20]
 8001cec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001cf0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001cf2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001cf4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cf8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8001cfa:	698a      	ldr	r2, [r1, #24]
 8001cfc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001d00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8001d04:	6802      	ldr	r2, [r0, #0]
 8001d06:	42a2      	cmp	r2, r4
 8001d08:	d10c      	bne.n	8001d24 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8001d0a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8001d0c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001d10:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8001d14:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8001d16:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8001d18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d1c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8001d1e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001d22:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8001d24:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8001d26:	2300      	movs	r3, #0
 8001d28:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8001d30:	2002      	movs	r0, #2
}
 8001d32:	bd10      	pop	{r4, pc}
 8001d34:	40012c00 	.word	0x40012c00

08001d38 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d38:	6803      	ldr	r3, [r0, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001d40:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	f022 0201 	bic.w	r2, r2, #1
 8001d48:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d4a:	2320      	movs	r3, #32
 8001d4c:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8001d50:	4770      	bx	lr

08001d52 <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 8001d52:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001d56:	2b20      	cmp	r3, #32
 8001d58:	d11a      	bne.n	8001d90 <HAL_UART_Transmit_IT+0x3e>
    if((pData == NULL ) || (Size == 0U))
 8001d5a:	b1b9      	cbz	r1, 8001d8c <HAL_UART_Transmit_IT+0x3a>
 8001d5c:	b1b2      	cbz	r2, 8001d8c <HAL_UART_Transmit_IT+0x3a>
    __HAL_LOCK(huart);
 8001d5e:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d014      	beq.n	8001d90 <HAL_UART_Transmit_IT+0x3e>
    huart->TxXferCount = Size;
 8001d66:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->pTxBuffPtr = pData;
 8001d6a:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8001d6c:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d70:	2300      	movs	r3, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001d72:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d74:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d76:	2221      	movs	r2, #33	; 0x21
 8001d78:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001d7c:	680a      	ldr	r2, [r1, #0]
    __HAL_UNLOCK(huart);
 8001d7e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001d82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d86:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8001d88:	4618      	mov	r0, r3
 8001d8a:	4770      	bx	lr
      return HAL_ERROR;
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	4770      	bx	lr
    return HAL_BUSY;
 8001d90:	2002      	movs	r0, #2
}
 8001d92:	4770      	bx	lr

08001d94 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8001d94:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001d98:	2b20      	cmp	r3, #32
 8001d9a:	d13d      	bne.n	8001e18 <HAL_UART_Receive_IT+0x84>
    if((pData == NULL ) || (Size == 0U))
 8001d9c:	2900      	cmp	r1, #0
 8001d9e:	d039      	beq.n	8001e14 <HAL_UART_Receive_IT+0x80>
 8001da0:	2a00      	cmp	r2, #0
 8001da2:	d037      	beq.n	8001e14 <HAL_UART_Receive_IT+0x80>
    __HAL_LOCK(huart);
 8001da4:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d035      	beq.n	8001e18 <HAL_UART_Receive_IT+0x84>
 8001dac:	2301      	movs	r3, #1
 8001dae:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    UART_MASK_COMPUTATION(huart);
 8001db2:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 8001db4:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 8001db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 8001dba:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8001dbe:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001dc2:	d119      	bne.n	8001df8 <HAL_UART_Receive_IT+0x64>
 8001dc4:	6903      	ldr	r3, [r0, #16]
 8001dc6:	b9ab      	cbnz	r3, 8001df4 <HAL_UART_Receive_IT+0x60>
 8001dc8:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001dcc:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dd0:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001dd2:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dd4:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001dd6:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dda:	6802      	ldr	r2, [r0, #0]
    __HAL_UNLOCK(huart);
 8001ddc:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001de0:	6891      	ldr	r1, [r2, #8]
 8001de2:	f041 0101 	orr.w	r1, r1, #1
 8001de6:	6091      	str	r1, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001de8:	6811      	ldr	r1, [r2, #0]
 8001dea:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 8001dee:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8001df0:	4618      	mov	r0, r3
 8001df2:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8001df4:	23ff      	movs	r3, #255	; 0xff
 8001df6:	e7e9      	b.n	8001dcc <HAL_UART_Receive_IT+0x38>
 8001df8:	b923      	cbnz	r3, 8001e04 <HAL_UART_Receive_IT+0x70>
 8001dfa:	6903      	ldr	r3, [r0, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f9      	beq.n	8001df4 <HAL_UART_Receive_IT+0x60>
 8001e00:	237f      	movs	r3, #127	; 0x7f
 8001e02:	e7e3      	b.n	8001dcc <HAL_UART_Receive_IT+0x38>
 8001e04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e08:	d1e2      	bne.n	8001dd0 <HAL_UART_Receive_IT+0x3c>
 8001e0a:	6903      	ldr	r3, [r0, #16]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f7      	beq.n	8001e00 <HAL_UART_Receive_IT+0x6c>
 8001e10:	233f      	movs	r3, #63	; 0x3f
 8001e12:	e7db      	b.n	8001dcc <HAL_UART_Receive_IT+0x38>
      return HAL_ERROR;
 8001e14:	2001      	movs	r0, #1
 8001e16:	4770      	bx	lr
    return HAL_BUSY;
 8001e18:	2002      	movs	r0, #2
}
 8001e1a:	4770      	bx	lr

08001e1c <HAL_UART_TxCpltCallback>:
 8001e1c:	4770      	bx	lr

08001e1e <HAL_UART_RxCpltCallback>:
 8001e1e:	4770      	bx	lr

08001e20 <HAL_UART_ErrorCallback>:
 8001e20:	4770      	bx	lr

08001e22 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001e22:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001e24:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8001e2c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8001e30:	f7ff fff6 	bl	8001e20 <HAL_UART_ErrorCallback>
 8001e34:	bd08      	pop	{r3, pc}
	...

08001e38 <UART_SetConfig>:
{
 8001e38:	b538      	push	{r3, r4, r5, lr}
 8001e3a:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001e3c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e3e:	6921      	ldr	r1, [r4, #16]
 8001e40:	68a3      	ldr	r3, [r4, #8]
 8001e42:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001e44:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e46:	430b      	orrs	r3, r1
 8001e48:	6961      	ldr	r1, [r4, #20]
 8001e4a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001e4c:	4949      	ldr	r1, [pc, #292]	; (8001f74 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e4e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001e50:	4001      	ands	r1, r0
 8001e52:	430b      	orrs	r3, r1
 8001e54:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e56:	686b      	ldr	r3, [r5, #4]
 8001e58:	68e1      	ldr	r1, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001e5a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e60:	430b      	orrs	r3, r1
 8001e62:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001e64:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001e66:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001e68:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001e6c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001e6e:	430b      	orrs	r3, r1
 8001e70:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e72:	4b41      	ldr	r3, [pc, #260]	; (8001f78 <UART_SetConfig+0x140>)
 8001e74:	429d      	cmp	r5, r3
 8001e76:	d112      	bne.n	8001e9e <UART_SetConfig+0x66>
 8001e78:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001e7c:	493f      	ldr	r1, [pc, #252]	; (8001f7c <UART_SetConfig+0x144>)
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e84:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001e88:	5ccb      	ldrb	r3, [r1, r3]
 8001e8a:	d13b      	bne.n	8001f04 <UART_SetConfig+0xcc>
    switch (clocksource)
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d836      	bhi.n	8001efe <UART_SetConfig+0xc6>
 8001e90:	e8df f003 	tbb	[pc, r3]
 8001e94:	3524210f 	.word	0x3524210f
 8001e98:	3535352d 	.word	0x3535352d
 8001e9c:	30          	.byte	0x30
 8001e9d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e9e:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <UART_SetConfig+0x148>)
 8001ea0:	429d      	cmp	r5, r3
 8001ea2:	d003      	beq.n	8001eac <UART_SetConfig+0x74>
 8001ea4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ea8:	429d      	cmp	r5, r3
 8001eaa:	d15e      	bne.n	8001f6a <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001eac:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001eb0:	d131      	bne.n	8001f16 <UART_SetConfig+0xde>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001eb2:	f7ff fbaf 	bl	8001614 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001eb6:	6861      	ldr	r1, [r4, #4]
 8001eb8:	084a      	lsrs	r2, r1, #1
 8001eba:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001ebe:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001ec2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ec4:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001ec6:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8001eca:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ecc:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	60cb      	str	r3, [r1, #12]
 8001ed4:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001ed6:	f7ff fbb5 	bl	8001644 <HAL_RCC_GetPCLK2Freq>
 8001eda:	e7ec      	b.n	8001eb6 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001edc:	6860      	ldr	r0, [r4, #4]
 8001ede:	0843      	lsrs	r3, r0, #1
 8001ee0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001ee4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001ee8:	fbb3 f3f0 	udiv	r3, r3, r0
 8001eec:	e7e9      	b.n	8001ec2 <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001eee:	f7ff fa97 	bl	8001420 <HAL_RCC_GetSysClockFreq>
 8001ef2:	e7e0      	b.n	8001eb6 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001ef4:	6860      	ldr	r0, [r4, #4]
 8001ef6:	0843      	lsrs	r3, r0, #1
 8001ef8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001efc:	e7f4      	b.n	8001ee8 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 8001efe:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	e7e0      	b.n	8001ec6 <UART_SetConfig+0x8e>
    switch (clocksource)
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d833      	bhi.n	8001f70 <UART_SetConfig+0x138>
 8001f08:	e8df f003 	tbb	[pc, r3]
 8001f0c:	321b1005 	.word	0x321b1005
 8001f10:	32323227 	.word	0x32323227
 8001f14:	2a          	.byte	0x2a
 8001f15:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001f16:	f7ff fb7d 	bl	8001614 <HAL_RCC_GetPCLK1Freq>
 8001f1a:	6863      	ldr	r3, [r4, #4]
 8001f1c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001f20:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f24:	b280      	uxth	r0, r0
 8001f26:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f28:	2000      	movs	r0, #0
        break;
 8001f2a:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001f2c:	f7ff fb8a 	bl	8001644 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f30:	6863      	ldr	r3, [r4, #4]
 8001f32:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001f36:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <UART_SetConfig+0x140>)
 8001f3c:	b280      	uxth	r0, r0
 8001f3e:	60d8      	str	r0, [r3, #12]
 8001f40:	e7f2      	b.n	8001f28 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001f42:	6862      	ldr	r2, [r4, #4]
 8001f44:	0853      	lsrs	r3, r2, #1
 8001f46:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001f4a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001f4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f52:	4a09      	ldr	r2, [pc, #36]	; (8001f78 <UART_SetConfig+0x140>)
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	60d3      	str	r3, [r2, #12]
 8001f58:	e7e6      	b.n	8001f28 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f5a:	f7ff fa61 	bl	8001420 <HAL_RCC_GetSysClockFreq>
 8001f5e:	e7e7      	b.n	8001f30 <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001f60:	6862      	ldr	r2, [r4, #4]
 8001f62:	0853      	lsrs	r3, r2, #1
 8001f64:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001f68:	e7f1      	b.n	8001f4e <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f6a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001f6e:	d0c6      	beq.n	8001efe <UART_SetConfig+0xc6>
        ret = HAL_ERROR;
 8001f70:	2001      	movs	r0, #1
  return ret;
 8001f72:	bd38      	pop	{r3, r4, r5, pc}
 8001f74:	efff69f3 	.word	0xefff69f3
 8001f78:	40013800 	.word	0x40013800
 8001f7c:	0800386c 	.word	0x0800386c
 8001f80:	40004400 	.word	0x40004400

08001f84 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f84:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f86:	07da      	lsls	r2, r3, #31
{
 8001f88:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f8a:	d506      	bpl.n	8001f9a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f8c:	6801      	ldr	r1, [r0, #0]
 8001f8e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001f90:	684a      	ldr	r2, [r1, #4]
 8001f92:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001f96:	4322      	orrs	r2, r4
 8001f98:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001f9a:	079c      	lsls	r4, r3, #30
 8001f9c:	d506      	bpl.n	8001fac <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001f9e:	6801      	ldr	r1, [r0, #0]
 8001fa0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001fa2:	684a      	ldr	r2, [r1, #4]
 8001fa4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fa8:	4322      	orrs	r2, r4
 8001faa:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001fac:	0759      	lsls	r1, r3, #29
 8001fae:	d506      	bpl.n	8001fbe <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001fb0:	6801      	ldr	r1, [r0, #0]
 8001fb2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001fb4:	684a      	ldr	r2, [r1, #4]
 8001fb6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fba:	4322      	orrs	r2, r4
 8001fbc:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001fbe:	071a      	lsls	r2, r3, #28
 8001fc0:	d506      	bpl.n	8001fd0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001fc2:	6801      	ldr	r1, [r0, #0]
 8001fc4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001fc6:	684a      	ldr	r2, [r1, #4]
 8001fc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fcc:	4322      	orrs	r2, r4
 8001fce:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001fd0:	06dc      	lsls	r4, r3, #27
 8001fd2:	d506      	bpl.n	8001fe2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001fd4:	6801      	ldr	r1, [r0, #0]
 8001fd6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001fd8:	688a      	ldr	r2, [r1, #8]
 8001fda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fde:	4322      	orrs	r2, r4
 8001fe0:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001fe2:	0699      	lsls	r1, r3, #26
 8001fe4:	d506      	bpl.n	8001ff4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001fe6:	6801      	ldr	r1, [r0, #0]
 8001fe8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001fea:	688a      	ldr	r2, [r1, #8]
 8001fec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ff0:	4322      	orrs	r2, r4
 8001ff2:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001ff4:	065a      	lsls	r2, r3, #25
 8001ff6:	d50f      	bpl.n	8002018 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001ff8:	6801      	ldr	r1, [r0, #0]
 8001ffa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001ffc:	684a      	ldr	r2, [r1, #4]
 8001ffe:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002002:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002004:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002008:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800200a:	d105      	bne.n	8002018 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800200c:	684a      	ldr	r2, [r1, #4]
 800200e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002010:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002014:	4322      	orrs	r2, r4
 8002016:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002018:	061b      	lsls	r3, r3, #24
 800201a:	d506      	bpl.n	800202a <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800201c:	6802      	ldr	r2, [r0, #0]
 800201e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002020:	6853      	ldr	r3, [r2, #4]
 8002022:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002026:	430b      	orrs	r3, r1
 8002028:	6053      	str	r3, [r2, #4]
 800202a:	bd10      	pop	{r4, pc}

0800202c <UART_WaitOnFlagUntilTimeout>:
{
 800202c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002030:	9d06      	ldr	r5, [sp, #24]
 8002032:	4604      	mov	r4, r0
 8002034:	460f      	mov	r7, r1
 8002036:	4616      	mov	r6, r2
 8002038:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800203a:	6821      	ldr	r1, [r4, #0]
 800203c:	69ca      	ldr	r2, [r1, #28]
 800203e:	ea37 0302 	bics.w	r3, r7, r2
 8002042:	bf0c      	ite	eq
 8002044:	2201      	moveq	r2, #1
 8002046:	2200      	movne	r2, #0
 8002048:	42b2      	cmp	r2, r6
 800204a:	d002      	beq.n	8002052 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800204c:	2000      	movs	r0, #0
}
 800204e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002052:	1c6b      	adds	r3, r5, #1
 8002054:	d0f2      	beq.n	800203c <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002056:	b99d      	cbnz	r5, 8002080 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002058:	6823      	ldr	r3, [r4, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002060:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	f022 0201 	bic.w	r2, r2, #1
 8002068:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800206a:	2320      	movs	r3, #32
 800206c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002070:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002074:	2300      	movs	r3, #0
 8002076:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800207a:	2003      	movs	r0, #3
 800207c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002080:	f7fe f924 	bl	80002cc <HAL_GetTick>
 8002084:	eba0 0008 	sub.w	r0, r0, r8
 8002088:	4285      	cmp	r5, r0
 800208a:	d2d6      	bcs.n	800203a <UART_WaitOnFlagUntilTimeout+0xe>
 800208c:	e7e4      	b.n	8002058 <UART_WaitOnFlagUntilTimeout+0x2c>

0800208e <UART_CheckIdleState>:
{
 800208e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002090:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002092:	2600      	movs	r6, #0
 8002094:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002096:	f7fe f919 	bl	80002cc <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800209a:	6823      	ldr	r3, [r4, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80020a0:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80020a2:	d417      	bmi.n	80020d4 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80020a4:	6823      	ldr	r3, [r4, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	075b      	lsls	r3, r3, #29
 80020aa:	d50a      	bpl.n	80020c2 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80020ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	2200      	movs	r2, #0
 80020b4:	462b      	mov	r3, r5
 80020b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80020ba:	4620      	mov	r0, r4
 80020bc:	f7ff ffb6 	bl	800202c <UART_WaitOnFlagUntilTimeout>
 80020c0:	b9a0      	cbnz	r0, 80020ec <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 80020c2:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80020c4:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80020c6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80020ca:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80020ce:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 80020d2:	e00c      	b.n	80020ee <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80020d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	4632      	mov	r2, r6
 80020dc:	4603      	mov	r3, r0
 80020de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80020e2:	4620      	mov	r0, r4
 80020e4:	f7ff ffa2 	bl	800202c <UART_WaitOnFlagUntilTimeout>
 80020e8:	2800      	cmp	r0, #0
 80020ea:	d0db      	beq.n	80020a4 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80020ec:	2003      	movs	r0, #3
}
 80020ee:	b002      	add	sp, #8
 80020f0:	bd70      	pop	{r4, r5, r6, pc}

080020f2 <HAL_UART_Init>:
{
 80020f2:	b510      	push	{r4, lr}
  if(huart == NULL)
 80020f4:	4604      	mov	r4, r0
 80020f6:	b360      	cbz	r0, 8002152 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80020f8:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80020fc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002100:	b91b      	cbnz	r3, 800210a <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002102:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002106:	f000 fe33 	bl	8002d70 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800210a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800210c:	2324      	movs	r3, #36	; 0x24
 800210e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002112:	6813      	ldr	r3, [r2, #0]
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800211a:	4620      	mov	r0, r4
 800211c:	f7ff fe8c 	bl	8001e38 <UART_SetConfig>
 8002120:	2801      	cmp	r0, #1
 8002122:	d016      	beq.n	8002152 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002124:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002126:	b113      	cbz	r3, 800212e <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002128:	4620      	mov	r0, r4
 800212a:	f7ff ff2b 	bl	8001f84 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002136:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800213e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002146:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002148:	601a      	str	r2, [r3, #0]
}
 800214a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800214e:	f7ff bf9e 	b.w	800208e <UART_CheckIdleState>
}
 8002152:	2001      	movs	r0, #1
 8002154:	bd10      	pop	{r4, pc}

08002156 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002156:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800215a:	2b21      	cmp	r3, #33	; 0x21
 800215c:	d127      	bne.n	80021ae <UART_Transmit_IT+0x58>
  {
    if(huart->TxXferCount == 0U)
 800215e:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002162:	6802      	ldr	r2, [r0, #0]
 8002164:	b29b      	uxth	r3, r3
 8002166:	b94b      	cbnz	r3, 800217c <UART_Transmit_IT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002168:	6811      	ldr	r1, [r2, #0]
 800216a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800216e:	6011      	str	r1, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002170:	6811      	ldr	r1, [r2, #0]
 8002172:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002176:	6011      	str	r1, [r2, #0]
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
      }
      huart->TxXferCount--;

      return HAL_OK;
 8002178:	2000      	movs	r0, #0
 800217a:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800217c:	6883      	ldr	r3, [r0, #8]
 800217e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002182:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002184:	d10e      	bne.n	80021a4 <UART_Transmit_IT+0x4e>
 8002186:	6901      	ldr	r1, [r0, #16]
 8002188:	b961      	cbnz	r1, 80021a4 <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800218a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800218e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002192:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8002194:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8002196:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800219a:	3b01      	subs	r3, #1
 800219c:	b29b      	uxth	r3, r3
 800219e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 80021a2:	e7e9      	b.n	8002178 <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80021a4:	1c59      	adds	r1, r3, #1
 80021a6:	64c1      	str	r1, [r0, #76]	; 0x4c
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	8513      	strh	r3, [r2, #40]	; 0x28
 80021ac:	e7f3      	b.n	8002196 <UART_Transmit_IT+0x40>
    }
  }
  else
  {
    return HAL_BUSY;
 80021ae:	2002      	movs	r0, #2
  }
}
 80021b0:	4770      	bx	lr

080021b2 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80021b2:	6801      	ldr	r1, [r0, #0]
{
 80021b4:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80021b6:	680b      	ldr	r3, [r1, #0]
 80021b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021bc:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80021be:	2320      	movs	r3, #32
 80021c0:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 80021c4:	f7ff fe2a 	bl	8001e1c <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80021c8:	2000      	movs	r0, #0
 80021ca:	bd08      	pop	{r3, pc}

080021cc <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80021cc:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80021d0:	2b22      	cmp	r3, #34	; 0x22
{
 80021d2:	b510      	push	{r4, lr}
 80021d4:	6803      	ldr	r3, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80021d6:	d129      	bne.n	800222c <UART_Receive_IT+0x60>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80021d8:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021da:	6883      	ldr	r3, [r0, #8]
  uint16_t  uhMask = huart->Mask;
 80021dc:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021e4:	ea02 0201 	and.w	r2, r2, r1
 80021e8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80021ea:	d11b      	bne.n	8002224 <UART_Receive_IT+0x58>
 80021ec:	6901      	ldr	r1, [r0, #16]
 80021ee:	b9c9      	cbnz	r1, 8002224 <UART_Receive_IT+0x58>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 80021f0:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2U;
 80021f4:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 80021f6:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 80021fa:	3c01      	subs	r4, #1
 80021fc:	b2a4      	uxth	r4, r4
 80021fe:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 8002202:	b96c      	cbnz	r4, 8002220 <UART_Receive_IT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002204:	6803      	ldr	r3, [r0, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800220c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	f022 0201 	bic.w	r2, r2, #1
 8002214:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002216:	2320      	movs	r3, #32
 8002218:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 800221c:	f7ff fdff 	bl	8001e1e <HAL_UART_RxCpltCallback>

      return HAL_OK;
    }

    return HAL_OK;
 8002220:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 8002222:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002224:	1c59      	adds	r1, r3, #1
 8002226:	6541      	str	r1, [r0, #84]	; 0x54
 8002228:	701a      	strb	r2, [r3, #0]
 800222a:	e7e4      	b.n	80021f6 <UART_Receive_IT+0x2a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	f042 0208 	orr.w	r2, r2, #8
 8002232:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 8002234:	2002      	movs	r0, #2
 8002236:	bd10      	pop	{r4, pc}

08002238 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002238:	6802      	ldr	r2, [r0, #0]
 800223a:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800223c:	6811      	ldr	r1, [r2, #0]
{
 800223e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002240:	f013 050f 	ands.w	r5, r3, #15
{
 8002244:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002246:	d107      	bne.n	8002258 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002248:	069e      	lsls	r6, r3, #26
 800224a:	d505      	bpl.n	8002258 <HAL_UART_IRQHandler+0x20>
 800224c:	068e      	lsls	r6, r1, #26
 800224e:	d503      	bpl.n	8002258 <HAL_UART_IRQHandler+0x20>
}
 8002250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002254:	f7ff bfba 	b.w	80021cc <UART_Receive_IT>
  cr3its = READ_REG(huart->Instance->CR3);
 8002258:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 800225a:	2d00      	cmp	r5, #0
 800225c:	d05c      	beq.n	8002318 <HAL_UART_IRQHandler+0xe0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800225e:	f010 0501 	ands.w	r5, r0, #1
 8002262:	d102      	bne.n	800226a <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002264:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002268:	d056      	beq.n	8002318 <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800226a:	07d8      	lsls	r0, r3, #31
 800226c:	d507      	bpl.n	800227e <HAL_UART_IRQHandler+0x46>
 800226e:	05ce      	lsls	r6, r1, #23
 8002270:	d505      	bpl.n	800227e <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002272:	2001      	movs	r0, #1
 8002274:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002276:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002278:	f040 0001 	orr.w	r0, r0, #1
 800227c:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800227e:	0798      	lsls	r0, r3, #30
 8002280:	d506      	bpl.n	8002290 <HAL_UART_IRQHandler+0x58>
 8002282:	b12d      	cbz	r5, 8002290 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8002284:	2002      	movs	r0, #2
 8002286:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002288:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800228a:	f040 0004 	orr.w	r0, r0, #4
 800228e:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002290:	075e      	lsls	r6, r3, #29
 8002292:	d506      	bpl.n	80022a2 <HAL_UART_IRQHandler+0x6a>
 8002294:	b12d      	cbz	r5, 80022a2 <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002296:	2004      	movs	r0, #4
 8002298:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800229a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800229c:	f040 0002 	orr.w	r0, r0, #2
 80022a0:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80022a2:	0718      	lsls	r0, r3, #28
 80022a4:	d507      	bpl.n	80022b6 <HAL_UART_IRQHandler+0x7e>
 80022a6:	068e      	lsls	r6, r1, #26
 80022a8:	d400      	bmi.n	80022ac <HAL_UART_IRQHandler+0x74>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80022aa:	b125      	cbz	r5, 80022b6 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80022ac:	2008      	movs	r0, #8
 80022ae:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022b0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80022b2:	4302      	orrs	r2, r0
 80022b4:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022b6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80022b8:	2a00      	cmp	r2, #0
 80022ba:	d050      	beq.n	800235e <HAL_UART_IRQHandler+0x126>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022bc:	0698      	lsls	r0, r3, #26
 80022be:	d504      	bpl.n	80022ca <HAL_UART_IRQHandler+0x92>
 80022c0:	068a      	lsls	r2, r1, #26
 80022c2:	d502      	bpl.n	80022ca <HAL_UART_IRQHandler+0x92>
        UART_Receive_IT(huart);
 80022c4:	4620      	mov	r0, r4
 80022c6:	f7ff ff81 	bl	80021cc <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80022ca:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80022cc:	071b      	lsls	r3, r3, #28
        UART_EndRxTransfer(huart);
 80022ce:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80022d0:	d404      	bmi.n	80022dc <HAL_UART_IRQHandler+0xa4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80022d2:	6823      	ldr	r3, [r4, #0]
 80022d4:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80022d6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80022da:	d019      	beq.n	8002310 <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 80022dc:	f7ff fd2c 	bl	8001d38 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022e0:	6823      	ldr	r3, [r4, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	0656      	lsls	r6, r2, #25
 80022e6:	d50f      	bpl.n	8002308 <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022e8:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80022ea:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022f0:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80022f2:	b148      	cbz	r0, 8002308 <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80022f4:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <HAL_UART_IRQHandler+0x128>)
 80022f6:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022f8:	f7fe fcef 	bl	8000cda <HAL_DMA_Abort_IT>
 80022fc:	b378      	cbz	r0, 800235e <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80022fe:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 8002300:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002304:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002306:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002308:	4620      	mov	r0, r4
 800230a:	f7ff fd89 	bl	8001e20 <HAL_UART_ErrorCallback>
 800230e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002310:	f7ff fd86 	bl	8001e20 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002314:	66e5      	str	r5, [r4, #108]	; 0x6c
 8002316:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8002318:	02dd      	lsls	r5, r3, #11
 800231a:	d50e      	bpl.n	800233a <HAL_UART_IRQHandler+0x102>
 800231c:	0246      	lsls	r6, r0, #9
 800231e:	d50c      	bpl.n	800233a <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8002320:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002324:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8002326:	2320      	movs	r3, #32
 8002328:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    HAL_UARTEx_WakeupCallback(huart);
 800232c:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 800232e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 8002332:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8002336:	f000 b815 	b.w	8002364 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800233a:	061d      	lsls	r5, r3, #24
 800233c:	d506      	bpl.n	800234c <HAL_UART_IRQHandler+0x114>
 800233e:	0608      	lsls	r0, r1, #24
 8002340:	d504      	bpl.n	800234c <HAL_UART_IRQHandler+0x114>
    UART_Transmit_IT(huart);
 8002342:	4620      	mov	r0, r4
}
 8002344:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 8002348:	f7ff bf05 	b.w	8002156 <UART_Transmit_IT>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800234c:	065a      	lsls	r2, r3, #25
 800234e:	d506      	bpl.n	800235e <HAL_UART_IRQHandler+0x126>
 8002350:	064b      	lsls	r3, r1, #25
 8002352:	d504      	bpl.n	800235e <HAL_UART_IRQHandler+0x126>
    UART_EndTransmit_IT(huart);
 8002354:	4620      	mov	r0, r4
}
 8002356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_EndTransmit_IT(huart);
 800235a:	f7ff bf2a 	b.w	80021b2 <UART_EndTransmit_IT>
 800235e:	bd70      	pop	{r4, r5, r6, pc}
 8002360:	08001e23 	.word	0x08001e23

08002364 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart: UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002364:	4770      	bx	lr
	...

08002368 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002368:	b510      	push	{r4, lr}
  ADC_MultiModeTypeDef multimode;
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 800236a:	4829      	ldr	r0, [pc, #164]	; (8002410 <MX_ADC1_Init+0xa8>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800236c:	2400      	movs	r4, #0
 800236e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 8002372:	2204      	movs	r2, #4
{
 8002374:	b08a      	sub	sp, #40	; 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002376:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800237a:	2301      	movs	r3, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800237c:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800237e:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002380:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002382:	6244      	str	r4, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002384:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002386:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002388:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 4;
 800238a:	6202      	str	r2, [r0, #32]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800238c:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800238e:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002390:	6184      	str	r4, [r0, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002392:	6384      	str	r4, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002394:	f7fe f846 	bl	8000424 <HAL_ADC_Init>
 8002398:	b108      	cbz	r0, 800239e <MX_ADC1_Init+0x36>
  {
    Error_Handler();
 800239a:	f000 fba7 	bl	8002aec <Error_Handler>
  }

    /**Configure the ADC multi-mode 
    */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800239e:	a90a      	add	r1, sp, #40	; 0x28
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80023a0:	481b      	ldr	r0, [pc, #108]	; (8002410 <MX_ADC1_Init+0xa8>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80023a2:	f841 4d24 	str.w	r4, [r1, #-36]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80023a6:	f7fe fb3d 	bl	8000a24 <HAL_ADCEx_MultiModeConfigChannel>
 80023aa:	b108      	cbz	r0, 80023b0 <MX_ADC1_Init+0x48>
  {
    Error_Handler();
 80023ac:	f000 fb9e 	bl	8002aec <Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 80023b0:	2301      	movs	r3, #1
 80023b2:	9304      	str	r3, [sp, #16]
  sConfig.Rank = 1;
 80023b4:	9305      	str	r3, [sp, #20]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 80023b6:	2206      	movs	r2, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80023b8:	2300      	movs	r3, #0
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023ba:	a904      	add	r1, sp, #16
 80023bc:	4814      	ldr	r0, [pc, #80]	; (8002410 <MX_ADC1_Init+0xa8>)
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80023be:	9307      	str	r3, [sp, #28]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 80023c0:	9206      	str	r2, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80023c2:	9308      	str	r3, [sp, #32]
  sConfig.Offset = 0;
 80023c4:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023c6:	f7fe f9ad 	bl	8000724 <HAL_ADC_ConfigChannel>
 80023ca:	b108      	cbz	r0, 80023d0 <MX_ADC1_Init+0x68>
  {
    Error_Handler();
 80023cc:	f000 fb8e 	bl	8002aec <Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_2;
 80023d0:	2302      	movs	r3, #2
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023d2:	a904      	add	r1, sp, #16
 80023d4:	480e      	ldr	r0, [pc, #56]	; (8002410 <MX_ADC1_Init+0xa8>)
  sConfig.Channel = ADC_CHANNEL_2;
 80023d6:	9304      	str	r3, [sp, #16]
  sConfig.Rank = 2;
 80023d8:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023da:	f7fe f9a3 	bl	8000724 <HAL_ADC_ConfigChannel>
 80023de:	b108      	cbz	r0, 80023e4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80023e0:	f000 fb84 	bl	8002aec <Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_3;
 80023e4:	2303      	movs	r3, #3
  sConfig.Rank = 3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023e6:	a904      	add	r1, sp, #16
 80023e8:	4809      	ldr	r0, [pc, #36]	; (8002410 <MX_ADC1_Init+0xa8>)
  sConfig.Channel = ADC_CHANNEL_3;
 80023ea:	9304      	str	r3, [sp, #16]
  sConfig.Rank = 3;
 80023ec:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023ee:	f7fe f999 	bl	8000724 <HAL_ADC_ConfigChannel>
 80023f2:	b108      	cbz	r0, 80023f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80023f4:	f000 fb7a 	bl	8002aec <Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_4;
 80023f8:	2304      	movs	r3, #4
  sConfig.Rank = 4;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023fa:	a904      	add	r1, sp, #16
 80023fc:	4804      	ldr	r0, [pc, #16]	; (8002410 <MX_ADC1_Init+0xa8>)
  sConfig.Channel = ADC_CHANNEL_4;
 80023fe:	9304      	str	r3, [sp, #16]
  sConfig.Rank = 4;
 8002400:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002402:	f7fe f98f 	bl	8000724 <HAL_ADC_ConfigChannel>
 8002406:	b108      	cbz	r0, 800240c <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8002408:	f000 fb70 	bl	8002aec <Error_Handler>
  }

}
 800240c:	b00a      	add	sp, #40	; 0x28
 800240e:	bd10      	pop	{r4, pc}
 8002410:	200002d0 	.word	0x200002d0

08002414 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8002414:	b510      	push	{r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc2.Instance = ADC2;
 8002416:	4823      	ldr	r0, [pc, #140]	; (80024a4 <MX_ADC2_Init+0x90>)
 8002418:	4b23      	ldr	r3, [pc, #140]	; (80024a8 <MX_ADC2_Init+0x94>)
 800241a:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800241c:	2401      	movs	r4, #1
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800241e:	2300      	movs	r3, #0
  hadc2.Init.ContinuousConvMode = ENABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 4;
 8002420:	2204      	movs	r2, #4
{
 8002422:	b086      	sub	sp, #24
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002424:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002426:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002428:	6104      	str	r4, [r0, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800242a:	61c4      	str	r4, [r0, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800242c:	6243      	str	r3, [r0, #36]	; 0x24
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800242e:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 4;
 8002430:	6202      	str	r2, [r0, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002432:	6344      	str	r4, [r0, #52]	; 0x34
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002434:	6142      	str	r2, [r0, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002436:	6183      	str	r3, [r0, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002438:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800243a:	f7fd fff3 	bl	8000424 <HAL_ADC_Init>
 800243e:	b108      	cbz	r0, 8002444 <MX_ADC2_Init+0x30>
  {
    Error_Handler();
 8002440:	f000 fb54 	bl	8002aec <Error_Handler>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = 1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002444:	2300      	movs	r3, #0
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8002446:	2206      	movs	r2, #6
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002448:	4669      	mov	r1, sp
 800244a:	4816      	ldr	r0, [pc, #88]	; (80024a4 <MX_ADC2_Init+0x90>)
  sConfig.Channel = ADC_CHANNEL_1;
 800244c:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 1;
 800244e:	9401      	str	r4, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002450:	9303      	str	r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8002452:	9202      	str	r2, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002454:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8002456:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002458:	f7fe f964 	bl	8000724 <HAL_ADC_ConfigChannel>
 800245c:	b108      	cbz	r0, 8002462 <MX_ADC2_Init+0x4e>
  {
    Error_Handler();
 800245e:	f000 fb45 	bl	8002aec <Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_2;
 8002462:	2302      	movs	r3, #2
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002464:	4669      	mov	r1, sp
 8002466:	480f      	ldr	r0, [pc, #60]	; (80024a4 <MX_ADC2_Init+0x90>)
  sConfig.Channel = ADC_CHANNEL_2;
 8002468:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 800246a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800246c:	f7fe f95a 	bl	8000724 <HAL_ADC_ConfigChannel>
 8002470:	b108      	cbz	r0, 8002476 <MX_ADC2_Init+0x62>
  {
    Error_Handler();
 8002472:	f000 fb3b 	bl	8002aec <Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_3;
 8002476:	2303      	movs	r3, #3
  sConfig.Rank = 3;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002478:	4669      	mov	r1, sp
 800247a:	480a      	ldr	r0, [pc, #40]	; (80024a4 <MX_ADC2_Init+0x90>)
  sConfig.Channel = ADC_CHANNEL_3;
 800247c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 800247e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002480:	f7fe f950 	bl	8000724 <HAL_ADC_ConfigChannel>
 8002484:	b108      	cbz	r0, 800248a <MX_ADC2_Init+0x76>
  {
    Error_Handler();
 8002486:	f000 fb31 	bl	8002aec <Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_4;
 800248a:	2304      	movs	r3, #4
  sConfig.Rank = 4;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800248c:	4669      	mov	r1, sp
 800248e:	4805      	ldr	r0, [pc, #20]	; (80024a4 <MX_ADC2_Init+0x90>)
  sConfig.Channel = ADC_CHANNEL_4;
 8002490:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 4;
 8002492:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002494:	f7fe f946 	bl	8000724 <HAL_ADC_ConfigChannel>
 8002498:	b108      	cbz	r0, 800249e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800249a:	f000 fb27 	bl	8002aec <Error_Handler>
  }

}
 800249e:	b006      	add	sp, #24
 80024a0:	bd10      	pop	{r4, pc}
 80024a2:	bf00      	nop
 80024a4:	2000027c 	.word	0x2000027c
 80024a8:	50000100 	.word	0x50000100

080024ac <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80024ac:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 80024ae:	6803      	ldr	r3, [r0, #0]
 80024b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 80024b4:	b088      	sub	sp, #32
 80024b6:	4605      	mov	r5, r0
  if(adcHandle->Instance==ADC1)
 80024b8:	d136      	bne.n	8002528 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80024ba:	4a33      	ldr	r2, [pc, #204]	; (8002588 <HAL_ADC_MspInit+0xdc>)
 80024bc:	6813      	ldr	r3, [r2, #0]
 80024be:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80024c0:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80024c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80024c4:	d109      	bne.n	80024da <HAL_ADC_MspInit+0x2e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80024c6:	4b31      	ldr	r3, [pc, #196]	; (800258c <HAL_ADC_MspInit+0xe0>)
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024ce:	615a      	str	r2, [r3, #20]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d6:	9301      	str	r3, [sp, #4]
 80024d8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
 80024da:	4c2d      	ldr	r4, [pc, #180]	; (8002590 <HAL_ADC_MspInit+0xe4>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80024dc:	230f      	movs	r3, #15
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80024e0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024e4:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024ea:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ee:	f7fe fc61 	bl	8000db4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80024f2:	4b28      	ldr	r3, [pc, #160]	; (8002594 <HAL_ADC_MspInit+0xe8>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024f4:	60a6      	str	r6, [r4, #8]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024f6:	e884 0048 	stmia.w	r4, {r3, r6}
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	60e3      	str	r3, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002502:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002508:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800250a:	2320      	movs	r3, #32
 800250c:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800250e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002512:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002514:	4620      	mov	r0, r4
 8002516:	f7fe fb6f 	bl	8000bf8 <HAL_DMA_Init>
 800251a:	b108      	cbz	r0, 8002520 <HAL_ADC_MspInit+0x74>
    {
      Error_Handler();
 800251c:	f000 fae6 	bl	8002aec <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8002520:	63ec      	str	r4, [r5, #60]	; 0x3c
 8002522:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8002524:	b008      	add	sp, #32
 8002526:	bd70      	pop	{r4, r5, r6, pc}
  else if(adcHandle->Instance==ADC2)
 8002528:	4a1b      	ldr	r2, [pc, #108]	; (8002598 <HAL_ADC_MspInit+0xec>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d1fa      	bne.n	8002524 <HAL_ADC_MspInit+0x78>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800252e:	4a16      	ldr	r2, [pc, #88]	; (8002588 <HAL_ADC_MspInit+0xdc>)
 8002530:	6813      	ldr	r3, [r2, #0]
 8002532:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002534:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002536:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002538:	d109      	bne.n	800254e <HAL_ADC_MspInit+0xa2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800253a:	4b14      	ldr	r3, [pc, #80]	; (800258c <HAL_ADC_MspInit+0xe0>)
 800253c:	695a      	ldr	r2, [r3, #20]
 800253e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002542:	615a      	str	r2, [r3, #20]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254a:	9302      	str	r3, [sp, #8]
 800254c:	9b02      	ldr	r3, [sp, #8]
    hdma_adc2.Instance = DMA1_Channel2;
 800254e:	4c13      	ldr	r4, [pc, #76]	; (800259c <HAL_ADC_MspInit+0xf0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002550:	23f0      	movs	r3, #240	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002554:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002556:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002558:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800255e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002562:	f7fe fc27 	bl	8000db4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8002566:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <HAL_ADC_MspInit+0xf4>)
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002568:	60a6      	str	r6, [r4, #8]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800256a:	e884 0048 	stmia.w	r4, {r3, r6}
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	60e3      	str	r3, [r4, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002572:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002576:	6123      	str	r3, [r4, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800257c:	6163      	str	r3, [r4, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800257e:	2320      	movs	r3, #32
 8002580:	61a3      	str	r3, [r4, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002586:	e7c4      	b.n	8002512 <HAL_ADC_MspInit+0x66>
 8002588:	20000234 	.word	0x20000234
 800258c:	40021000 	.word	0x40021000
 8002590:	20000324 	.word	0x20000324
 8002594:	40020008 	.word	0x40020008
 8002598:	50000100 	.word	0x50000100
 800259c:	20000368 	.word	0x20000368
 80025a0:	4002001c 	.word	0x4002001c

080025a4 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025a4:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <MX_DMA_Init+0x3c>)
{
 80025a6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025a8:	695a      	ldr	r2, [r3, #20]
 80025aa:	f042 0201 	orr.w	r2, r2, #1
 80025ae:	615a      	str	r2, [r3, #20]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80025b8:	2200      	movs	r2, #0
 80025ba:	2102      	movs	r1, #2
 80025bc:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025be:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80025c0:	f7fe fab2 	bl	8000b28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80025c4:	200b      	movs	r0, #11
 80025c6:	f7fe fae3 	bl	8000b90 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 3, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2103      	movs	r1, #3
 80025ce:	200c      	movs	r0, #12
 80025d0:	f7fe faaa 	bl	8000b28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80025d4:	200c      	movs	r0, #12
 80025d6:	f7fe fadb 	bl	8000b90 <HAL_NVIC_EnableIRQ>

}
 80025da:	b003      	add	sp, #12
 80025dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80025e0:	40021000 	.word	0x40021000

080025e4 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025e4:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <MX_GPIO_Init+0x80>)
{
 80025e6:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025e8:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A2_Pin|B2_Pin|LD3_Pin|B1_Pin 
 80025ea:	4d1f      	ldr	r5, [pc, #124]	; (8002668 <MX_GPIO_Init+0x84>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025ec:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80025f0:	615a      	str	r2, [r3, #20]
 80025f2:	695a      	ldr	r2, [r3, #20]
{
 80025f4:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025f6:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80025fa:	9200      	str	r2, [sp, #0]
 80025fc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fe:	695a      	ldr	r2, [r3, #20]
 8002600:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002604:	615a      	str	r2, [r3, #20]
 8002606:	695a      	ldr	r2, [r3, #20]
 8002608:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800260c:	9201      	str	r2, [sp, #4]
 800260e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002610:	695a      	ldr	r2, [r3, #20]
 8002612:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002616:	615a      	str	r2, [r3, #20]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  HAL_GPIO_WritePin(GPIOB, A2_Pin|B2_Pin|LD3_Pin|B1_Pin 
 800261e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002620:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, A2_Pin|B2_Pin|LD3_Pin|B1_Pin 
 8002622:	4628      	mov	r0, r5
 8002624:	21cb      	movs	r1, #203	; 0xcb
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002626:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, A2_Pin|B2_Pin|LD3_Pin|B1_Pin 
 8002628:	f7fe fc7e 	bl	8000f28 <HAL_GPIO_WritePin>
                          |A1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = A2_Pin|B2_Pin|LD3_Pin|B1_Pin 
 800262c:	23cb      	movs	r3, #203	; 0xcb
                          |A1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = A2_Pin|B2_Pin|LD3_Pin|B1_Pin 
 8002630:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002632:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002634:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002636:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002638:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263e:	f7fe fbb9 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002646:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002648:	2302      	movs	r3, #2
 800264a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800264c:	2303      	movs	r3, #3
 800264e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002650:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002652:	2307      	movs	r3, #7
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800265a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800265c:	f7fe fbaa 	bl	8000db4 <HAL_GPIO_Init>

}
 8002660:	b009      	add	sp, #36	; 0x24
 8002662:	bd30      	pop	{r4, r5, pc}
 8002664:	40021000 	.word	0x40021000
 8002668:	48000400 	.word	0x48000400

0800266c <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800266c:	b510      	push	{r4, lr}
 800266e:	b096      	sub	sp, #88	; 0x58
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002670:	2301      	movs	r3, #1
 8002672:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002674:	2310      	movs	r3, #16
 8002676:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002678:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800267a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800267c:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800267e:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002680:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002684:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002686:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002688:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800268a:	f7fe fc57 	bl	8000f3c <HAL_RCC_OscConfig>
 800268e:	b100      	cbz	r0, 8002692 <SystemClock_Config+0x26>
 8002690:	e7fe      	b.n	8002690 <SystemClock_Config+0x24>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002692:	230f      	movs	r3, #15
 8002694:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002696:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002698:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800269c:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800269e:	4621      	mov	r1, r4
 80026a0:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026a2:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026a4:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026a6:	f7fe feed 	bl	8001484 <HAL_RCC_ClockConfig>
 80026aa:	b100      	cbz	r0, 80026ae <SystemClock_Config+0x42>
 80026ac:	e7fe      	b.n	80026ac <SystemClock_Config+0x40>
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 80026ae:	f241 0381 	movw	r3, #4225	; 0x1081
 80026b2:	9306      	str	r3, [sp, #24]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80026b4:	9008      	str	r0, [sp, #32]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80026b6:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80026ba:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026bc:	a806      	add	r0, sp, #24
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80026be:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026c0:	f7fe ffd8 	bl	8001674 <HAL_RCCEx_PeriphCLKConfig>
 80026c4:	4604      	mov	r4, r0
 80026c6:	b100      	cbz	r0, 80026ca <SystemClock_Config+0x5e>
 80026c8:	e7fe      	b.n	80026c8 <SystemClock_Config+0x5c>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80026ca:	f7fe ff9d 	bl	8001608 <HAL_RCC_GetHCLKFreq>
 80026ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80026d6:	f7fe fa67 	bl	8000ba8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80026da:	2004      	movs	r0, #4
 80026dc:	f7fe fa7a 	bl	8000bd4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80026e0:	4622      	mov	r2, r4
 80026e2:	4621      	mov	r1, r4
 80026e4:	f04f 30ff 	mov.w	r0, #4294967295
 80026e8:	f7fe fa1e 	bl	8000b28 <HAL_NVIC_SetPriority>
}
 80026ec:	b016      	add	sp, #88	; 0x58
 80026ee:	bd10      	pop	{r4, pc}

080026f0 <main>:
{
 80026f0:	b508      	push	{r3, lr}
  HAL_Init();
 80026f2:	f7fd fdd1 	bl	8000298 <HAL_Init>
  SystemClock_Config();
 80026f6:	f7ff ffb9 	bl	800266c <SystemClock_Config>
  MX_GPIO_Init();
 80026fa:	f7ff ff73 	bl	80025e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80026fe:	f7ff ff51 	bl	80025a4 <MX_DMA_Init>
  MX_ADC1_Init();
 8002702:	f7ff fe31 	bl	8002368 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002706:	f7ff fe85 	bl	8002414 <MX_ADC2_Init>
  MX_TIM1_Init();
 800270a:	f000 fab9 	bl	8002c80 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800270e:	f000 fb11 	bl	8002d34 <MX_USART1_UART_Init>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) czujniki1, 4);
 8002712:	2204      	movs	r2, #4
 8002714:	4938      	ldr	r1, [pc, #224]	; (80027f8 <main+0x108>)
 8002716:	4839      	ldr	r0, [pc, #228]	; (80027fc <main+0x10c>)
	  HAL_UART_Receive_IT(&huart1, &Received, 1);
 8002718:	4e39      	ldr	r6, [pc, #228]	; (8002800 <main+0x110>)
		  i=0;
 800271a:	4c3a      	ldr	r4, [pc, #232]	; (8002804 <main+0x114>)
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) czujniki1, 4);
 800271c:	f7fd ff7a 	bl	8000614 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t *) czujniki2, 4);
 8002720:	2204      	movs	r2, #4
 8002722:	4939      	ldr	r1, [pc, #228]	; (8002808 <main+0x118>)
 8002724:	4839      	ldr	r0, [pc, #228]	; (800280c <main+0x11c>)
 8002726:	f7fd ff75 	bl	8000614 <HAL_ADC_Start_DMA>
  HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, GPIO_PIN_SET);
 800272a:	2201      	movs	r2, #1
 800272c:	2180      	movs	r1, #128	; 0x80
 800272e:	4838      	ldr	r0, [pc, #224]	; (8002810 <main+0x120>)
 8002730:	f7fe fbfa 	bl	8000f28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, GPIO_PIN_SET);
 8002734:	2201      	movs	r2, #1
 8002736:	2140      	movs	r1, #64	; 0x40
 8002738:	4835      	ldr	r0, [pc, #212]	; (8002810 <main+0x120>)
 800273a:	f7fe fbf5 	bl	8000f28 <HAL_GPIO_WritePin>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800273e:	2104      	movs	r1, #4
 8002740:	4834      	ldr	r0, [pc, #208]	; (8002814 <main+0x124>)
 8002742:	f7ff fa01 	bl	8001b48 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8002746:	2108      	movs	r1, #8
 8002748:	4832      	ldr	r0, [pc, #200]	; (8002814 <main+0x124>)
 800274a:	f7ff f9fd 	bl	8001b48 <HAL_TIMEx_PWMN_Start>
	  HAL_UART_Receive_IT(&huart1, &Received, 1);
 800274e:	2201      	movs	r2, #1
 8002750:	4631      	mov	r1, r6
 8002752:	4831      	ldr	r0, [pc, #196]	; (8002818 <main+0x128>)
 8002754:	4d31      	ldr	r5, [pc, #196]	; (800281c <main+0x12c>)
 8002756:	f7ff fb1d 	bl	8001d94 <HAL_UART_Receive_IT>
	  switch(atoi(&Received)){
 800275a:	4630      	mov	r0, r6
 800275c:	f000 fb5f 	bl	8002e1e <atoi>
 8002760:	2807      	cmp	r0, #7
 8002762:	d807      	bhi.n	8002774 <main+0x84>
 8002764:	e8df f000 	tbb	[pc, r0]
 8002768:	2e121004 	.word	0x2e121004
 800276c:	433f3b36 	.word	0x433f3b36
	  		  k=0;
 8002770:	2300      	movs	r3, #0
	  		  k=1;
 8002772:	602b      	str	r3, [r5, #0]
	  if(k==0)
 8002774:	6829      	ldr	r1, [r5, #0]
 8002776:	2900      	cmp	r1, #0
 8002778:	d162      	bne.n	8002840 <main+0x150>
		  TIM1->CCR2 = 0;
 800277a:	4b29      	ldr	r3, [pc, #164]	; (8002820 <main+0x130>)
 800277c:	6399      	str	r1, [r3, #56]	; 0x38
		  TIM1->CCR3 = 0;
 800277e:	63d9      	str	r1, [r3, #60]	; 0x3c
	  HAL_Delay(10);
 8002780:	200a      	movs	r0, #10
 8002782:	f7fd fda9 	bl	80002d8 <HAL_Delay>
	  HAL_UART_Receive_IT(&huart1, &Received, 1);
 8002786:	e7e2      	b.n	800274e <main+0x5e>
	  		  k=1;
 8002788:	2301      	movs	r3, #1
 800278a:	e7f2      	b.n	8002772 <main+0x82>
	  		  predkosc=predkosc+10;
 800278c:	4b25      	ldr	r3, [pc, #148]	; (8002824 <main+0x134>)
	  		  motor_initial=motor_initial+10;
 800278e:	4926      	ldr	r1, [pc, #152]	; (8002828 <main+0x138>)
	  		  predkosc=predkosc+10;
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	320a      	adds	r2, #10
 8002794:	601a      	str	r2, [r3, #0]
	  		  motor_initial=motor_initial+10;
 8002796:	680b      	ldr	r3, [r1, #0]
 8002798:	330a      	adds	r3, #10
 800279a:	600b      	str	r3, [r1, #0]
	  		  size = sprintf(data, "%d. \n\r",predkosc);
 800279c:	4923      	ldr	r1, [pc, #140]	; (800282c <main+0x13c>)
 800279e:	4824      	ldr	r0, [pc, #144]	; (8002830 <main+0x140>)
 80027a0:	f000 fb66 	bl	8002e70 <siprintf>
 80027a4:	4b23      	ldr	r3, [pc, #140]	; (8002834 <main+0x144>)
	  		  HAL_UART_Transmit_IT(&huart1, data, size);
 80027a6:	4922      	ldr	r1, [pc, #136]	; (8002830 <main+0x140>)
	  		  size = sprintf(data, "%d. \n\r",predkosc);
 80027a8:	b282      	uxth	r2, r0
	  		  HAL_UART_Transmit_IT(&huart1, data, size);
 80027aa:	481b      	ldr	r0, [pc, #108]	; (8002818 <main+0x128>)
	  		  size = sprintf(data, "%d. \n\r",predkosc);
 80027ac:	801a      	strh	r2, [r3, #0]
	  		  HAL_UART_Transmit_IT(&huart1, data, size);
 80027ae:	f7ff fad0 	bl	8001d52 <HAL_UART_Transmit_IT>
	  		  if(k==0)
 80027b2:	682b      	ldr	r3, [r5, #0]
 80027b4:	b913      	cbnz	r3, 80027bc <main+0xcc>
	  			  Received='0';
 80027b6:	2330      	movs	r3, #48	; 0x30
	  			  Received='1';
 80027b8:	7033      	strb	r3, [r6, #0]
 80027ba:	e7db      	b.n	8002774 <main+0x84>
	  		  if(k==1)
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d1df      	bne.n	8002780 <main+0x90>
	  			  Received='1';
 80027c0:	2331      	movs	r3, #49	; 0x31
 80027c2:	e7f9      	b.n	80027b8 <main+0xc8>
	  		  predkosc=predkosc-10;
 80027c4:	4b17      	ldr	r3, [pc, #92]	; (8002824 <main+0x134>)
	  		  motor_initial=motor_initial-10;
 80027c6:	4918      	ldr	r1, [pc, #96]	; (8002828 <main+0x138>)
	  		  predkosc=predkosc-10;
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	3a0a      	subs	r2, #10
 80027cc:	601a      	str	r2, [r3, #0]
	  		  motor_initial=motor_initial-10;
 80027ce:	680b      	ldr	r3, [r1, #0]
 80027d0:	3b0a      	subs	r3, #10
 80027d2:	e7e2      	b.n	800279a <main+0xaa>
	  		  Kp=Kp+1;
 80027d4:	4b18      	ldr	r3, [pc, #96]	; (8002838 <main+0x148>)
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	3201      	adds	r2, #1
	  		 Kd=Kd-50;
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	e7de      	b.n	800279c <main+0xac>
	  		  Kp=Kp-1;
 80027de:	4b16      	ldr	r3, [pc, #88]	; (8002838 <main+0x148>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	3a01      	subs	r2, #1
 80027e4:	e7f9      	b.n	80027da <main+0xea>
	  		  Kd=Kd+50;
 80027e6:	4b15      	ldr	r3, [pc, #84]	; (800283c <main+0x14c>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	3232      	adds	r2, #50	; 0x32
 80027ec:	e7f5      	b.n	80027da <main+0xea>
	  		 Kd=Kd-50;
 80027ee:	4b13      	ldr	r3, [pc, #76]	; (800283c <main+0x14c>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	3a32      	subs	r2, #50	; 0x32
 80027f4:	e7f1      	b.n	80027da <main+0xea>
 80027f6:	bf00      	nop
 80027f8:	200003ae 	.word	0x200003ae
 80027fc:	200002d0 	.word	0x200002d0
 8002800:	200003ac 	.word	0x200003ac
 8002804:	2000024c 	.word	0x2000024c
 8002808:	200003e8 	.word	0x200003e8
 800280c:	2000027c 	.word	0x2000027c
 8002810:	48000400 	.word	0x48000400
 8002814:	200003f0 	.word	0x200003f0
 8002818:	20000430 	.word	0x20000430
 800281c:	20000250 	.word	0x20000250
 8002820:	40012c00 	.word	0x40012c00
 8002824:	20000038 	.word	0x20000038
 8002828:	20000034 	.word	0x20000034
 800282c:	08003870 	.word	0x08003870
 8002830:	200003b6 	.word	0x200003b6
 8002834:	20000264 	.word	0x20000264
 8002838:	20000004 	.word	0x20000004
 800283c:	20000000 	.word	0x20000000
	  if(k==1)
 8002840:	2901      	cmp	r1, #1
 8002842:	d19d      	bne.n	8002780 <main+0x90>
	      if(czujniki1[2]>treshold)
 8002844:	4a93      	ldr	r2, [pc, #588]	; (8002a94 <main+0x3a4>)
 8002846:	4894      	ldr	r0, [pc, #592]	; (8002a98 <main+0x3a8>)
 8002848:	6812      	ldr	r2, [r2, #0]
 800284a:	8885      	ldrh	r5, [r0, #4]
	      error=0;
 800284c:	eddf 6a93 	vldr	s13, [pc, #588]	; 8002a9c <main+0x3ac>
		  i=0;
 8002850:	2300      	movs	r3, #0
 8002852:	6023      	str	r3, [r4, #0]
	      error=0;
 8002854:	4b92      	ldr	r3, [pc, #584]	; (8002aa0 <main+0x3b0>)
	      if(czujniki1[2]>treshold)
 8002856:	4295      	cmp	r5, r2
	      error=0;
 8002858:	edc3 6a00 	vstr	s13, [r3]
	      if(czujniki1[2]>treshold)
 800285c:	dd0c      	ble.n	8002878 <main+0x188>
	    	  error+=W[1];
 800285e:	4d91      	ldr	r5, [pc, #580]	; (8002aa4 <main+0x3b4>)
	  		  i++;
 8002860:	6021      	str	r1, [r4, #0]
	    	  error+=W[1];
 8002862:	edd5 7a01 	vldr	s15, [r5, #4]
	  		  e=W[0];
 8002866:	4990      	ldr	r1, [pc, #576]	; (8002aa8 <main+0x3b8>)
 8002868:	682d      	ldr	r5, [r5, #0]
 800286a:	600d      	str	r5, [r1, #0]
	    	  error+=W[1];
 800286c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002870:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002874:	edc3 7a00 	vstr	s15, [r3]
	  	  if(czujniki2[3]>treshold)
 8002878:	498c      	ldr	r1, [pc, #560]	; (8002aac <main+0x3bc>)
 800287a:	88cd      	ldrh	r5, [r1, #6]
 800287c:	42aa      	cmp	r2, r5
 800287e:	da0d      	bge.n	800289c <main+0x1ac>
	  		  error+=W[2];
 8002880:	4d88      	ldr	r5, [pc, #544]	; (8002aa4 <main+0x3b4>)
 8002882:	ed93 7a00 	vldr	s14, [r3]
 8002886:	edd5 7a02 	vldr	s15, [r5, #8]
	  		  i++;
 800288a:	6825      	ldr	r5, [r4, #0]
	  		  error+=W[2];
 800288c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  		  i++;
 8002890:	3501      	adds	r5, #1
	  		  error+=W[2];
 8002892:	ee77 7a87 	vadd.f32	s15, s15, s14
	  		  i++;
 8002896:	6025      	str	r5, [r4, #0]
	  		  error+=W[2];
 8002898:	edc3 7a00 	vstr	s15, [r3]
	  	  if(czujniki2[2]>treshold)
 800289c:	888d      	ldrh	r5, [r1, #4]
 800289e:	42aa      	cmp	r2, r5
 80028a0:	da0d      	bge.n	80028be <main+0x1ce>
	  		  error+=W[3];
 80028a2:	4d80      	ldr	r5, [pc, #512]	; (8002aa4 <main+0x3b4>)
 80028a4:	ed93 7a00 	vldr	s14, [r3]
 80028a8:	edd5 7a03 	vldr	s15, [r5, #12]
	  		  i++;
 80028ac:	6825      	ldr	r5, [r4, #0]
	  		  error+=W[3];
 80028ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  		  i++;
 80028b2:	3501      	adds	r5, #1
	  		  error+=W[3];
 80028b4:	ee77 7a87 	vadd.f32	s15, s15, s14
	  		  i++;
 80028b8:	6025      	str	r5, [r4, #0]
	  		  error+=W[3];
 80028ba:	edc3 7a00 	vstr	s15, [r3]
	  	  if(czujniki2[1]>treshold)
 80028be:	884d      	ldrh	r5, [r1, #2]
 80028c0:	42aa      	cmp	r2, r5
 80028c2:	da0d      	bge.n	80028e0 <main+0x1f0>
	  		  error+=W[4];
 80028c4:	4d77      	ldr	r5, [pc, #476]	; (8002aa4 <main+0x3b4>)
 80028c6:	ed93 7a00 	vldr	s14, [r3]
 80028ca:	edd5 7a04 	vldr	s15, [r5, #16]
	  		  i++;
 80028ce:	6825      	ldr	r5, [r4, #0]
	  		  error+=W[4];
 80028d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  		  i++;
 80028d4:	3501      	adds	r5, #1
	  		  error+=W[4];
 80028d6:	ee77 7a87 	vadd.f32	s15, s15, s14
	  		  i++;
 80028da:	6025      	str	r5, [r4, #0]
	  		  error+=W[4];
 80028dc:	edc3 7a00 	vstr	s15, [r3]
	  	  if(czujniki2[0]>treshold)
 80028e0:	8809      	ldrh	r1, [r1, #0]
 80028e2:	428a      	cmp	r2, r1
 80028e4:	da0d      	bge.n	8002902 <main+0x212>
	  		  error+=W[5];
 80028e6:	496f      	ldr	r1, [pc, #444]	; (8002aa4 <main+0x3b4>)
 80028e8:	ed93 7a00 	vldr	s14, [r3]
 80028ec:	edd1 7a05 	vldr	s15, [r1, #20]
	  		  i++;
 80028f0:	6821      	ldr	r1, [r4, #0]
	  		  error+=W[5];
 80028f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  		  i++;
 80028f6:	3101      	adds	r1, #1
	  		  error+=W[5];
 80028f8:	ee77 7a87 	vadd.f32	s15, s15, s14
	  		  i++;
 80028fc:	6021      	str	r1, [r4, #0]
	  		  error+=W[5];
 80028fe:	edc3 7a00 	vstr	s15, [r3]
	  	  if(czujniki1[3]>treshold)
 8002902:	88c1      	ldrh	r1, [r0, #6]
 8002904:	428a      	cmp	r2, r1
 8002906:	da0d      	bge.n	8002924 <main+0x234>
	  		  error+=W[6];
 8002908:	4966      	ldr	r1, [pc, #408]	; (8002aa4 <main+0x3b4>)
 800290a:	ed93 7a00 	vldr	s14, [r3]
 800290e:	edd1 7a06 	vldr	s15, [r1, #24]
	  		  i++;
 8002912:	6821      	ldr	r1, [r4, #0]
	  		  error+=W[6];
 8002914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  		  i++;
 8002918:	3101      	adds	r1, #1
	  		  error+=W[6];
 800291a:	ee77 7a87 	vadd.f32	s15, s15, s14
	  		  i++;
 800291e:	6021      	str	r1, [r4, #0]
	  		  error+=W[6];
 8002920:	edc3 7a00 	vstr	s15, [r3]
	  	  if(czujniki1[1]>treshold)
 8002924:	8841      	ldrh	r1, [r0, #2]
 8002926:	428a      	cmp	r2, r1
 8002928:	da0d      	bge.n	8002946 <main+0x256>
	  		  error+=W[7];
 800292a:	495e      	ldr	r1, [pc, #376]	; (8002aa4 <main+0x3b4>)
 800292c:	ed93 7a00 	vldr	s14, [r3]
 8002930:	edd1 7a07 	vldr	s15, [r1, #28]
	  		  i++;
 8002934:	6821      	ldr	r1, [r4, #0]
	  		  error+=W[7];
 8002936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  		  i++;
 800293a:	3101      	adds	r1, #1
	  		  error+=W[7];
 800293c:	ee77 7a87 	vadd.f32	s15, s15, s14
	  		  i++;
 8002940:	6021      	str	r1, [r4, #0]
	  		  error+=W[7];
 8002942:	edc3 7a00 	vstr	s15, [r3]
	  	  if(czujniki1[0]>treshold)
 8002946:	8801      	ldrh	r1, [r0, #0]
 8002948:	428a      	cmp	r2, r1
 800294a:	da10      	bge.n	800296e <main+0x27e>
	  		  error+=W[8];
 800294c:	4955      	ldr	r1, [pc, #340]	; (8002aa4 <main+0x3b4>)
	  		  i++;
 800294e:	6822      	ldr	r2, [r4, #0]
	  		  error+=W[8];
 8002950:	edd1 7a08 	vldr	s15, [r1, #32]
 8002954:	ed93 7a00 	vldr	s14, [r3]
	  		  e=W[9];
 8002958:	6a49      	ldr	r1, [r1, #36]	; 0x24
	  		  error+=W[8];
 800295a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  		  i++;
 800295e:	3201      	adds	r2, #1
	  		  error+=W[8];
 8002960:	ee77 7a87 	vadd.f32	s15, s15, s14
	  		  i++;
 8002964:	6022      	str	r2, [r4, #0]
	  		  e=W[9];
 8002966:	4a50      	ldr	r2, [pc, #320]	; (8002aa8 <main+0x3b8>)
	  		  error+=W[8];
 8002968:	edc3 7a00 	vstr	s15, [r3]
	  		  e=W[9];
 800296c:	6011      	str	r1, [r2, #0]
	  	  if(i!=0) error=error/i;
 800296e:	6822      	ldr	r2, [r4, #0]
 8002970:	2a00      	cmp	r2, #0
 8002972:	f000 8087 	beq.w	8002a84 <main+0x394>
 8002976:	ee07 2a90 	vmov	s15, r2
 800297a:	ed93 6a00 	vldr	s12, [r3]
 800297e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002982:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8002986:	ed83 7a00 	vstr	s14, [r3]
	  	  uchyb=error;
 800298a:	ed93 7a00 	vldr	s14, [r3]
 800298e:	4b48      	ldr	r3, [pc, #288]	; (8002ab0 <main+0x3c0>)
	  	  D = uchyb - poprzedni_uchyb;
 8002990:	4a48      	ldr	r2, [pc, #288]	; (8002ab4 <main+0x3c4>)
	  	  uchyb=error;
 8002992:	ed83 7a00 	vstr	s14, [r3]
	  	  previous_error=error;
 8002996:	4b48      	ldr	r3, [pc, #288]	; (8002ab8 <main+0x3c8>)
	  	  if (motor_l>predkosc) motor_l=predkosc;
 8002998:	4848      	ldr	r0, [pc, #288]	; (8002abc <main+0x3cc>)
	  	  previous_error=error;
 800299a:	ed83 7a00 	vstr	s14, [r3]
	  	  P = uchyb;
 800299e:	4b48      	ldr	r3, [pc, #288]	; (8002ac0 <main+0x3d0>)
	  	  motor_l = motor_initial-PD_value;
 80029a0:	4948      	ldr	r1, [pc, #288]	; (8002ac4 <main+0x3d4>)
	  	  P = uchyb;
 80029a2:	ed83 7a00 	vstr	s14, [r3]
	  	  D = uchyb - poprzedni_uchyb;
 80029a6:	4b48      	ldr	r3, [pc, #288]	; (8002ac8 <main+0x3d8>)
 80029a8:	edd3 7a00 	vldr	s15, [r3]
	  	  poprzedni_uchyb=uchyb;
 80029ac:	ed83 7a00 	vstr	s14, [r3]
	  	  D = uchyb - poprzedni_uchyb;
 80029b0:	ee37 6a67 	vsub.f32	s12, s14, s15
	  	  motor_l = motor_initial-PD_value;
 80029b4:	4b45      	ldr	r3, [pc, #276]	; (8002acc <main+0x3dc>)
	  	  D = uchyb - poprzedni_uchyb;
 80029b6:	ed82 6a00 	vstr	s12, [r2]
	  	  PD_value = (Kp*P) + (Kd*D);
 80029ba:	4a45      	ldr	r2, [pc, #276]	; (8002ad0 <main+0x3e0>)
	  	  motor_l = motor_initial-PD_value;
 80029bc:	681b      	ldr	r3, [r3, #0]
	  	  PD_value = (Kp*P) + (Kd*D);
 80029be:	edd2 7a00 	vldr	s15, [r2]
 80029c2:	4a44      	ldr	r2, [pc, #272]	; (8002ad4 <main+0x3e4>)
 80029c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029c8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80029cc:	ed92 6a00 	vldr	s12, [r2]
 80029d0:	4a41      	ldr	r2, [pc, #260]	; (8002ad8 <main+0x3e8>)
 80029d2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80029d6:	eee7 7a06 	vfma.f32	s15, s14, s12
	  	  motor_l = motor_initial-PD_value;
 80029da:	ee07 3a10 	vmov	s14, r3
 80029de:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
	  	  PD_value = (Kp*P) + (Kd*D);
 80029e2:	edc2 7a00 	vstr	s15, [r2]
	  	  motor_l = motor_initial-PD_value;
 80029e6:	ee36 7a67 	vsub.f32	s14, s12, s15
	  	  motor_p = motor_initial+PD_value;
 80029ea:	ee77 7a86 	vadd.f32	s15, s15, s12
	  	  if (motor_l>predkosc) motor_l=predkosc;
 80029ee:	ed90 6a00 	vldr	s12, [r0]
	  	  if (motor_l>(dyf*motor_initial+rdyf)) motor_l=dyf*motor_initial+rdyf;
 80029f2:	483a      	ldr	r0, [pc, #232]	; (8002adc <main+0x3ec>)
	  	  motor_l = motor_initial-PD_value;
 80029f4:	ed81 7a00 	vstr	s14, [r1]
	  	  if (motor_l>(dyf*motor_initial+rdyf)) motor_l=dyf*motor_initial+rdyf;
 80029f8:	6805      	ldr	r5, [r0, #0]
 80029fa:	4839      	ldr	r0, [pc, #228]	; (8002ae0 <main+0x3f0>)
	  	  motor_p = motor_initial+PD_value;
 80029fc:	4a39      	ldr	r2, [pc, #228]	; (8002ae4 <main+0x3f4>)
	  	  if (motor_l>(dyf*motor_initial+rdyf)) motor_l=dyf*motor_initial+rdyf;
 80029fe:	6800      	ldr	r0, [r0, #0]
	  	  motor_p = motor_initial+PD_value;
 8002a00:	edc2 7a00 	vstr	s15, [r2]
	  	  if (motor_l>predkosc) motor_l=predkosc;
 8002a04:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	  	  if (motor_l>(dyf*motor_initial+rdyf)) motor_l=dyf*motor_initial+rdyf;
 8002a08:	fb05 0303 	mla	r3, r5, r3, r0
	  	  if (motor_l>predkosc) motor_l=predkosc;
 8002a0c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8002a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  	  if (motor_l>(dyf*motor_initial+rdyf)) motor_l=dyf*motor_initial+rdyf;
 8002a14:	ee07 3a10 	vmov	s14, r3
	  	  if (motor_l>predkosc) motor_l=predkosc;
 8002a18:	bfc8      	it	gt
 8002a1a:	ed81 6a00 	vstrgt	s12, [r1]
	  	  if (motor_l>(dyf*motor_initial+rdyf)) motor_l=dyf*motor_initial+rdyf;
 8002a1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002a22:	edd1 5a00 	vldr	s11, [r1]
	  	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002a26:	4830      	ldr	r0, [pc, #192]	; (8002ae8 <main+0x3f8>)
	  	  if (motor_l>(dyf*motor_initial+rdyf)) motor_l=dyf*motor_initial+rdyf;
 8002a28:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8002a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a30:	bf48      	it	mi
 8002a32:	ed81 7a00 	vstrmi	s14, [r1]
	  	  if (motor_l<0) motor_l=0;
 8002a36:	edd1 5a00 	vldr	s11, [r1]
 8002a3a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8002a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  	  if (motor_p>predkosc) motor_p=predkosc;
 8002a42:	eef4 7ac6 	vcmpe.f32	s15, s12
	  	  if (motor_l<0) motor_l=0;
 8002a46:	bf48      	it	mi
 8002a48:	edc1 6a00 	vstrmi	s13, [r1]
	  	  if (motor_p>predkosc) motor_p=predkosc;
 8002a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a50:	bfc8      	it	gt
 8002a52:	ed82 6a00 	vstrgt	s12, [r2]
	  	  if (motor_p>(dyf*motor_initial+rdyf)) motor_p=dyf*motor_initial+rdyf;
 8002a56:	edd2 7a00 	vldr	s15, [r2]
 8002a5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a62:	bf48      	it	mi
 8002a64:	ed82 7a00 	vstrmi	s14, [r2]
	  	  if (motor_p<0) motor_p=0;
 8002a68:	edd2 7a00 	vldr	s15, [r2]
 8002a6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002a74:	f04f 0108 	mov.w	r1, #8
	  	  if (motor_p<0) motor_p=0;
 8002a78:	bf48      	it	mi
 8002a7a:	edc2 6a00 	vstrmi	s13, [r2]
	  	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002a7e:	f7fe fa58 	bl	8000f32 <HAL_GPIO_TogglePin>
 8002a82:	e67d      	b.n	8002780 <main+0x90>
	  		  error=e;
 8002a84:	4a08      	ldr	r2, [pc, #32]	; (8002aa8 <main+0x3b8>)
 8002a86:	edd2 7a00 	vldr	s15, [r2]
 8002a8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a8e:	edc3 7a00 	vstr	s15, [r3]
 8002a92:	e77a      	b.n	800298a <main+0x29a>
 8002a94:	20000040 	.word	0x20000040
 8002a98:	200003ae 	.word	0x200003ae
 8002a9c:	00000000 	.word	0x00000000
 8002aa0:	20000248 	.word	0x20000248
 8002aa4:	20000008 	.word	0x20000008
 8002aa8:	20000244 	.word	0x20000244
 8002aac:	200003e8 	.word	0x200003e8
 8002ab0:	20000268 	.word	0x20000268
 8002ab4:	20000238 	.word	0x20000238
 8002ab8:	20000260 	.word	0x20000260
 8002abc:	20000038 	.word	0x20000038
 8002ac0:	2000023c 	.word	0x2000023c
 8002ac4:	20000254 	.word	0x20000254
 8002ac8:	2000025c 	.word	0x2000025c
 8002acc:	20000034 	.word	0x20000034
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	20000004 	.word	0x20000004
 8002ad8:	20000240 	.word	0x20000240
 8002adc:	20000030 	.word	0x20000030
 8002ae0:	2000003c 	.word	0x2000003c
 8002ae4:	20000258 	.word	0x20000258
 8002ae8:	48000400 	.word	0x48000400

08002aec <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8002aec:	e7fe      	b.n	8002aec <Error_Handler>
	...

08002af0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af0:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <HAL_MspInit+0x78>)
{
 8002af2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af4:	699a      	ldr	r2, [r3, #24]
 8002af6:	f042 0201 	orr.w	r2, r2, #1
 8002afa:	619a      	str	r2, [r3, #24]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b04:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b06:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b08:	f7fd fffc 	bl	8000b04 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	4611      	mov	r1, r2
 8002b10:	f06f 000b 	mvn.w	r0, #11
 8002b14:	f7fe f808 	bl	8000b28 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	f06f 000a 	mvn.w	r0, #10
 8002b20:	f7fe f802 	bl	8000b28 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002b24:	2200      	movs	r2, #0
 8002b26:	4611      	mov	r1, r2
 8002b28:	f06f 0009 	mvn.w	r0, #9
 8002b2c:	f7fd fffc 	bl	8000b28 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002b30:	2200      	movs	r2, #0
 8002b32:	4611      	mov	r1, r2
 8002b34:	f06f 0004 	mvn.w	r0, #4
 8002b38:	f7fd fff6 	bl	8000b28 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	4611      	mov	r1, r2
 8002b40:	f06f 0003 	mvn.w	r0, #3
 8002b44:	f7fd fff0 	bl	8000b28 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002b48:	2200      	movs	r2, #0
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	f06f 0001 	mvn.w	r0, #1
 8002b50:	f7fd ffea 	bl	8000b28 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002b54:	2200      	movs	r2, #0
 8002b56:	4611      	mov	r1, r2
 8002b58:	f04f 30ff 	mov.w	r0, #4294967295
 8002b5c:	f7fd ffe4 	bl	8000b28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b60:	b003      	add	sp, #12
 8002b62:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b66:	bf00      	nop
 8002b68:	40021000 	.word	0x40021000

08002b6c <SVC_Handler>:
 8002b6c:	4770      	bx	lr

08002b6e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002b6e:	4770      	bx	lr

08002b70 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002b70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b72:	f7fd fba3 	bl	80002bc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002b7a:	f7fe b838 	b.w	8000bee <HAL_SYSTICK_IRQHandler>
	...

08002b80 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b80:	4801      	ldr	r0, [pc, #4]	; (8002b88 <DMA1_Channel1_IRQHandler+0x8>)
 8002b82:	f7fe b8ce 	b.w	8000d22 <HAL_DMA_IRQHandler>
 8002b86:	bf00      	nop
 8002b88:	20000324 	.word	0x20000324

08002b8c <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002b8c:	4801      	ldr	r0, [pc, #4]	; (8002b94 <DMA1_Channel2_IRQHandler+0x8>)
 8002b8e:	f7fe b8c8 	b.w	8000d22 <HAL_DMA_IRQHandler>
 8002b92:	bf00      	nop
 8002b94:	20000368 	.word	0x20000368

08002b98 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b98:	4801      	ldr	r0, [pc, #4]	; (8002ba0 <USART1_IRQHandler+0x8>)
 8002b9a:	f7ff bb4d 	b.w	8002238 <HAL_UART_IRQHandler>
 8002b9e:	bf00      	nop
 8002ba0:	20000430 	.word	0x20000430

08002ba4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ba4:	4915      	ldr	r1, [pc, #84]	; (8002bfc <SystemInit+0x58>)
 8002ba6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002baa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002bb2:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <SystemInit+0x5c>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002bbc:	6858      	ldr	r0, [r3, #4]
 8002bbe:	4a11      	ldr	r2, [pc, #68]	; (8002c04 <SystemInit+0x60>)
 8002bc0:	4002      	ands	r2, r0
 8002bc2:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002bca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002bce:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bd6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002bde:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be2:	f022 020f 	bic.w	r2, r2, #15
 8002be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002be8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002bea:	4a07      	ldr	r2, [pc, #28]	; (8002c08 <SystemInit+0x64>)
 8002bec:	4002      	ands	r2, r0
 8002bee:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002bf4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002bf8:	608b      	str	r3, [r1, #8]
 8002bfa:	4770      	bx	lr
 8002bfc:	e000ed00 	.word	0xe000ed00
 8002c00:	40021000 	.word	0x40021000
 8002c04:	f87fc00c 	.word	0xf87fc00c
 8002c08:	ff00fccc 	.word	0xff00fccc

08002c0c <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 8002c0c:	6802      	ldr	r2, [r0, #0]
 8002c0e:	4b08      	ldr	r3, [pc, #32]	; (8002c30 <HAL_TIM_PWM_MspInit+0x24>)
 8002c10:	429a      	cmp	r2, r3
{
 8002c12:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM1)
 8002c14:	d10a      	bne.n	8002c2c <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c16:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8002c1a:	699a      	ldr	r2, [r3, #24]
 8002c1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c20:	619a      	str	r2, [r3, #24]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c28:	9301      	str	r3, [sp, #4]
 8002c2a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002c2c:	b002      	add	sp, #8
 8002c2e:	4770      	bx	lr
 8002c30:	40012c00 	.word	0x40012c00

08002c34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c34:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 8002c36:	6802      	ldr	r2, [r0, #0]
 8002c38:	4b0f      	ldr	r3, [pc, #60]	; (8002c78 <HAL_TIM_MspPostInit+0x44>)
 8002c3a:	429a      	cmp	r2, r3
{
 8002c3c:	b086      	sub	sp, #24
  if(timHandle->Instance==TIM1)
 8002c3e:	d118      	bne.n	8002c72 <HAL_TIM_MspPostInit+0x3e>
    PF0 / OSC_IN     ------> TIM1_CH3N
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c42:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c44:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002c46:	2506      	movs	r5, #6
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c48:	a901      	add	r1, sp, #4
 8002c4a:	480c      	ldr	r0, [pc, #48]	; (8002c7c <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c4c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4e:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c52:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002c54:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c56:	f7fe f8ad 	bl	8000db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c5e:	a901      	add	r1, sp, #4
 8002c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c64:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c66:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c68:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002c6c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6e:	f7fe f8a1 	bl	8000db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c72:	b006      	add	sp, #24
 8002c74:	bd70      	pop	{r4, r5, r6, pc}
 8002c76:	bf00      	nop
 8002c78:	40012c00 	.word	0x40012c00
 8002c7c:	48001400 	.word	0x48001400

08002c80 <MX_TIM1_Init>:
{
 8002c80:	b510      	push	{r4, lr}
  htim1.Instance = TIM1;
 8002c82:	482a      	ldr	r0, [pc, #168]	; (8002d2c <MX_TIM1_Init+0xac>)
  htim1.Init.Prescaler = 63;
 8002c84:	4b2a      	ldr	r3, [pc, #168]	; (8002d30 <MX_TIM1_Init+0xb0>)
 8002c86:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 8002c8a:	e880 1008 	stmia.w	r0, {r3, ip}
  htim1.Init.Period = 999;
 8002c8e:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c92:	2400      	movs	r4, #0
{
 8002c94:	b096      	sub	sp, #88	; 0x58
  htim1.Init.Period = 999;
 8002c96:	60c3      	str	r3, [r0, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c98:	2380      	movs	r3, #128	; 0x80
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c9a:	6084      	str	r4, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c9c:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c9e:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ca0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002ca2:	f7fe fddf 	bl	8001864 <HAL_TIM_PWM_Init>
 8002ca6:	b108      	cbz	r0, 8002cac <MX_TIM1_Init+0x2c>
    Error_Handler();
 8002ca8:	f7ff ff20 	bl	8002aec <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002cac:	a901      	add	r1, sp, #4
 8002cae:	481f      	ldr	r0, [pc, #124]	; (8002d2c <MX_TIM1_Init+0xac>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cb0:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002cb2:	9402      	str	r4, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cb4:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002cb6:	f7fe ffdf 	bl	8001c78 <HAL_TIMEx_MasterConfigSynchronization>
 8002cba:	b108      	cbz	r0, 8002cc0 <MX_TIM1_Init+0x40>
    Error_Handler();
 8002cbc:	f7ff ff16 	bl	8002aec <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cc0:	2360      	movs	r3, #96	; 0x60
 8002cc2:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002cc4:	2204      	movs	r2, #4
  sConfigOC.Pulse = 0;
 8002cc6:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002cc8:	a904      	add	r1, sp, #16
 8002cca:	4818      	ldr	r0, [pc, #96]	; (8002d2c <MX_TIM1_Init+0xac>)
  sConfigOC.Pulse = 0;
 8002ccc:	9305      	str	r3, [sp, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cce:	9306      	str	r3, [sp, #24]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002cd0:	9307      	str	r3, [sp, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cd2:	9308      	str	r3, [sp, #32]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002cd4:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002cd6:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002cd8:	f7fe ff47 	bl	8001b6a <HAL_TIM_PWM_ConfigChannel>
 8002cdc:	b108      	cbz	r0, 8002ce2 <MX_TIM1_Init+0x62>
    Error_Handler();
 8002cde:	f7ff ff05 	bl	8002aec <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ce2:	2208      	movs	r2, #8
 8002ce4:	a904      	add	r1, sp, #16
 8002ce6:	4811      	ldr	r0, [pc, #68]	; (8002d2c <MX_TIM1_Init+0xac>)
 8002ce8:	f7fe ff3f 	bl	8001b6a <HAL_TIM_PWM_ConfigChannel>
 8002cec:	b108      	cbz	r0, 8002cf2 <MX_TIM1_Init+0x72>
    Error_Handler();
 8002cee:	f7ff fefd 	bl	8002aec <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002cf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002cf6:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002cf8:	9210      	str	r2, [sp, #64]	; 0x40
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002cfa:	a90b      	add	r1, sp, #44	; 0x2c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002cfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d00:	480a      	ldr	r0, [pc, #40]	; (8002d2c <MX_TIM1_Init+0xac>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d02:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d04:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d06:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d08:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d0a:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002d0c:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002d0e:	9312      	str	r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002d10:	9213      	str	r2, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002d12:	9314      	str	r3, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d14:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d16:	f7fe ffd1 	bl	8001cbc <HAL_TIMEx_ConfigBreakDeadTime>
 8002d1a:	b108      	cbz	r0, 8002d20 <MX_TIM1_Init+0xa0>
    Error_Handler();
 8002d1c:	f7ff fee6 	bl	8002aec <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8002d20:	4802      	ldr	r0, [pc, #8]	; (8002d2c <MX_TIM1_Init+0xac>)
 8002d22:	f7ff ff87 	bl	8002c34 <HAL_TIM_MspPostInit>
}
 8002d26:	b016      	add	sp, #88	; 0x58
 8002d28:	bd10      	pop	{r4, pc}
 8002d2a:	bf00      	nop
 8002d2c:	200003f0 	.word	0x200003f0
 8002d30:	40012c00 	.word	0x40012c00

08002d34 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d34:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8002d36:	480c      	ldr	r0, [pc, #48]	; (8002d68 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 9600;
 8002d38:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <MX_USART1_UART_Init+0x38>)
 8002d3a:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
 8002d3e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d42:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d44:	2300      	movs	r3, #0
 8002d46:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d48:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d4a:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d4c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d4e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d50:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d52:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d54:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d56:	f7ff f9cc 	bl	80020f2 <HAL_UART_Init>
 8002d5a:	b118      	cbz	r0, 8002d64 <MX_USART1_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8002d5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002d60:	f7ff bec4 	b.w	8002aec <Error_Handler>
 8002d64:	bd08      	pop	{r3, pc}
 8002d66:	bf00      	nop
 8002d68:	20000430 	.word	0x20000430
 8002d6c:	40013800 	.word	0x40013800

08002d70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8002d72:	6802      	ldr	r2, [r0, #0]
 8002d74:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <HAL_UART_MspInit+0x58>)
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d122      	bne.n	8002dc0 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d7a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7e:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d86:	619a      	str	r2, [r3, #24]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8002d92:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d96:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002da0:	2303      	movs	r3, #3
 8002da2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002da8:	2307      	movs	r3, #7
 8002daa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dac:	f7fe f802 	bl	8000db4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002db0:	2025      	movs	r0, #37	; 0x25
 8002db2:	2200      	movs	r2, #0
 8002db4:	2105      	movs	r1, #5
 8002db6:	f7fd feb7 	bl	8000b28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002dba:	2025      	movs	r0, #37	; 0x25
 8002dbc:	f7fd fee8 	bl	8000b90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002dc0:	b007      	add	sp, #28
 8002dc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dc6:	bf00      	nop
 8002dc8:	40013800 	.word	0x40013800

08002dcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e04 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002dd0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002dd2:	e003      	b.n	8002ddc <LoopCopyDataInit>

08002dd4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002dd6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002dd8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002dda:	3104      	adds	r1, #4

08002ddc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002ddc:	480b      	ldr	r0, [pc, #44]	; (8002e0c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002dde:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002de0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002de2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002de4:	d3f6      	bcc.n	8002dd4 <CopyDataInit>
	ldr	r2, =_sbss
 8002de6:	4a0b      	ldr	r2, [pc, #44]	; (8002e14 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002de8:	e002      	b.n	8002df0 <LoopFillZerobss>

08002dea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002dea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002dec:	f842 3b04 	str.w	r3, [r2], #4

08002df0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002df0:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <LoopForever+0x16>)
	cmp	r2, r3
 8002df2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002df4:	d3f9      	bcc.n	8002dea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002df6:	f7ff fed5 	bl	8002ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dfa:	f000 f815 	bl	8002e28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002dfe:	f7ff fc77 	bl	80026f0 <main>

08002e02 <LoopForever>:

LoopForever:
    b LoopForever
 8002e02:	e7fe      	b.n	8002e02 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e04:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8002e08:	080039d8 	.word	0x080039d8
	ldr	r0, =_sdata
 8002e0c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002e10:	20000218 	.word	0x20000218
	ldr	r2, =_sbss
 8002e14:	20000218 	.word	0x20000218
	ldr	r3, = _ebss
 8002e18:	200004a4 	.word	0x200004a4

08002e1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e1c:	e7fe      	b.n	8002e1c <ADC1_2_IRQHandler>

08002e1e <atoi>:
 8002e1e:	220a      	movs	r2, #10
 8002e20:	2100      	movs	r1, #0
 8002e22:	f000 b8c9 	b.w	8002fb8 <strtol>
	...

08002e28 <__libc_init_array>:
 8002e28:	b570      	push	{r4, r5, r6, lr}
 8002e2a:	4e0d      	ldr	r6, [pc, #52]	; (8002e60 <__libc_init_array+0x38>)
 8002e2c:	4c0d      	ldr	r4, [pc, #52]	; (8002e64 <__libc_init_array+0x3c>)
 8002e2e:	1ba4      	subs	r4, r4, r6
 8002e30:	10a4      	asrs	r4, r4, #2
 8002e32:	2500      	movs	r5, #0
 8002e34:	42a5      	cmp	r5, r4
 8002e36:	d109      	bne.n	8002e4c <__libc_init_array+0x24>
 8002e38:	4e0b      	ldr	r6, [pc, #44]	; (8002e68 <__libc_init_array+0x40>)
 8002e3a:	4c0c      	ldr	r4, [pc, #48]	; (8002e6c <__libc_init_array+0x44>)
 8002e3c:	f000 fcfa 	bl	8003834 <_init>
 8002e40:	1ba4      	subs	r4, r4, r6
 8002e42:	10a4      	asrs	r4, r4, #2
 8002e44:	2500      	movs	r5, #0
 8002e46:	42a5      	cmp	r5, r4
 8002e48:	d105      	bne.n	8002e56 <__libc_init_array+0x2e>
 8002e4a:	bd70      	pop	{r4, r5, r6, pc}
 8002e4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e50:	4798      	blx	r3
 8002e52:	3501      	adds	r5, #1
 8002e54:	e7ee      	b.n	8002e34 <__libc_init_array+0xc>
 8002e56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e5a:	4798      	blx	r3
 8002e5c:	3501      	adds	r5, #1
 8002e5e:	e7f2      	b.n	8002e46 <__libc_init_array+0x1e>
 8002e60:	080039d0 	.word	0x080039d0
 8002e64:	080039d0 	.word	0x080039d0
 8002e68:	080039d0 	.word	0x080039d0
 8002e6c:	080039d4 	.word	0x080039d4

08002e70 <siprintf>:
 8002e70:	b40e      	push	{r1, r2, r3}
 8002e72:	b500      	push	{lr}
 8002e74:	b09c      	sub	sp, #112	; 0x70
 8002e76:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002e7a:	ab1d      	add	r3, sp, #116	; 0x74
 8002e7c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002e80:	9002      	str	r0, [sp, #8]
 8002e82:	9006      	str	r0, [sp, #24]
 8002e84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e88:	480a      	ldr	r0, [pc, #40]	; (8002eb4 <siprintf+0x44>)
 8002e8a:	9104      	str	r1, [sp, #16]
 8002e8c:	9107      	str	r1, [sp, #28]
 8002e8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e96:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002e9a:	6800      	ldr	r0, [r0, #0]
 8002e9c:	9301      	str	r3, [sp, #4]
 8002e9e:	a902      	add	r1, sp, #8
 8002ea0:	f000 f910 	bl	80030c4 <_svfiprintf_r>
 8002ea4:	9b02      	ldr	r3, [sp, #8]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	701a      	strb	r2, [r3, #0]
 8002eaa:	b01c      	add	sp, #112	; 0x70
 8002eac:	f85d eb04 	ldr.w	lr, [sp], #4
 8002eb0:	b003      	add	sp, #12
 8002eb2:	4770      	bx	lr
 8002eb4:	20000048 	.word	0x20000048

08002eb8 <_strtol_l.isra.0>:
 8002eb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ebc:	4680      	mov	r8, r0
 8002ebe:	4689      	mov	r9, r1
 8002ec0:	4692      	mov	sl, r2
 8002ec2:	461f      	mov	r7, r3
 8002ec4:	468b      	mov	fp, r1
 8002ec6:	465d      	mov	r5, fp
 8002ec8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002eca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002ece:	f000 f889 	bl	8002fe4 <__locale_ctype_ptr_l>
 8002ed2:	4420      	add	r0, r4
 8002ed4:	7846      	ldrb	r6, [r0, #1]
 8002ed6:	f016 0608 	ands.w	r6, r6, #8
 8002eda:	d10b      	bne.n	8002ef4 <_strtol_l.isra.0+0x3c>
 8002edc:	2c2d      	cmp	r4, #45	; 0x2d
 8002ede:	d10b      	bne.n	8002ef8 <_strtol_l.isra.0+0x40>
 8002ee0:	782c      	ldrb	r4, [r5, #0]
 8002ee2:	2601      	movs	r6, #1
 8002ee4:	f10b 0502 	add.w	r5, fp, #2
 8002ee8:	b167      	cbz	r7, 8002f04 <_strtol_l.isra.0+0x4c>
 8002eea:	2f10      	cmp	r7, #16
 8002eec:	d114      	bne.n	8002f18 <_strtol_l.isra.0+0x60>
 8002eee:	2c30      	cmp	r4, #48	; 0x30
 8002ef0:	d00a      	beq.n	8002f08 <_strtol_l.isra.0+0x50>
 8002ef2:	e011      	b.n	8002f18 <_strtol_l.isra.0+0x60>
 8002ef4:	46ab      	mov	fp, r5
 8002ef6:	e7e6      	b.n	8002ec6 <_strtol_l.isra.0+0xe>
 8002ef8:	2c2b      	cmp	r4, #43	; 0x2b
 8002efa:	bf04      	itt	eq
 8002efc:	782c      	ldrbeq	r4, [r5, #0]
 8002efe:	f10b 0502 	addeq.w	r5, fp, #2
 8002f02:	e7f1      	b.n	8002ee8 <_strtol_l.isra.0+0x30>
 8002f04:	2c30      	cmp	r4, #48	; 0x30
 8002f06:	d127      	bne.n	8002f58 <_strtol_l.isra.0+0xa0>
 8002f08:	782b      	ldrb	r3, [r5, #0]
 8002f0a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002f0e:	2b58      	cmp	r3, #88	; 0x58
 8002f10:	d14b      	bne.n	8002faa <_strtol_l.isra.0+0xf2>
 8002f12:	786c      	ldrb	r4, [r5, #1]
 8002f14:	2710      	movs	r7, #16
 8002f16:	3502      	adds	r5, #2
 8002f18:	2e00      	cmp	r6, #0
 8002f1a:	bf0c      	ite	eq
 8002f1c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8002f20:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8002f24:	2200      	movs	r2, #0
 8002f26:	fbb1 fef7 	udiv	lr, r1, r7
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	fb07 1c1e 	mls	ip, r7, lr, r1
 8002f30:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002f34:	2b09      	cmp	r3, #9
 8002f36:	d811      	bhi.n	8002f5c <_strtol_l.isra.0+0xa4>
 8002f38:	461c      	mov	r4, r3
 8002f3a:	42a7      	cmp	r7, r4
 8002f3c:	dd1d      	ble.n	8002f7a <_strtol_l.isra.0+0xc2>
 8002f3e:	1c53      	adds	r3, r2, #1
 8002f40:	d007      	beq.n	8002f52 <_strtol_l.isra.0+0x9a>
 8002f42:	4586      	cmp	lr, r0
 8002f44:	d316      	bcc.n	8002f74 <_strtol_l.isra.0+0xbc>
 8002f46:	d101      	bne.n	8002f4c <_strtol_l.isra.0+0x94>
 8002f48:	45a4      	cmp	ip, r4
 8002f4a:	db13      	blt.n	8002f74 <_strtol_l.isra.0+0xbc>
 8002f4c:	fb00 4007 	mla	r0, r0, r7, r4
 8002f50:	2201      	movs	r2, #1
 8002f52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002f56:	e7eb      	b.n	8002f30 <_strtol_l.isra.0+0x78>
 8002f58:	270a      	movs	r7, #10
 8002f5a:	e7dd      	b.n	8002f18 <_strtol_l.isra.0+0x60>
 8002f5c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8002f60:	2b19      	cmp	r3, #25
 8002f62:	d801      	bhi.n	8002f68 <_strtol_l.isra.0+0xb0>
 8002f64:	3c37      	subs	r4, #55	; 0x37
 8002f66:	e7e8      	b.n	8002f3a <_strtol_l.isra.0+0x82>
 8002f68:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8002f6c:	2b19      	cmp	r3, #25
 8002f6e:	d804      	bhi.n	8002f7a <_strtol_l.isra.0+0xc2>
 8002f70:	3c57      	subs	r4, #87	; 0x57
 8002f72:	e7e2      	b.n	8002f3a <_strtol_l.isra.0+0x82>
 8002f74:	f04f 32ff 	mov.w	r2, #4294967295
 8002f78:	e7eb      	b.n	8002f52 <_strtol_l.isra.0+0x9a>
 8002f7a:	1c53      	adds	r3, r2, #1
 8002f7c:	d108      	bne.n	8002f90 <_strtol_l.isra.0+0xd8>
 8002f7e:	2322      	movs	r3, #34	; 0x22
 8002f80:	f8c8 3000 	str.w	r3, [r8]
 8002f84:	4608      	mov	r0, r1
 8002f86:	f1ba 0f00 	cmp.w	sl, #0
 8002f8a:	d107      	bne.n	8002f9c <_strtol_l.isra.0+0xe4>
 8002f8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f90:	b106      	cbz	r6, 8002f94 <_strtol_l.isra.0+0xdc>
 8002f92:	4240      	negs	r0, r0
 8002f94:	f1ba 0f00 	cmp.w	sl, #0
 8002f98:	d00c      	beq.n	8002fb4 <_strtol_l.isra.0+0xfc>
 8002f9a:	b122      	cbz	r2, 8002fa6 <_strtol_l.isra.0+0xee>
 8002f9c:	3d01      	subs	r5, #1
 8002f9e:	f8ca 5000 	str.w	r5, [sl]
 8002fa2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fa6:	464d      	mov	r5, r9
 8002fa8:	e7f9      	b.n	8002f9e <_strtol_l.isra.0+0xe6>
 8002faa:	2430      	movs	r4, #48	; 0x30
 8002fac:	2f00      	cmp	r7, #0
 8002fae:	d1b3      	bne.n	8002f18 <_strtol_l.isra.0+0x60>
 8002fb0:	2708      	movs	r7, #8
 8002fb2:	e7b1      	b.n	8002f18 <_strtol_l.isra.0+0x60>
 8002fb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002fb8 <strtol>:
 8002fb8:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <strtol+0x24>)
 8002fba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002fbc:	681c      	ldr	r4, [r3, #0]
 8002fbe:	4d08      	ldr	r5, [pc, #32]	; (8002fe0 <strtol+0x28>)
 8002fc0:	6a23      	ldr	r3, [r4, #32]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	bf08      	it	eq
 8002fc6:	462b      	moveq	r3, r5
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	460a      	mov	r2, r1
 8002fce:	4601      	mov	r1, r0
 8002fd0:	4620      	mov	r0, r4
 8002fd2:	f7ff ff71 	bl	8002eb8 <_strtol_l.isra.0>
 8002fd6:	b003      	add	sp, #12
 8002fd8:	bd30      	pop	{r4, r5, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000048 	.word	0x20000048
 8002fe0:	200000ac 	.word	0x200000ac

08002fe4 <__locale_ctype_ptr_l>:
 8002fe4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8002fe8:	4770      	bx	lr

08002fea <__ascii_mbtowc>:
 8002fea:	b082      	sub	sp, #8
 8002fec:	b901      	cbnz	r1, 8002ff0 <__ascii_mbtowc+0x6>
 8002fee:	a901      	add	r1, sp, #4
 8002ff0:	b142      	cbz	r2, 8003004 <__ascii_mbtowc+0x1a>
 8002ff2:	b14b      	cbz	r3, 8003008 <__ascii_mbtowc+0x1e>
 8002ff4:	7813      	ldrb	r3, [r2, #0]
 8002ff6:	600b      	str	r3, [r1, #0]
 8002ff8:	7812      	ldrb	r2, [r2, #0]
 8002ffa:	1c10      	adds	r0, r2, #0
 8002ffc:	bf18      	it	ne
 8002ffe:	2001      	movne	r0, #1
 8003000:	b002      	add	sp, #8
 8003002:	4770      	bx	lr
 8003004:	4610      	mov	r0, r2
 8003006:	e7fb      	b.n	8003000 <__ascii_mbtowc+0x16>
 8003008:	f06f 0001 	mvn.w	r0, #1
 800300c:	e7f8      	b.n	8003000 <__ascii_mbtowc+0x16>

0800300e <__ssputs_r>:
 800300e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003012:	688e      	ldr	r6, [r1, #8]
 8003014:	429e      	cmp	r6, r3
 8003016:	4682      	mov	sl, r0
 8003018:	460c      	mov	r4, r1
 800301a:	4691      	mov	r9, r2
 800301c:	4698      	mov	r8, r3
 800301e:	d835      	bhi.n	800308c <__ssputs_r+0x7e>
 8003020:	898a      	ldrh	r2, [r1, #12]
 8003022:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003026:	d031      	beq.n	800308c <__ssputs_r+0x7e>
 8003028:	6825      	ldr	r5, [r4, #0]
 800302a:	6909      	ldr	r1, [r1, #16]
 800302c:	1a6f      	subs	r7, r5, r1
 800302e:	6965      	ldr	r5, [r4, #20]
 8003030:	2302      	movs	r3, #2
 8003032:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003036:	fb95 f5f3 	sdiv	r5, r5, r3
 800303a:	f108 0301 	add.w	r3, r8, #1
 800303e:	443b      	add	r3, r7
 8003040:	429d      	cmp	r5, r3
 8003042:	bf38      	it	cc
 8003044:	461d      	movcc	r5, r3
 8003046:	0553      	lsls	r3, r2, #21
 8003048:	d531      	bpl.n	80030ae <__ssputs_r+0xa0>
 800304a:	4629      	mov	r1, r5
 800304c:	f000 fb44 	bl	80036d8 <_malloc_r>
 8003050:	4606      	mov	r6, r0
 8003052:	b950      	cbnz	r0, 800306a <__ssputs_r+0x5c>
 8003054:	230c      	movs	r3, #12
 8003056:	f8ca 3000 	str.w	r3, [sl]
 800305a:	89a3      	ldrh	r3, [r4, #12]
 800305c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003060:	81a3      	strh	r3, [r4, #12]
 8003062:	f04f 30ff 	mov.w	r0, #4294967295
 8003066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800306a:	463a      	mov	r2, r7
 800306c:	6921      	ldr	r1, [r4, #16]
 800306e:	f000 fac0 	bl	80035f2 <memcpy>
 8003072:	89a3      	ldrh	r3, [r4, #12]
 8003074:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800307c:	81a3      	strh	r3, [r4, #12]
 800307e:	6126      	str	r6, [r4, #16]
 8003080:	6165      	str	r5, [r4, #20]
 8003082:	443e      	add	r6, r7
 8003084:	1bed      	subs	r5, r5, r7
 8003086:	6026      	str	r6, [r4, #0]
 8003088:	60a5      	str	r5, [r4, #8]
 800308a:	4646      	mov	r6, r8
 800308c:	4546      	cmp	r6, r8
 800308e:	bf28      	it	cs
 8003090:	4646      	movcs	r6, r8
 8003092:	4632      	mov	r2, r6
 8003094:	4649      	mov	r1, r9
 8003096:	6820      	ldr	r0, [r4, #0]
 8003098:	f000 fab6 	bl	8003608 <memmove>
 800309c:	68a3      	ldr	r3, [r4, #8]
 800309e:	1b9b      	subs	r3, r3, r6
 80030a0:	60a3      	str	r3, [r4, #8]
 80030a2:	6823      	ldr	r3, [r4, #0]
 80030a4:	441e      	add	r6, r3
 80030a6:	6026      	str	r6, [r4, #0]
 80030a8:	2000      	movs	r0, #0
 80030aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030ae:	462a      	mov	r2, r5
 80030b0:	f000 fb70 	bl	8003794 <_realloc_r>
 80030b4:	4606      	mov	r6, r0
 80030b6:	2800      	cmp	r0, #0
 80030b8:	d1e1      	bne.n	800307e <__ssputs_r+0x70>
 80030ba:	6921      	ldr	r1, [r4, #16]
 80030bc:	4650      	mov	r0, sl
 80030be:	f000 fabd 	bl	800363c <_free_r>
 80030c2:	e7c7      	b.n	8003054 <__ssputs_r+0x46>

080030c4 <_svfiprintf_r>:
 80030c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030c8:	b09d      	sub	sp, #116	; 0x74
 80030ca:	4680      	mov	r8, r0
 80030cc:	9303      	str	r3, [sp, #12]
 80030ce:	898b      	ldrh	r3, [r1, #12]
 80030d0:	061c      	lsls	r4, r3, #24
 80030d2:	460d      	mov	r5, r1
 80030d4:	4616      	mov	r6, r2
 80030d6:	d50f      	bpl.n	80030f8 <_svfiprintf_r+0x34>
 80030d8:	690b      	ldr	r3, [r1, #16]
 80030da:	b96b      	cbnz	r3, 80030f8 <_svfiprintf_r+0x34>
 80030dc:	2140      	movs	r1, #64	; 0x40
 80030de:	f000 fafb 	bl	80036d8 <_malloc_r>
 80030e2:	6028      	str	r0, [r5, #0]
 80030e4:	6128      	str	r0, [r5, #16]
 80030e6:	b928      	cbnz	r0, 80030f4 <_svfiprintf_r+0x30>
 80030e8:	230c      	movs	r3, #12
 80030ea:	f8c8 3000 	str.w	r3, [r8]
 80030ee:	f04f 30ff 	mov.w	r0, #4294967295
 80030f2:	e0c5      	b.n	8003280 <_svfiprintf_r+0x1bc>
 80030f4:	2340      	movs	r3, #64	; 0x40
 80030f6:	616b      	str	r3, [r5, #20]
 80030f8:	2300      	movs	r3, #0
 80030fa:	9309      	str	r3, [sp, #36]	; 0x24
 80030fc:	2320      	movs	r3, #32
 80030fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003102:	2330      	movs	r3, #48	; 0x30
 8003104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003108:	f04f 0b01 	mov.w	fp, #1
 800310c:	4637      	mov	r7, r6
 800310e:	463c      	mov	r4, r7
 8003110:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	d13c      	bne.n	8003192 <_svfiprintf_r+0xce>
 8003118:	ebb7 0a06 	subs.w	sl, r7, r6
 800311c:	d00b      	beq.n	8003136 <_svfiprintf_r+0x72>
 800311e:	4653      	mov	r3, sl
 8003120:	4632      	mov	r2, r6
 8003122:	4629      	mov	r1, r5
 8003124:	4640      	mov	r0, r8
 8003126:	f7ff ff72 	bl	800300e <__ssputs_r>
 800312a:	3001      	adds	r0, #1
 800312c:	f000 80a3 	beq.w	8003276 <_svfiprintf_r+0x1b2>
 8003130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003132:	4453      	add	r3, sl
 8003134:	9309      	str	r3, [sp, #36]	; 0x24
 8003136:	783b      	ldrb	r3, [r7, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 809c 	beq.w	8003276 <_svfiprintf_r+0x1b2>
 800313e:	2300      	movs	r3, #0
 8003140:	f04f 32ff 	mov.w	r2, #4294967295
 8003144:	9304      	str	r3, [sp, #16]
 8003146:	9307      	str	r3, [sp, #28]
 8003148:	9205      	str	r2, [sp, #20]
 800314a:	9306      	str	r3, [sp, #24]
 800314c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003150:	931a      	str	r3, [sp, #104]	; 0x68
 8003152:	2205      	movs	r2, #5
 8003154:	7821      	ldrb	r1, [r4, #0]
 8003156:	4850      	ldr	r0, [pc, #320]	; (8003298 <_svfiprintf_r+0x1d4>)
 8003158:	f7fd f83a 	bl	80001d0 <memchr>
 800315c:	1c67      	adds	r7, r4, #1
 800315e:	9b04      	ldr	r3, [sp, #16]
 8003160:	b9d8      	cbnz	r0, 800319a <_svfiprintf_r+0xd6>
 8003162:	06d9      	lsls	r1, r3, #27
 8003164:	bf44      	itt	mi
 8003166:	2220      	movmi	r2, #32
 8003168:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800316c:	071a      	lsls	r2, r3, #28
 800316e:	bf44      	itt	mi
 8003170:	222b      	movmi	r2, #43	; 0x2b
 8003172:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003176:	7822      	ldrb	r2, [r4, #0]
 8003178:	2a2a      	cmp	r2, #42	; 0x2a
 800317a:	d016      	beq.n	80031aa <_svfiprintf_r+0xe6>
 800317c:	9a07      	ldr	r2, [sp, #28]
 800317e:	2100      	movs	r1, #0
 8003180:	200a      	movs	r0, #10
 8003182:	4627      	mov	r7, r4
 8003184:	3401      	adds	r4, #1
 8003186:	783b      	ldrb	r3, [r7, #0]
 8003188:	3b30      	subs	r3, #48	; 0x30
 800318a:	2b09      	cmp	r3, #9
 800318c:	d951      	bls.n	8003232 <_svfiprintf_r+0x16e>
 800318e:	b1c9      	cbz	r1, 80031c4 <_svfiprintf_r+0x100>
 8003190:	e011      	b.n	80031b6 <_svfiprintf_r+0xf2>
 8003192:	2b25      	cmp	r3, #37	; 0x25
 8003194:	d0c0      	beq.n	8003118 <_svfiprintf_r+0x54>
 8003196:	4627      	mov	r7, r4
 8003198:	e7b9      	b.n	800310e <_svfiprintf_r+0x4a>
 800319a:	4a3f      	ldr	r2, [pc, #252]	; (8003298 <_svfiprintf_r+0x1d4>)
 800319c:	1a80      	subs	r0, r0, r2
 800319e:	fa0b f000 	lsl.w	r0, fp, r0
 80031a2:	4318      	orrs	r0, r3
 80031a4:	9004      	str	r0, [sp, #16]
 80031a6:	463c      	mov	r4, r7
 80031a8:	e7d3      	b.n	8003152 <_svfiprintf_r+0x8e>
 80031aa:	9a03      	ldr	r2, [sp, #12]
 80031ac:	1d11      	adds	r1, r2, #4
 80031ae:	6812      	ldr	r2, [r2, #0]
 80031b0:	9103      	str	r1, [sp, #12]
 80031b2:	2a00      	cmp	r2, #0
 80031b4:	db01      	blt.n	80031ba <_svfiprintf_r+0xf6>
 80031b6:	9207      	str	r2, [sp, #28]
 80031b8:	e004      	b.n	80031c4 <_svfiprintf_r+0x100>
 80031ba:	4252      	negs	r2, r2
 80031bc:	f043 0302 	orr.w	r3, r3, #2
 80031c0:	9207      	str	r2, [sp, #28]
 80031c2:	9304      	str	r3, [sp, #16]
 80031c4:	783b      	ldrb	r3, [r7, #0]
 80031c6:	2b2e      	cmp	r3, #46	; 0x2e
 80031c8:	d10e      	bne.n	80031e8 <_svfiprintf_r+0x124>
 80031ca:	787b      	ldrb	r3, [r7, #1]
 80031cc:	2b2a      	cmp	r3, #42	; 0x2a
 80031ce:	f107 0101 	add.w	r1, r7, #1
 80031d2:	d132      	bne.n	800323a <_svfiprintf_r+0x176>
 80031d4:	9b03      	ldr	r3, [sp, #12]
 80031d6:	1d1a      	adds	r2, r3, #4
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	9203      	str	r2, [sp, #12]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	bfb8      	it	lt
 80031e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80031e4:	3702      	adds	r7, #2
 80031e6:	9305      	str	r3, [sp, #20]
 80031e8:	4c2c      	ldr	r4, [pc, #176]	; (800329c <_svfiprintf_r+0x1d8>)
 80031ea:	7839      	ldrb	r1, [r7, #0]
 80031ec:	2203      	movs	r2, #3
 80031ee:	4620      	mov	r0, r4
 80031f0:	f7fc ffee 	bl	80001d0 <memchr>
 80031f4:	b138      	cbz	r0, 8003206 <_svfiprintf_r+0x142>
 80031f6:	2340      	movs	r3, #64	; 0x40
 80031f8:	1b00      	subs	r0, r0, r4
 80031fa:	fa03 f000 	lsl.w	r0, r3, r0
 80031fe:	9b04      	ldr	r3, [sp, #16]
 8003200:	4303      	orrs	r3, r0
 8003202:	9304      	str	r3, [sp, #16]
 8003204:	3701      	adds	r7, #1
 8003206:	7839      	ldrb	r1, [r7, #0]
 8003208:	4825      	ldr	r0, [pc, #148]	; (80032a0 <_svfiprintf_r+0x1dc>)
 800320a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800320e:	2206      	movs	r2, #6
 8003210:	1c7e      	adds	r6, r7, #1
 8003212:	f7fc ffdd 	bl	80001d0 <memchr>
 8003216:	2800      	cmp	r0, #0
 8003218:	d035      	beq.n	8003286 <_svfiprintf_r+0x1c2>
 800321a:	4b22      	ldr	r3, [pc, #136]	; (80032a4 <_svfiprintf_r+0x1e0>)
 800321c:	b9fb      	cbnz	r3, 800325e <_svfiprintf_r+0x19a>
 800321e:	9b03      	ldr	r3, [sp, #12]
 8003220:	3307      	adds	r3, #7
 8003222:	f023 0307 	bic.w	r3, r3, #7
 8003226:	3308      	adds	r3, #8
 8003228:	9303      	str	r3, [sp, #12]
 800322a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800322c:	444b      	add	r3, r9
 800322e:	9309      	str	r3, [sp, #36]	; 0x24
 8003230:	e76c      	b.n	800310c <_svfiprintf_r+0x48>
 8003232:	fb00 3202 	mla	r2, r0, r2, r3
 8003236:	2101      	movs	r1, #1
 8003238:	e7a3      	b.n	8003182 <_svfiprintf_r+0xbe>
 800323a:	2300      	movs	r3, #0
 800323c:	9305      	str	r3, [sp, #20]
 800323e:	4618      	mov	r0, r3
 8003240:	240a      	movs	r4, #10
 8003242:	460f      	mov	r7, r1
 8003244:	3101      	adds	r1, #1
 8003246:	783a      	ldrb	r2, [r7, #0]
 8003248:	3a30      	subs	r2, #48	; 0x30
 800324a:	2a09      	cmp	r2, #9
 800324c:	d903      	bls.n	8003256 <_svfiprintf_r+0x192>
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0ca      	beq.n	80031e8 <_svfiprintf_r+0x124>
 8003252:	9005      	str	r0, [sp, #20]
 8003254:	e7c8      	b.n	80031e8 <_svfiprintf_r+0x124>
 8003256:	fb04 2000 	mla	r0, r4, r0, r2
 800325a:	2301      	movs	r3, #1
 800325c:	e7f1      	b.n	8003242 <_svfiprintf_r+0x17e>
 800325e:	ab03      	add	r3, sp, #12
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	462a      	mov	r2, r5
 8003264:	4b10      	ldr	r3, [pc, #64]	; (80032a8 <_svfiprintf_r+0x1e4>)
 8003266:	a904      	add	r1, sp, #16
 8003268:	4640      	mov	r0, r8
 800326a:	f3af 8000 	nop.w
 800326e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003272:	4681      	mov	r9, r0
 8003274:	d1d9      	bne.n	800322a <_svfiprintf_r+0x166>
 8003276:	89ab      	ldrh	r3, [r5, #12]
 8003278:	065b      	lsls	r3, r3, #25
 800327a:	f53f af38 	bmi.w	80030ee <_svfiprintf_r+0x2a>
 800327e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003280:	b01d      	add	sp, #116	; 0x74
 8003282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003286:	ab03      	add	r3, sp, #12
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	462a      	mov	r2, r5
 800328c:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <_svfiprintf_r+0x1e4>)
 800328e:	a904      	add	r1, sp, #16
 8003290:	4640      	mov	r0, r8
 8003292:	f000 f881 	bl	8003398 <_printf_i>
 8003296:	e7ea      	b.n	800326e <_svfiprintf_r+0x1aa>
 8003298:	08003899 	.word	0x08003899
 800329c:	0800389f 	.word	0x0800389f
 80032a0:	080038a3 	.word	0x080038a3
 80032a4:	00000000 	.word	0x00000000
 80032a8:	0800300f 	.word	0x0800300f

080032ac <_printf_common>:
 80032ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032b0:	4691      	mov	r9, r2
 80032b2:	461f      	mov	r7, r3
 80032b4:	688a      	ldr	r2, [r1, #8]
 80032b6:	690b      	ldr	r3, [r1, #16]
 80032b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032bc:	4293      	cmp	r3, r2
 80032be:	bfb8      	it	lt
 80032c0:	4613      	movlt	r3, r2
 80032c2:	f8c9 3000 	str.w	r3, [r9]
 80032c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032ca:	4606      	mov	r6, r0
 80032cc:	460c      	mov	r4, r1
 80032ce:	b112      	cbz	r2, 80032d6 <_printf_common+0x2a>
 80032d0:	3301      	adds	r3, #1
 80032d2:	f8c9 3000 	str.w	r3, [r9]
 80032d6:	6823      	ldr	r3, [r4, #0]
 80032d8:	0699      	lsls	r1, r3, #26
 80032da:	bf42      	ittt	mi
 80032dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80032e0:	3302      	addmi	r3, #2
 80032e2:	f8c9 3000 	strmi.w	r3, [r9]
 80032e6:	6825      	ldr	r5, [r4, #0]
 80032e8:	f015 0506 	ands.w	r5, r5, #6
 80032ec:	d107      	bne.n	80032fe <_printf_common+0x52>
 80032ee:	f104 0a19 	add.w	sl, r4, #25
 80032f2:	68e3      	ldr	r3, [r4, #12]
 80032f4:	f8d9 2000 	ldr.w	r2, [r9]
 80032f8:	1a9b      	subs	r3, r3, r2
 80032fa:	429d      	cmp	r5, r3
 80032fc:	db29      	blt.n	8003352 <_printf_common+0xa6>
 80032fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003302:	6822      	ldr	r2, [r4, #0]
 8003304:	3300      	adds	r3, #0
 8003306:	bf18      	it	ne
 8003308:	2301      	movne	r3, #1
 800330a:	0692      	lsls	r2, r2, #26
 800330c:	d42e      	bmi.n	800336c <_printf_common+0xc0>
 800330e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003312:	4639      	mov	r1, r7
 8003314:	4630      	mov	r0, r6
 8003316:	47c0      	blx	r8
 8003318:	3001      	adds	r0, #1
 800331a:	d021      	beq.n	8003360 <_printf_common+0xb4>
 800331c:	6823      	ldr	r3, [r4, #0]
 800331e:	68e5      	ldr	r5, [r4, #12]
 8003320:	f8d9 2000 	ldr.w	r2, [r9]
 8003324:	f003 0306 	and.w	r3, r3, #6
 8003328:	2b04      	cmp	r3, #4
 800332a:	bf08      	it	eq
 800332c:	1aad      	subeq	r5, r5, r2
 800332e:	68a3      	ldr	r3, [r4, #8]
 8003330:	6922      	ldr	r2, [r4, #16]
 8003332:	bf0c      	ite	eq
 8003334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003338:	2500      	movne	r5, #0
 800333a:	4293      	cmp	r3, r2
 800333c:	bfc4      	itt	gt
 800333e:	1a9b      	subgt	r3, r3, r2
 8003340:	18ed      	addgt	r5, r5, r3
 8003342:	f04f 0900 	mov.w	r9, #0
 8003346:	341a      	adds	r4, #26
 8003348:	454d      	cmp	r5, r9
 800334a:	d11b      	bne.n	8003384 <_printf_common+0xd8>
 800334c:	2000      	movs	r0, #0
 800334e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003352:	2301      	movs	r3, #1
 8003354:	4652      	mov	r2, sl
 8003356:	4639      	mov	r1, r7
 8003358:	4630      	mov	r0, r6
 800335a:	47c0      	blx	r8
 800335c:	3001      	adds	r0, #1
 800335e:	d103      	bne.n	8003368 <_printf_common+0xbc>
 8003360:	f04f 30ff 	mov.w	r0, #4294967295
 8003364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003368:	3501      	adds	r5, #1
 800336a:	e7c2      	b.n	80032f2 <_printf_common+0x46>
 800336c:	18e1      	adds	r1, r4, r3
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	2030      	movs	r0, #48	; 0x30
 8003372:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003376:	4422      	add	r2, r4
 8003378:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800337c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003380:	3302      	adds	r3, #2
 8003382:	e7c4      	b.n	800330e <_printf_common+0x62>
 8003384:	2301      	movs	r3, #1
 8003386:	4622      	mov	r2, r4
 8003388:	4639      	mov	r1, r7
 800338a:	4630      	mov	r0, r6
 800338c:	47c0      	blx	r8
 800338e:	3001      	adds	r0, #1
 8003390:	d0e6      	beq.n	8003360 <_printf_common+0xb4>
 8003392:	f109 0901 	add.w	r9, r9, #1
 8003396:	e7d7      	b.n	8003348 <_printf_common+0x9c>

08003398 <_printf_i>:
 8003398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800339c:	4617      	mov	r7, r2
 800339e:	7e0a      	ldrb	r2, [r1, #24]
 80033a0:	b085      	sub	sp, #20
 80033a2:	2a6e      	cmp	r2, #110	; 0x6e
 80033a4:	4698      	mov	r8, r3
 80033a6:	4606      	mov	r6, r0
 80033a8:	460c      	mov	r4, r1
 80033aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80033ac:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80033b0:	f000 80bc 	beq.w	800352c <_printf_i+0x194>
 80033b4:	d81a      	bhi.n	80033ec <_printf_i+0x54>
 80033b6:	2a63      	cmp	r2, #99	; 0x63
 80033b8:	d02e      	beq.n	8003418 <_printf_i+0x80>
 80033ba:	d80a      	bhi.n	80033d2 <_printf_i+0x3a>
 80033bc:	2a00      	cmp	r2, #0
 80033be:	f000 80c8 	beq.w	8003552 <_printf_i+0x1ba>
 80033c2:	2a58      	cmp	r2, #88	; 0x58
 80033c4:	f000 808a 	beq.w	80034dc <_printf_i+0x144>
 80033c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033cc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80033d0:	e02a      	b.n	8003428 <_printf_i+0x90>
 80033d2:	2a64      	cmp	r2, #100	; 0x64
 80033d4:	d001      	beq.n	80033da <_printf_i+0x42>
 80033d6:	2a69      	cmp	r2, #105	; 0x69
 80033d8:	d1f6      	bne.n	80033c8 <_printf_i+0x30>
 80033da:	6821      	ldr	r1, [r4, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	f011 0f80 	tst.w	r1, #128	; 0x80
 80033e2:	d023      	beq.n	800342c <_printf_i+0x94>
 80033e4:	1d11      	adds	r1, r2, #4
 80033e6:	6019      	str	r1, [r3, #0]
 80033e8:	6813      	ldr	r3, [r2, #0]
 80033ea:	e027      	b.n	800343c <_printf_i+0xa4>
 80033ec:	2a73      	cmp	r2, #115	; 0x73
 80033ee:	f000 80b4 	beq.w	800355a <_printf_i+0x1c2>
 80033f2:	d808      	bhi.n	8003406 <_printf_i+0x6e>
 80033f4:	2a6f      	cmp	r2, #111	; 0x6f
 80033f6:	d02a      	beq.n	800344e <_printf_i+0xb6>
 80033f8:	2a70      	cmp	r2, #112	; 0x70
 80033fa:	d1e5      	bne.n	80033c8 <_printf_i+0x30>
 80033fc:	680a      	ldr	r2, [r1, #0]
 80033fe:	f042 0220 	orr.w	r2, r2, #32
 8003402:	600a      	str	r2, [r1, #0]
 8003404:	e003      	b.n	800340e <_printf_i+0x76>
 8003406:	2a75      	cmp	r2, #117	; 0x75
 8003408:	d021      	beq.n	800344e <_printf_i+0xb6>
 800340a:	2a78      	cmp	r2, #120	; 0x78
 800340c:	d1dc      	bne.n	80033c8 <_printf_i+0x30>
 800340e:	2278      	movs	r2, #120	; 0x78
 8003410:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003414:	496e      	ldr	r1, [pc, #440]	; (80035d0 <_printf_i+0x238>)
 8003416:	e064      	b.n	80034e2 <_printf_i+0x14a>
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800341e:	1d11      	adds	r1, r2, #4
 8003420:	6019      	str	r1, [r3, #0]
 8003422:	6813      	ldr	r3, [r2, #0]
 8003424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003428:	2301      	movs	r3, #1
 800342a:	e0a3      	b.n	8003574 <_printf_i+0x1dc>
 800342c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003430:	f102 0104 	add.w	r1, r2, #4
 8003434:	6019      	str	r1, [r3, #0]
 8003436:	d0d7      	beq.n	80033e8 <_printf_i+0x50>
 8003438:	f9b2 3000 	ldrsh.w	r3, [r2]
 800343c:	2b00      	cmp	r3, #0
 800343e:	da03      	bge.n	8003448 <_printf_i+0xb0>
 8003440:	222d      	movs	r2, #45	; 0x2d
 8003442:	425b      	negs	r3, r3
 8003444:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003448:	4962      	ldr	r1, [pc, #392]	; (80035d4 <_printf_i+0x23c>)
 800344a:	220a      	movs	r2, #10
 800344c:	e017      	b.n	800347e <_printf_i+0xe6>
 800344e:	6820      	ldr	r0, [r4, #0]
 8003450:	6819      	ldr	r1, [r3, #0]
 8003452:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003456:	d003      	beq.n	8003460 <_printf_i+0xc8>
 8003458:	1d08      	adds	r0, r1, #4
 800345a:	6018      	str	r0, [r3, #0]
 800345c:	680b      	ldr	r3, [r1, #0]
 800345e:	e006      	b.n	800346e <_printf_i+0xd6>
 8003460:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003464:	f101 0004 	add.w	r0, r1, #4
 8003468:	6018      	str	r0, [r3, #0]
 800346a:	d0f7      	beq.n	800345c <_printf_i+0xc4>
 800346c:	880b      	ldrh	r3, [r1, #0]
 800346e:	4959      	ldr	r1, [pc, #356]	; (80035d4 <_printf_i+0x23c>)
 8003470:	2a6f      	cmp	r2, #111	; 0x6f
 8003472:	bf14      	ite	ne
 8003474:	220a      	movne	r2, #10
 8003476:	2208      	moveq	r2, #8
 8003478:	2000      	movs	r0, #0
 800347a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800347e:	6865      	ldr	r5, [r4, #4]
 8003480:	60a5      	str	r5, [r4, #8]
 8003482:	2d00      	cmp	r5, #0
 8003484:	f2c0 809c 	blt.w	80035c0 <_printf_i+0x228>
 8003488:	6820      	ldr	r0, [r4, #0]
 800348a:	f020 0004 	bic.w	r0, r0, #4
 800348e:	6020      	str	r0, [r4, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d13f      	bne.n	8003514 <_printf_i+0x17c>
 8003494:	2d00      	cmp	r5, #0
 8003496:	f040 8095 	bne.w	80035c4 <_printf_i+0x22c>
 800349a:	4675      	mov	r5, lr
 800349c:	2a08      	cmp	r2, #8
 800349e:	d10b      	bne.n	80034b8 <_printf_i+0x120>
 80034a0:	6823      	ldr	r3, [r4, #0]
 80034a2:	07da      	lsls	r2, r3, #31
 80034a4:	d508      	bpl.n	80034b8 <_printf_i+0x120>
 80034a6:	6923      	ldr	r3, [r4, #16]
 80034a8:	6862      	ldr	r2, [r4, #4]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	bfde      	ittt	le
 80034ae:	2330      	movle	r3, #48	; 0x30
 80034b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034b8:	ebae 0305 	sub.w	r3, lr, r5
 80034bc:	6123      	str	r3, [r4, #16]
 80034be:	f8cd 8000 	str.w	r8, [sp]
 80034c2:	463b      	mov	r3, r7
 80034c4:	aa03      	add	r2, sp, #12
 80034c6:	4621      	mov	r1, r4
 80034c8:	4630      	mov	r0, r6
 80034ca:	f7ff feef 	bl	80032ac <_printf_common>
 80034ce:	3001      	adds	r0, #1
 80034d0:	d155      	bne.n	800357e <_printf_i+0x1e6>
 80034d2:	f04f 30ff 	mov.w	r0, #4294967295
 80034d6:	b005      	add	sp, #20
 80034d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80034dc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80034e0:	493c      	ldr	r1, [pc, #240]	; (80035d4 <_printf_i+0x23c>)
 80034e2:	6822      	ldr	r2, [r4, #0]
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80034ea:	f100 0504 	add.w	r5, r0, #4
 80034ee:	601d      	str	r5, [r3, #0]
 80034f0:	d001      	beq.n	80034f6 <_printf_i+0x15e>
 80034f2:	6803      	ldr	r3, [r0, #0]
 80034f4:	e002      	b.n	80034fc <_printf_i+0x164>
 80034f6:	0655      	lsls	r5, r2, #25
 80034f8:	d5fb      	bpl.n	80034f2 <_printf_i+0x15a>
 80034fa:	8803      	ldrh	r3, [r0, #0]
 80034fc:	07d0      	lsls	r0, r2, #31
 80034fe:	bf44      	itt	mi
 8003500:	f042 0220 	orrmi.w	r2, r2, #32
 8003504:	6022      	strmi	r2, [r4, #0]
 8003506:	b91b      	cbnz	r3, 8003510 <_printf_i+0x178>
 8003508:	6822      	ldr	r2, [r4, #0]
 800350a:	f022 0220 	bic.w	r2, r2, #32
 800350e:	6022      	str	r2, [r4, #0]
 8003510:	2210      	movs	r2, #16
 8003512:	e7b1      	b.n	8003478 <_printf_i+0xe0>
 8003514:	4675      	mov	r5, lr
 8003516:	fbb3 f0f2 	udiv	r0, r3, r2
 800351a:	fb02 3310 	mls	r3, r2, r0, r3
 800351e:	5ccb      	ldrb	r3, [r1, r3]
 8003520:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003524:	4603      	mov	r3, r0
 8003526:	2800      	cmp	r0, #0
 8003528:	d1f5      	bne.n	8003516 <_printf_i+0x17e>
 800352a:	e7b7      	b.n	800349c <_printf_i+0x104>
 800352c:	6808      	ldr	r0, [r1, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	6949      	ldr	r1, [r1, #20]
 8003532:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003536:	d004      	beq.n	8003542 <_printf_i+0x1aa>
 8003538:	1d10      	adds	r0, r2, #4
 800353a:	6018      	str	r0, [r3, #0]
 800353c:	6813      	ldr	r3, [r2, #0]
 800353e:	6019      	str	r1, [r3, #0]
 8003540:	e007      	b.n	8003552 <_printf_i+0x1ba>
 8003542:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003546:	f102 0004 	add.w	r0, r2, #4
 800354a:	6018      	str	r0, [r3, #0]
 800354c:	6813      	ldr	r3, [r2, #0]
 800354e:	d0f6      	beq.n	800353e <_printf_i+0x1a6>
 8003550:	8019      	strh	r1, [r3, #0]
 8003552:	2300      	movs	r3, #0
 8003554:	6123      	str	r3, [r4, #16]
 8003556:	4675      	mov	r5, lr
 8003558:	e7b1      	b.n	80034be <_printf_i+0x126>
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	1d11      	adds	r1, r2, #4
 800355e:	6019      	str	r1, [r3, #0]
 8003560:	6815      	ldr	r5, [r2, #0]
 8003562:	6862      	ldr	r2, [r4, #4]
 8003564:	2100      	movs	r1, #0
 8003566:	4628      	mov	r0, r5
 8003568:	f7fc fe32 	bl	80001d0 <memchr>
 800356c:	b108      	cbz	r0, 8003572 <_printf_i+0x1da>
 800356e:	1b40      	subs	r0, r0, r5
 8003570:	6060      	str	r0, [r4, #4]
 8003572:	6863      	ldr	r3, [r4, #4]
 8003574:	6123      	str	r3, [r4, #16]
 8003576:	2300      	movs	r3, #0
 8003578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800357c:	e79f      	b.n	80034be <_printf_i+0x126>
 800357e:	6923      	ldr	r3, [r4, #16]
 8003580:	462a      	mov	r2, r5
 8003582:	4639      	mov	r1, r7
 8003584:	4630      	mov	r0, r6
 8003586:	47c0      	blx	r8
 8003588:	3001      	adds	r0, #1
 800358a:	d0a2      	beq.n	80034d2 <_printf_i+0x13a>
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	079b      	lsls	r3, r3, #30
 8003590:	d507      	bpl.n	80035a2 <_printf_i+0x20a>
 8003592:	2500      	movs	r5, #0
 8003594:	f104 0919 	add.w	r9, r4, #25
 8003598:	68e3      	ldr	r3, [r4, #12]
 800359a:	9a03      	ldr	r2, [sp, #12]
 800359c:	1a9b      	subs	r3, r3, r2
 800359e:	429d      	cmp	r5, r3
 80035a0:	db05      	blt.n	80035ae <_printf_i+0x216>
 80035a2:	68e0      	ldr	r0, [r4, #12]
 80035a4:	9b03      	ldr	r3, [sp, #12]
 80035a6:	4298      	cmp	r0, r3
 80035a8:	bfb8      	it	lt
 80035aa:	4618      	movlt	r0, r3
 80035ac:	e793      	b.n	80034d6 <_printf_i+0x13e>
 80035ae:	2301      	movs	r3, #1
 80035b0:	464a      	mov	r2, r9
 80035b2:	4639      	mov	r1, r7
 80035b4:	4630      	mov	r0, r6
 80035b6:	47c0      	blx	r8
 80035b8:	3001      	adds	r0, #1
 80035ba:	d08a      	beq.n	80034d2 <_printf_i+0x13a>
 80035bc:	3501      	adds	r5, #1
 80035be:	e7eb      	b.n	8003598 <_printf_i+0x200>
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1a7      	bne.n	8003514 <_printf_i+0x17c>
 80035c4:	780b      	ldrb	r3, [r1, #0]
 80035c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035ce:	e765      	b.n	800349c <_printf_i+0x104>
 80035d0:	080038bb 	.word	0x080038bb
 80035d4:	080038aa 	.word	0x080038aa

080035d8 <__ascii_wctomb>:
 80035d8:	b149      	cbz	r1, 80035ee <__ascii_wctomb+0x16>
 80035da:	2aff      	cmp	r2, #255	; 0xff
 80035dc:	bf85      	ittet	hi
 80035de:	238a      	movhi	r3, #138	; 0x8a
 80035e0:	6003      	strhi	r3, [r0, #0]
 80035e2:	700a      	strbls	r2, [r1, #0]
 80035e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80035e8:	bf98      	it	ls
 80035ea:	2001      	movls	r0, #1
 80035ec:	4770      	bx	lr
 80035ee:	4608      	mov	r0, r1
 80035f0:	4770      	bx	lr

080035f2 <memcpy>:
 80035f2:	b510      	push	{r4, lr}
 80035f4:	1e43      	subs	r3, r0, #1
 80035f6:	440a      	add	r2, r1
 80035f8:	4291      	cmp	r1, r2
 80035fa:	d100      	bne.n	80035fe <memcpy+0xc>
 80035fc:	bd10      	pop	{r4, pc}
 80035fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003602:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003606:	e7f7      	b.n	80035f8 <memcpy+0x6>

08003608 <memmove>:
 8003608:	4288      	cmp	r0, r1
 800360a:	b510      	push	{r4, lr}
 800360c:	eb01 0302 	add.w	r3, r1, r2
 8003610:	d803      	bhi.n	800361a <memmove+0x12>
 8003612:	1e42      	subs	r2, r0, #1
 8003614:	4299      	cmp	r1, r3
 8003616:	d10c      	bne.n	8003632 <memmove+0x2a>
 8003618:	bd10      	pop	{r4, pc}
 800361a:	4298      	cmp	r0, r3
 800361c:	d2f9      	bcs.n	8003612 <memmove+0xa>
 800361e:	1881      	adds	r1, r0, r2
 8003620:	1ad2      	subs	r2, r2, r3
 8003622:	42d3      	cmn	r3, r2
 8003624:	d100      	bne.n	8003628 <memmove+0x20>
 8003626:	bd10      	pop	{r4, pc}
 8003628:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800362c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003630:	e7f7      	b.n	8003622 <memmove+0x1a>
 8003632:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003636:	f802 4f01 	strb.w	r4, [r2, #1]!
 800363a:	e7eb      	b.n	8003614 <memmove+0xc>

0800363c <_free_r>:
 800363c:	b538      	push	{r3, r4, r5, lr}
 800363e:	4605      	mov	r5, r0
 8003640:	2900      	cmp	r1, #0
 8003642:	d045      	beq.n	80036d0 <_free_r+0x94>
 8003644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003648:	1f0c      	subs	r4, r1, #4
 800364a:	2b00      	cmp	r3, #0
 800364c:	bfb8      	it	lt
 800364e:	18e4      	addlt	r4, r4, r3
 8003650:	f000 f8d6 	bl	8003800 <__malloc_lock>
 8003654:	4a1f      	ldr	r2, [pc, #124]	; (80036d4 <_free_r+0x98>)
 8003656:	6813      	ldr	r3, [r2, #0]
 8003658:	4610      	mov	r0, r2
 800365a:	b933      	cbnz	r3, 800366a <_free_r+0x2e>
 800365c:	6063      	str	r3, [r4, #4]
 800365e:	6014      	str	r4, [r2, #0]
 8003660:	4628      	mov	r0, r5
 8003662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003666:	f000 b8cc 	b.w	8003802 <__malloc_unlock>
 800366a:	42a3      	cmp	r3, r4
 800366c:	d90c      	bls.n	8003688 <_free_r+0x4c>
 800366e:	6821      	ldr	r1, [r4, #0]
 8003670:	1862      	adds	r2, r4, r1
 8003672:	4293      	cmp	r3, r2
 8003674:	bf04      	itt	eq
 8003676:	681a      	ldreq	r2, [r3, #0]
 8003678:	685b      	ldreq	r3, [r3, #4]
 800367a:	6063      	str	r3, [r4, #4]
 800367c:	bf04      	itt	eq
 800367e:	1852      	addeq	r2, r2, r1
 8003680:	6022      	streq	r2, [r4, #0]
 8003682:	6004      	str	r4, [r0, #0]
 8003684:	e7ec      	b.n	8003660 <_free_r+0x24>
 8003686:	4613      	mov	r3, r2
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	b10a      	cbz	r2, 8003690 <_free_r+0x54>
 800368c:	42a2      	cmp	r2, r4
 800368e:	d9fa      	bls.n	8003686 <_free_r+0x4a>
 8003690:	6819      	ldr	r1, [r3, #0]
 8003692:	1858      	adds	r0, r3, r1
 8003694:	42a0      	cmp	r0, r4
 8003696:	d10b      	bne.n	80036b0 <_free_r+0x74>
 8003698:	6820      	ldr	r0, [r4, #0]
 800369a:	4401      	add	r1, r0
 800369c:	1858      	adds	r0, r3, r1
 800369e:	4282      	cmp	r2, r0
 80036a0:	6019      	str	r1, [r3, #0]
 80036a2:	d1dd      	bne.n	8003660 <_free_r+0x24>
 80036a4:	6810      	ldr	r0, [r2, #0]
 80036a6:	6852      	ldr	r2, [r2, #4]
 80036a8:	605a      	str	r2, [r3, #4]
 80036aa:	4401      	add	r1, r0
 80036ac:	6019      	str	r1, [r3, #0]
 80036ae:	e7d7      	b.n	8003660 <_free_r+0x24>
 80036b0:	d902      	bls.n	80036b8 <_free_r+0x7c>
 80036b2:	230c      	movs	r3, #12
 80036b4:	602b      	str	r3, [r5, #0]
 80036b6:	e7d3      	b.n	8003660 <_free_r+0x24>
 80036b8:	6820      	ldr	r0, [r4, #0]
 80036ba:	1821      	adds	r1, r4, r0
 80036bc:	428a      	cmp	r2, r1
 80036be:	bf04      	itt	eq
 80036c0:	6811      	ldreq	r1, [r2, #0]
 80036c2:	6852      	ldreq	r2, [r2, #4]
 80036c4:	6062      	str	r2, [r4, #4]
 80036c6:	bf04      	itt	eq
 80036c8:	1809      	addeq	r1, r1, r0
 80036ca:	6021      	streq	r1, [r4, #0]
 80036cc:	605c      	str	r4, [r3, #4]
 80036ce:	e7c7      	b.n	8003660 <_free_r+0x24>
 80036d0:	bd38      	pop	{r3, r4, r5, pc}
 80036d2:	bf00      	nop
 80036d4:	2000026c 	.word	0x2000026c

080036d8 <_malloc_r>:
 80036d8:	b570      	push	{r4, r5, r6, lr}
 80036da:	1ccd      	adds	r5, r1, #3
 80036dc:	f025 0503 	bic.w	r5, r5, #3
 80036e0:	3508      	adds	r5, #8
 80036e2:	2d0c      	cmp	r5, #12
 80036e4:	bf38      	it	cc
 80036e6:	250c      	movcc	r5, #12
 80036e8:	2d00      	cmp	r5, #0
 80036ea:	4606      	mov	r6, r0
 80036ec:	db01      	blt.n	80036f2 <_malloc_r+0x1a>
 80036ee:	42a9      	cmp	r1, r5
 80036f0:	d903      	bls.n	80036fa <_malloc_r+0x22>
 80036f2:	230c      	movs	r3, #12
 80036f4:	6033      	str	r3, [r6, #0]
 80036f6:	2000      	movs	r0, #0
 80036f8:	bd70      	pop	{r4, r5, r6, pc}
 80036fa:	f000 f881 	bl	8003800 <__malloc_lock>
 80036fe:	4a23      	ldr	r2, [pc, #140]	; (800378c <_malloc_r+0xb4>)
 8003700:	6814      	ldr	r4, [r2, #0]
 8003702:	4621      	mov	r1, r4
 8003704:	b991      	cbnz	r1, 800372c <_malloc_r+0x54>
 8003706:	4c22      	ldr	r4, [pc, #136]	; (8003790 <_malloc_r+0xb8>)
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	b91b      	cbnz	r3, 8003714 <_malloc_r+0x3c>
 800370c:	4630      	mov	r0, r6
 800370e:	f000 f867 	bl	80037e0 <_sbrk_r>
 8003712:	6020      	str	r0, [r4, #0]
 8003714:	4629      	mov	r1, r5
 8003716:	4630      	mov	r0, r6
 8003718:	f000 f862 	bl	80037e0 <_sbrk_r>
 800371c:	1c43      	adds	r3, r0, #1
 800371e:	d126      	bne.n	800376e <_malloc_r+0x96>
 8003720:	230c      	movs	r3, #12
 8003722:	6033      	str	r3, [r6, #0]
 8003724:	4630      	mov	r0, r6
 8003726:	f000 f86c 	bl	8003802 <__malloc_unlock>
 800372a:	e7e4      	b.n	80036f6 <_malloc_r+0x1e>
 800372c:	680b      	ldr	r3, [r1, #0]
 800372e:	1b5b      	subs	r3, r3, r5
 8003730:	d41a      	bmi.n	8003768 <_malloc_r+0x90>
 8003732:	2b0b      	cmp	r3, #11
 8003734:	d90f      	bls.n	8003756 <_malloc_r+0x7e>
 8003736:	600b      	str	r3, [r1, #0]
 8003738:	50cd      	str	r5, [r1, r3]
 800373a:	18cc      	adds	r4, r1, r3
 800373c:	4630      	mov	r0, r6
 800373e:	f000 f860 	bl	8003802 <__malloc_unlock>
 8003742:	f104 000b 	add.w	r0, r4, #11
 8003746:	1d23      	adds	r3, r4, #4
 8003748:	f020 0007 	bic.w	r0, r0, #7
 800374c:	1ac3      	subs	r3, r0, r3
 800374e:	d01b      	beq.n	8003788 <_malloc_r+0xb0>
 8003750:	425a      	negs	r2, r3
 8003752:	50e2      	str	r2, [r4, r3]
 8003754:	bd70      	pop	{r4, r5, r6, pc}
 8003756:	428c      	cmp	r4, r1
 8003758:	bf0d      	iteet	eq
 800375a:	6863      	ldreq	r3, [r4, #4]
 800375c:	684b      	ldrne	r3, [r1, #4]
 800375e:	6063      	strne	r3, [r4, #4]
 8003760:	6013      	streq	r3, [r2, #0]
 8003762:	bf18      	it	ne
 8003764:	460c      	movne	r4, r1
 8003766:	e7e9      	b.n	800373c <_malloc_r+0x64>
 8003768:	460c      	mov	r4, r1
 800376a:	6849      	ldr	r1, [r1, #4]
 800376c:	e7ca      	b.n	8003704 <_malloc_r+0x2c>
 800376e:	1cc4      	adds	r4, r0, #3
 8003770:	f024 0403 	bic.w	r4, r4, #3
 8003774:	42a0      	cmp	r0, r4
 8003776:	d005      	beq.n	8003784 <_malloc_r+0xac>
 8003778:	1a21      	subs	r1, r4, r0
 800377a:	4630      	mov	r0, r6
 800377c:	f000 f830 	bl	80037e0 <_sbrk_r>
 8003780:	3001      	adds	r0, #1
 8003782:	d0cd      	beq.n	8003720 <_malloc_r+0x48>
 8003784:	6025      	str	r5, [r4, #0]
 8003786:	e7d9      	b.n	800373c <_malloc_r+0x64>
 8003788:	bd70      	pop	{r4, r5, r6, pc}
 800378a:	bf00      	nop
 800378c:	2000026c 	.word	0x2000026c
 8003790:	20000270 	.word	0x20000270

08003794 <_realloc_r>:
 8003794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003796:	4607      	mov	r7, r0
 8003798:	4614      	mov	r4, r2
 800379a:	460e      	mov	r6, r1
 800379c:	b921      	cbnz	r1, 80037a8 <_realloc_r+0x14>
 800379e:	4611      	mov	r1, r2
 80037a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80037a4:	f7ff bf98 	b.w	80036d8 <_malloc_r>
 80037a8:	b922      	cbnz	r2, 80037b4 <_realloc_r+0x20>
 80037aa:	f7ff ff47 	bl	800363c <_free_r>
 80037ae:	4625      	mov	r5, r4
 80037b0:	4628      	mov	r0, r5
 80037b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037b4:	f000 f826 	bl	8003804 <_malloc_usable_size_r>
 80037b8:	4284      	cmp	r4, r0
 80037ba:	d90f      	bls.n	80037dc <_realloc_r+0x48>
 80037bc:	4621      	mov	r1, r4
 80037be:	4638      	mov	r0, r7
 80037c0:	f7ff ff8a 	bl	80036d8 <_malloc_r>
 80037c4:	4605      	mov	r5, r0
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d0f2      	beq.n	80037b0 <_realloc_r+0x1c>
 80037ca:	4631      	mov	r1, r6
 80037cc:	4622      	mov	r2, r4
 80037ce:	f7ff ff10 	bl	80035f2 <memcpy>
 80037d2:	4631      	mov	r1, r6
 80037d4:	4638      	mov	r0, r7
 80037d6:	f7ff ff31 	bl	800363c <_free_r>
 80037da:	e7e9      	b.n	80037b0 <_realloc_r+0x1c>
 80037dc:	4635      	mov	r5, r6
 80037de:	e7e7      	b.n	80037b0 <_realloc_r+0x1c>

080037e0 <_sbrk_r>:
 80037e0:	b538      	push	{r3, r4, r5, lr}
 80037e2:	4c06      	ldr	r4, [pc, #24]	; (80037fc <_sbrk_r+0x1c>)
 80037e4:	2300      	movs	r3, #0
 80037e6:	4605      	mov	r5, r0
 80037e8:	4608      	mov	r0, r1
 80037ea:	6023      	str	r3, [r4, #0]
 80037ec:	f000 f814 	bl	8003818 <_sbrk>
 80037f0:	1c43      	adds	r3, r0, #1
 80037f2:	d102      	bne.n	80037fa <_sbrk_r+0x1a>
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	b103      	cbz	r3, 80037fa <_sbrk_r+0x1a>
 80037f8:	602b      	str	r3, [r5, #0]
 80037fa:	bd38      	pop	{r3, r4, r5, pc}
 80037fc:	200004a0 	.word	0x200004a0

08003800 <__malloc_lock>:
 8003800:	4770      	bx	lr

08003802 <__malloc_unlock>:
 8003802:	4770      	bx	lr

08003804 <_malloc_usable_size_r>:
 8003804:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003808:	2800      	cmp	r0, #0
 800380a:	f1a0 0004 	sub.w	r0, r0, #4
 800380e:	bfbc      	itt	lt
 8003810:	580b      	ldrlt	r3, [r1, r0]
 8003812:	18c0      	addlt	r0, r0, r3
 8003814:	4770      	bx	lr
	...

08003818 <_sbrk>:
 8003818:	4b04      	ldr	r3, [pc, #16]	; (800382c <_sbrk+0x14>)
 800381a:	6819      	ldr	r1, [r3, #0]
 800381c:	4602      	mov	r2, r0
 800381e:	b909      	cbnz	r1, 8003824 <_sbrk+0xc>
 8003820:	4903      	ldr	r1, [pc, #12]	; (8003830 <_sbrk+0x18>)
 8003822:	6019      	str	r1, [r3, #0]
 8003824:	6818      	ldr	r0, [r3, #0]
 8003826:	4402      	add	r2, r0
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	4770      	bx	lr
 800382c:	20000274 	.word	0x20000274
 8003830:	200004a4 	.word	0x200004a4

08003834 <_init>:
 8003834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003836:	bf00      	nop
 8003838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800383a:	bc08      	pop	{r3}
 800383c:	469e      	mov	lr, r3
 800383e:	4770      	bx	lr

08003840 <_fini>:
 8003840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003842:	bf00      	nop
 8003844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003846:	bc08      	pop	{r3}
 8003848:	469e      	mov	lr, r3
 800384a:	4770      	bx	lr
